// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/assets/v1/messages.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterAsset defines the message structure for the RegisterAsset
// gRPC service method. It allows the authority to register an asset.
type MsgRegisterAsset struct {
	// Authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Asset represents the asset to be registered.
	Asset Asset `protobuf:"bytes,2,opt,name=asset,proto3" json:"asset"`
}

func (m *MsgRegisterAsset) Reset()         { *m = MsgRegisterAsset{} }
func (m *MsgRegisterAsset) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAsset) ProtoMessage()    {}
func (*MsgRegisterAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa7f7c938a129c02, []int{0}
}
func (m *MsgRegisterAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAsset.Merge(m, src)
}
func (m *MsgRegisterAsset) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAsset.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAsset proto.InternalMessageInfo

func (m *MsgRegisterAsset) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgRegisterAsset) GetAsset() Asset {
	if m != nil {
		return m.Asset
	}
	return Asset{}
}

// MsgRegisterAssetResponse is the return value of MsgRegisterAsset.
type MsgRegisterAssetResponse struct {
}

func (m *MsgRegisterAssetResponse) Reset()         { *m = MsgRegisterAssetResponse{} }
func (m *MsgRegisterAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAssetResponse) ProtoMessage()    {}
func (*MsgRegisterAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa7f7c938a129c02, []int{1}
}
func (m *MsgRegisterAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAssetResponse.Merge(m, src)
}
func (m *MsgRegisterAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAssetResponse proto.InternalMessageInfo

// MsgDeregisterAsset defines the message structure for the DeregisterAsset
// gRPC service method. It allows the authority to de-register an asset with
// the token denomination.
type MsgDeregisterAsset struct {
	// Authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty"`
	// Denom represents the denomination of the token associated with the asset.
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *MsgDeregisterAsset) Reset()         { *m = MsgDeregisterAsset{} }
func (m *MsgDeregisterAsset) String() string { return proto.CompactTextString(m) }
func (*MsgDeregisterAsset) ProtoMessage()    {}
func (*MsgDeregisterAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa7f7c938a129c02, []int{2}
}
func (m *MsgDeregisterAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeregisterAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeregisterAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeregisterAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeregisterAsset.Merge(m, src)
}
func (m *MsgDeregisterAsset) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeregisterAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeregisterAsset.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeregisterAsset proto.InternalMessageInfo

func (m *MsgDeregisterAsset) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgDeregisterAsset) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// MsgRegisterAssetResponse is the return value of MsgDeregisterAsset.
type MsgDeregisterAssetResponse struct {
}

func (m *MsgDeregisterAssetResponse) Reset()         { *m = MsgDeregisterAssetResponse{} }
func (m *MsgDeregisterAssetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeregisterAssetResponse) ProtoMessage()    {}
func (*MsgDeregisterAssetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa7f7c938a129c02, []int{3}
}
func (m *MsgDeregisterAssetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeregisterAssetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeregisterAssetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeregisterAssetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeregisterAssetResponse.Merge(m, src)
}
func (m *MsgDeregisterAssetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeregisterAssetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeregisterAssetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeregisterAssetResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterAsset)(nil), "milkyway.assets.v1.MsgRegisterAsset")
	proto.RegisterType((*MsgRegisterAssetResponse)(nil), "milkyway.assets.v1.MsgRegisterAssetResponse")
	proto.RegisterType((*MsgDeregisterAsset)(nil), "milkyway.assets.v1.MsgDeregisterAsset")
	proto.RegisterType((*MsgDeregisterAssetResponse)(nil), "milkyway.assets.v1.MsgDeregisterAssetResponse")
}

func init() { proto.RegisterFile("milkyway/assets/v1/messages.proto", fileDescriptor_fa7f7c938a129c02) }

var fileDescriptor_fa7f7c938a129c02 = []byte{
	// 419 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x92, 0x4f, 0x8f, 0xd2, 0x40,
	0x18, 0xc6, 0x3b, 0x2a, 0x26, 0x8c, 0x31, 0x6a, 0x43, 0x62, 0xa9, 0xa6, 0x60, 0x63, 0x0c, 0x21,
	0x30, 0x13, 0x20, 0x72, 0xe0, 0x06, 0xf1, 0xda, 0x4b, 0xbd, 0x79, 0x31, 0x85, 0x4e, 0x86, 0x46,
	0xda, 0x21, 0x7d, 0x07, 0xb4, 0x37, 0xe3, 0xd1, 0x93, 0xf1, 0x8b, 0xc8, 0xc1, 0x0f, 0xc1, 0x91,
	0x78, 0xf2, 0xb0, 0xd9, 0x6c, 0xe0, 0xc0, 0xd7, 0xd8, 0xd0, 0x3f, 0xb0, 0x5b, 0xd8, 0x84, 0xc3,
	0x5e, 0x9a, 0xbe, 0xef, 0xfb, 0xeb, 0xfb, 0x3c, 0xcf, 0x74, 0xf0, 0x1b, 0xdf, 0x9b, 0x7c, 0x89,
	0xbe, 0x3a, 0x11, 0x75, 0x00, 0x98, 0x04, 0x3a, 0x6f, 0x51, 0x9f, 0x01, 0x38, 0x9c, 0x01, 0x99,
	0x86, 0x42, 0x0a, 0x55, 0xcd, 0x10, 0x92, 0x20, 0x64, 0xde, 0xd2, 0x5f, 0x38, 0xbe, 0x17, 0x08,
	0x1a, 0x3f, 0x13, 0x4c, 0x7f, 0x39, 0x12, 0xe0, 0x0b, 0xa0, 0x3e, 0xf0, 0x78, 0x09, 0xf0, 0x74,
	0x50, 0x4e, 0x06, 0x9f, 0xe3, 0x8a, 0x26, 0x45, 0x3a, 0x2a, 0x71, 0xc1, 0x45, 0xd2, 0xdf, 0xbd,
	0xa5, 0xdd, 0xca, 0x29, 0x4f, 0xc2, 0x65, 0x93, 0xf4, 0x33, 0xf3, 0x0f, 0xc2, 0xcf, 0x2d, 0xe0,
	0x36, 0xe3, 0x1e, 0x48, 0x16, 0xf6, 0x77, 0x94, 0xda, 0xc5, 0x45, 0x67, 0x26, 0xc7, 0x22, 0xf4,
	0x64, 0xa4, 0xa1, 0x2a, 0xaa, 0x15, 0x07, 0xda, 0xbf, 0xbf, 0xcd, 0x52, 0x2a, 0xd8, 0x77, 0xdd,
	0x90, 0x01, 0x7c, 0x94, 0xa1, 0x17, 0x70, 0xfb, 0x80, 0xaa, 0xef, 0x71, 0x21, 0x96, 0xd1, 0x1e,
	0x54, 0x51, 0xed, 0x49, 0xbb, 0x4c, 0x8e, 0xe3, 0x92, 0x58, 0x61, 0xf0, 0x68, 0x79, 0x59, 0x51,
	0xec, 0x84, 0xee, 0x35, 0x7e, 0x6c, 0x17, 0xf5, 0xc3, 0x9a, 0x9f, 0xdb, 0x45, 0xbd, 0xbc, 0xf7,
	0x9d, 0x37, 0x67, 0xea, 0x58, 0xcb, 0xf7, 0x6c, 0x06, 0x53, 0x11, 0x00, 0x33, 0x7f, 0x23, 0xac,
	0x5a, 0xc0, 0x3f, 0xb0, 0xf0, 0x5e, 0xf2, 0x94, 0x70, 0xc1, 0x65, 0x81, 0xf0, 0xe3, 0x3c, 0x45,
	0x3b, 0x29, 0x7a, 0xe4, 0xd8, 0xee, 0xab, 0x9b, 0x76, 0x73, 0xea, 0xe6, 0x6b, 0xac, 0x1f, 0x77,
	0x33, 0xcb, 0xed, 0x0b, 0x84, 0x1f, 0x5a, 0xc0, 0xd5, 0x11, 0x7e, 0x7a, 0xfb, 0x27, 0xbc, 0x3d,
	0x75, 0x7a, 0xf9, 0xe4, 0x7a, 0xe3, 0x1c, 0x2a, 0x13, 0x53, 0x3d, 0xfc, 0x2c, 0x7f, 0x36, 0xef,
	0xee, 0x58, 0x90, 0xe3, 0x74, 0x72, 0x1e, 0x97, 0x49, 0xe9, 0x85, 0xef, 0xdb, 0x45, 0x1d, 0x0d,
	0xac, 0xe5, 0xda, 0x40, 0xab, 0xb5, 0x81, 0xae, 0xd6, 0x06, 0xfa, 0xb5, 0x31, 0x94, 0xd5, 0xc6,
	0x50, 0xfe, 0x6f, 0x0c, 0xe5, 0x53, 0x87, 0x7b, 0x72, 0x3c, 0x1b, 0x92, 0x91, 0xf0, 0x69, 0xb6,
	0xba, 0x39, 0x71, 0x86, 0xb0, 0xaf, 0xe8, 0xbc, 0x4b, 0xbf, 0x65, 0x17, 0x57, 0x46, 0x53, 0x06,
	0xc3, 0xc7, 0xf1, 0xad, 0xed, 0x5c, 0x07, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xb0, 0xae, 0x10, 0x6c,
	0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterAsset defines the operation for registering an asset.
	RegisterAsset(ctx context.Context, in *MsgRegisterAsset, opts ...grpc.CallOption) (*MsgRegisterAssetResponse, error)
	// DeregisterAsset defines the operation for de-registering an asset with
	// its denomination.
	DeregisterAsset(ctx context.Context, in *MsgDeregisterAsset, opts ...grpc.CallOption) (*MsgDeregisterAssetResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterAsset(ctx context.Context, in *MsgRegisterAsset, opts ...grpc.CallOption) (*MsgRegisterAssetResponse, error) {
	out := new(MsgRegisterAssetResponse)
	err := c.cc.Invoke(ctx, "/milkyway.assets.v1.Msg/RegisterAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeregisterAsset(ctx context.Context, in *MsgDeregisterAsset, opts ...grpc.CallOption) (*MsgDeregisterAssetResponse, error) {
	out := new(MsgDeregisterAssetResponse)
	err := c.cc.Invoke(ctx, "/milkyway.assets.v1.Msg/DeregisterAsset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterAsset defines the operation for registering an asset.
	RegisterAsset(context.Context, *MsgRegisterAsset) (*MsgRegisterAssetResponse, error)
	// DeregisterAsset defines the operation for de-registering an asset with
	// its denomination.
	DeregisterAsset(context.Context, *MsgDeregisterAsset) (*MsgDeregisterAssetResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterAsset(ctx context.Context, req *MsgRegisterAsset) (*MsgRegisterAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAsset not implemented")
}
func (*UnimplementedMsgServer) DeregisterAsset(ctx context.Context, req *MsgDeregisterAsset) (*MsgDeregisterAssetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterAsset not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.assets.v1.Msg/RegisterAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAsset(ctx, req.(*MsgRegisterAsset))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeregisterAsset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeregisterAsset)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeregisterAsset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.assets.v1.Msg/DeregisterAsset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeregisterAsset(ctx, req.(*MsgDeregisterAsset))
	}
	return interceptor(ctx, in, info, handler)
}

var Msg_serviceDesc = _Msg_serviceDesc
var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milkyway.assets.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAsset",
			Handler:    _Msg_RegisterAsset_Handler,
		},
		{
			MethodName: "DeregisterAsset",
			Handler:    _Msg_DeregisterAsset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milkyway/assets/v1/messages.proto",
}

func (m *MsgRegisterAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Asset.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeregisterAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeregisterAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeregisterAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeregisterAssetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeregisterAssetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeregisterAssetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = m.Asset.Size()
	n += 1 + l + sovMessages(uint64(l))
	return n
}

func (m *MsgRegisterAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeregisterAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgDeregisterAssetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Asset.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeregisterAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeregisterAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeregisterAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeregisterAssetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeregisterAssetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeregisterAssetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
