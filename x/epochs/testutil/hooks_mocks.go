// Code generated by MockGen. DO NOT EDIT.
// Source: ./x/epochs/types/hooks.go
//
// Generated by this command:
//
//	mockgen -source ./x/epochs/types/hooks.go -package testutil -destination ./x/epochs/testutil/hooks_mocks.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	gomock "go.uber.org/mock/gomock"

	types0 "github.com/milkyway-labs/milkyway/x/epochs/types"
)

// MockEpochHooks is a mock of EpochHooks interface.
type MockEpochHooks struct {
	ctrl     *gomock.Controller
	recorder *MockEpochHooksMockRecorder
}

// MockEpochHooksMockRecorder is the mock recorder for MockEpochHooks.
type MockEpochHooksMockRecorder struct {
	mock *MockEpochHooks
}

// NewMockEpochHooks creates a new mock instance.
func NewMockEpochHooks(ctrl *gomock.Controller) *MockEpochHooks {
	mock := &MockEpochHooks{ctrl: ctrl}
	mock.recorder = &MockEpochHooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEpochHooks) EXPECT() *MockEpochHooksMockRecorder {
	return m.recorder
}

// AfterEpochEnd mocks base method.
func (m *MockEpochHooks) AfterEpochEnd(ctx types.Context, epochInfo types0.EpochInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterEpochEnd", ctx, epochInfo)
}

// AfterEpochEnd indicates an expected call of AfterEpochEnd.
func (mr *MockEpochHooksMockRecorder) AfterEpochEnd(ctx, epochInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterEpochEnd", reflect.TypeOf((*MockEpochHooks)(nil).AfterEpochEnd), ctx, epochInfo)
}

// BeforeEpochStart mocks base method.
func (m *MockEpochHooks) BeforeEpochStart(ctx types.Context, epochInfo types0.EpochInfo) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeEpochStart", ctx, epochInfo)
}

// BeforeEpochStart indicates an expected call of BeforeEpochStart.
func (mr *MockEpochHooksMockRecorder) BeforeEpochStart(ctx, epochInfo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeEpochStart", reflect.TypeOf((*MockEpochHooks)(nil).BeforeEpochStart), ctx, epochInfo)
}
