// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/investors/v1/genesis.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the investors module's genesis state.
type GenesisState struct {
	// InvestorsRewardRatio defines the proportion of staking rewards allocated to
	// vesting investors relative to normal users. For example, if the ratio is 0.3,
	// then the investors would receive 30% of the staking rewards. The rest of the
	// rewards would be sent to the community pool.
	InvestorsRewardRatio cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=investors_reward_ratio,json=investorsRewardRatio,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"investors_reward_ratio"`
	// VestingInvestorsAddresses defines the list of investor addresses that are
	// still in their vesting period and will receive rewards based on the
	// InvestorsRewardRatio.
	VestingInvestorsAddresses []string `protobuf:"bytes,2,rep,name=vesting_investors_addresses,json=vestingInvestorsAddresses,proto3" json:"vesting_investors_addresses,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2770e11abe3b85e, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetVestingInvestorsAddresses() []string {
	if m != nil {
		return m.VestingInvestorsAddresses
	}
	return nil
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "milkyway.investors.v1.GenesisState")
}

func init() {
	proto.RegisterFile("milkyway/investors/v1/genesis.proto", fileDescriptor_a2770e11abe3b85e)
}

var fileDescriptor_a2770e11abe3b85e = []byte{
	// 329 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x91, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x1b, 0x05, 0x61, 0xc5, 0x8b, 0x63, 0xca, 0xfe, 0x60, 0x37, 0xf4, 0x32, 0x84, 0x25,
	0x4c, 0x41, 0xcf, 0x1b, 0x03, 0x11, 0xbc, 0xb8, 0xdd, 0x04, 0x29, 0x59, 0x1b, 0xb2, 0xb0, 0xb5,
	0x19, 0x79, 0x63, 0x67, 0xbf, 0x85, 0x1f, 0xc3, 0xa3, 0x87, 0x7d, 0x88, 0x1d, 0xc7, 0x4e, 0xa2,
	0x30, 0x64, 0x3b, 0xf8, 0x35, 0x64, 0x4d, 0x5b, 0xbd, 0x84, 0x3c, 0xcf, 0xfb, 0xe4, 0xf7, 0xc0,
	0x1b, 0xfb, 0x3c, 0x10, 0x93, 0x71, 0x3c, 0xa3, 0x31, 0x11, 0x61, 0xc4, 0x40, 0x4b, 0x05, 0x24,
	0x6a, 0x13, 0xce, 0x42, 0x06, 0x02, 0xf0, 0x54, 0x49, 0x2d, 0x8b, 0xc7, 0x59, 0x08, 0xe7, 0x21,
	0x1c, 0xb5, 0xab, 0x47, 0x34, 0x10, 0xa1, 0x24, 0xc9, 0x69, 0x92, 0xd5, 0x8a, 0x27, 0x21, 0x90,
	0xe0, 0x26, 0x8a, 0x18, 0x91, 0x8e, 0x4a, 0x5c, 0x72, 0x69, 0xfc, 0xdd, 0xcd, 0xb8, 0x67, 0x5f,
	0xc8, 0x3e, 0xbc, 0x35, 0x65, 0x03, 0x4d, 0x35, 0x2b, 0x4e, 0xec, 0x93, 0xbc, 0xc4, 0x55, 0x6c,
	0x46, 0x95, 0xef, 0x2a, 0xaa, 0x85, 0x2c, 0xa3, 0x06, 0x6a, 0x16, 0xba, 0xd7, 0x8b, 0x75, 0xdd,
	0xfa, 0x5c, 0xd7, 0x6b, 0x06, 0x0e, 0xfe, 0x18, 0x0b, 0x49, 0x02, 0xaa, 0x47, 0xf8, 0x9e, 0x71,
	0xea, 0xc5, 0x3d, 0xe6, 0xad, 0xe6, 0x2d, 0x3b, 0xed, 0xee, 0x31, 0xef, 0xed, 0xe7, 0xfd, 0x02,
	0xf5, 0x4b, 0x39, 0xb5, 0x9f, 0x40, 0xfb, 0x3b, 0x66, 0xf1, 0xc9, 0xae, 0xed, 0x5c, 0x11, 0x72,
	0xf7, 0xaf, 0x95, 0xfa, 0xbe, 0x62, 0x00, 0x0c, 0xca, 0x7b, 0x8d, 0xfd, 0x66, 0xa1, 0x7b, 0xba,
	0x9a, 0xb7, 0x4a, 0x29, 0xaf, 0x63, 0x66, 0x03, 0xad, 0x44, 0xc8, 0x0d, 0xb9, 0x92, 0x12, 0xee,
	0x32, 0x40, 0x27, 0x7b, 0xdf, 0x7d, 0x58, 0x6c, 0x1c, 0xb4, 0xdc, 0x38, 0xe8, 0x7b, 0xe3, 0xa0,
	0xd7, 0xad, 0x63, 0x2d, 0xb7, 0x8e, 0xf5, 0xb1, 0x75, 0xac, 0xc7, 0x1b, 0x2e, 0xf4, 0xe8, 0x79,
	0x88, 0x3d, 0x19, 0x90, 0x6c, 0xbb, 0xad, 0x09, 0x1d, 0x42, 0xae, 0x48, 0xd4, 0xbe, 0x24, 0x2f,
	0xff, 0xbe, 0x45, 0xc7, 0x53, 0x06, 0xc3, 0x83, 0x64, 0x6f, 0x57, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x38, 0x55, 0x4d, 0x50, 0xb9, 0x01, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.VestingInvestorsAddresses) > 0 {
		for iNdEx := len(m.VestingInvestorsAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.VestingInvestorsAddresses[iNdEx])
			copy(dAtA[i:], m.VestingInvestorsAddresses[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.VestingInvestorsAddresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size := m.InvestorsRewardRatio.Size()
		i -= size
		if _, err := m.InvestorsRewardRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InvestorsRewardRatio.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.VestingInvestorsAddresses) > 0 {
		for _, s := range m.VestingInvestorsAddresses {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InvestorsRewardRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InvestorsRewardRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VestingInvestorsAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VestingInvestorsAddresses = append(m.VestingInvestorsAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
