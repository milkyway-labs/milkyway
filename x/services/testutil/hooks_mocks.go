// Code generated by MockGen. DO NOT EDIT.
// Source: ./x/services/types/hooks.go
//
// Generated by this command:
//
//	mockgen -source ./x/services/types/hooks.go -package testutil -destination ./x/services/testutil/hooks_mocks.go
//

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	types "github.com/cosmos/cosmos-sdk/types"
	gomock "go.uber.org/mock/gomock"
)

// MockServicesHooks is a mock of ServicesHooks interface.
type MockServicesHooks struct {
	ctrl     *gomock.Controller
	recorder *MockServicesHooksMockRecorder
}

// MockServicesHooksMockRecorder is the mock recorder for MockServicesHooks.
type MockServicesHooksMockRecorder struct {
	mock *MockServicesHooks
}

// NewMockServicesHooks creates a new mock instance.
func NewMockServicesHooks(ctrl *gomock.Controller) *MockServicesHooks {
	mock := &MockServicesHooks{ctrl: ctrl}
	mock.recorder = &MockServicesHooksMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicesHooks) EXPECT() *MockServicesHooksMockRecorder {
	return m.recorder
}

// AfterServiceActivated mocks base method.
func (m *MockServicesHooks) AfterServiceActivated(ctx types.Context, serviceID uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterServiceActivated", ctx, serviceID)
}

// AfterServiceActivated indicates an expected call of AfterServiceActivated.
func (mr *MockServicesHooksMockRecorder) AfterServiceActivated(ctx, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterServiceActivated", reflect.TypeOf((*MockServicesHooks)(nil).AfterServiceActivated), ctx, serviceID)
}

// AfterServiceCreated mocks base method.
func (m *MockServicesHooks) AfterServiceCreated(ctx types.Context, serviceID uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterServiceCreated", ctx, serviceID)
}

// AfterServiceCreated indicates an expected call of AfterServiceCreated.
func (mr *MockServicesHooksMockRecorder) AfterServiceCreated(ctx, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterServiceCreated", reflect.TypeOf((*MockServicesHooks)(nil).AfterServiceCreated), ctx, serviceID)
}

// AfterServiceDeactivated mocks base method.
func (m *MockServicesHooks) AfterServiceDeactivated(ctx types.Context, serviceID uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AfterServiceDeactivated", ctx, serviceID)
}

// AfterServiceDeactivated indicates an expected call of AfterServiceDeactivated.
func (mr *MockServicesHooksMockRecorder) AfterServiceDeactivated(ctx, serviceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AfterServiceDeactivated", reflect.TypeOf((*MockServicesHooks)(nil).AfterServiceDeactivated), ctx, serviceID)
}
