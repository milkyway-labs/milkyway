// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/operators/v1/models.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OperatorStatus defines the possible statuses of an operator
type OperatorStatus int32

const (
	// OPERATOR_STATUS_UNSPECIFIED defines an unspecified status
	OPERATOR_STATUS_UNSPECIFIED OperatorStatus = 0
	// OPERATOR_STATUS_ACTIVE identifies an active operator which is providing
	// services
	OPERATOR_STATUS_ACTIVE OperatorStatus = 1
	// OPERATOR_STATUS_INACTIVATING identifies an operator that is in the process
	// of becoming inactive
	OPERATOR_STATUS_INACTIVATING OperatorStatus = 2
	// OPERATOR_STATUS_INACTIVE defines an inactive operator that is not providing
	// services
	OPERATOR_STATUS_INACTIVE OperatorStatus = 3
)

var OperatorStatus_name = map[int32]string{
	0: "OPERATOR_STATUS_UNSPECIFIED",
	1: "OPERATOR_STATUS_ACTIVE",
	2: "OPERATOR_STATUS_INACTIVATING",
	3: "OPERATOR_STATUS_INACTIVE",
}

var OperatorStatus_value = map[string]int32{
	"OPERATOR_STATUS_UNSPECIFIED":  0,
	"OPERATOR_STATUS_ACTIVE":       1,
	"OPERATOR_STATUS_INACTIVATING": 2,
	"OPERATOR_STATUS_INACTIVE":     3,
}

func (x OperatorStatus) String() string {
	return proto.EnumName(OperatorStatus_name, int32(x))
}

func (OperatorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8fb40b1089c56c16, []int{0}
}

// Operator defines the fields of an operator
type Operator struct {
	// ID is the auto-generated unique identifier for the operator
	ID uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Status is the status of the operator
	Status OperatorStatus `protobuf:"varint,2,opt,name=status,proto3,enum=milkyway.operators.v1.OperatorStatus" json:"status,omitempty"`
	// Admin is the address of the user that can manage the operator
	Admin string `protobuf:"bytes,3,opt,name=admin,proto3" json:"admin,omitempty"`
	// Moniker is the identifier of the operator
	Moniker string `protobuf:"bytes,4,opt,name=moniker,proto3" json:"moniker,omitempty"`
	// Website is the website of the operator
	Website string `protobuf:"bytes,5,opt,name=website,proto3" json:"website,omitempty"`
	// PictureURL is the URL of the picture of the operator
	PictureURL string `protobuf:"bytes,6,opt,name=picture_url,json=pictureUrl,proto3" json:"picture_url,omitempty"`
	// Address is the address of the account associated to the operator.
	// This will be used to store tokens that are delegated to this operator.
	Address string `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	// Tokens define the delegated tokens.
	Tokens github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,8,rep,name=tokens,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"tokens"`
	// DelegatorShares define the total shares issued to an operator's delegators.
	DelegatorShares github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,9,rep,name=delegator_shares,json=delegatorShares,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"delegator_shares"`
}

func (m *Operator) Reset()         { *m = Operator{} }
func (m *Operator) String() string { return proto.CompactTextString(m) }
func (*Operator) ProtoMessage()    {}
func (*Operator) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fb40b1089c56c16, []int{0}
}
func (m *Operator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Operator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Operator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Operator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Operator.Merge(m, src)
}
func (m *Operator) XXX_Size() int {
	return m.Size()
}
func (m *Operator) XXX_DiscardUnknown() {
	xxx_messageInfo_Operator.DiscardUnknown(m)
}

var xxx_messageInfo_Operator proto.InternalMessageInfo

// OperatorParams represent the params that have been set for an individual
// operator.
type OperatorParams struct {
	// CommissionRate defines the commission rate charged to delegators, as a
	// fraction.
	CommissionRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=commission_rate,json=commissionRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"commission_rate"`
}

func (m *OperatorParams) Reset()         { *m = OperatorParams{} }
func (m *OperatorParams) String() string { return proto.CompactTextString(m) }
func (*OperatorParams) ProtoMessage()    {}
func (*OperatorParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8fb40b1089c56c16, []int{1}
}
func (m *OperatorParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorParams.Merge(m, src)
}
func (m *OperatorParams) XXX_Size() int {
	return m.Size()
}
func (m *OperatorParams) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorParams.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorParams proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("milkyway.operators.v1.OperatorStatus", OperatorStatus_name, OperatorStatus_value)
	proto.RegisterType((*Operator)(nil), "milkyway.operators.v1.Operator")
	proto.RegisterType((*OperatorParams)(nil), "milkyway.operators.v1.OperatorParams")
}

func init() {
	proto.RegisterFile("milkyway/operators/v1/models.proto", fileDescriptor_8fb40b1089c56c16)
}

var fileDescriptor_8fb40b1089c56c16 = []byte{
	// 616 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x6b, 0x13, 0x4f,
	0x18, 0xc6, 0x77, 0xd3, 0x36, 0x6d, 0xa7, 0xfc, 0xd3, 0x30, 0xf4, 0x5f, 0xb6, 0x69, 0xd9, 0x84,
	0x8a, 0x10, 0x94, 0xce, 0x98, 0xf6, 0xe0, 0xc9, 0x43, 0xd2, 0x44, 0x09, 0x94, 0x36, 0x4c, 0x12,
	0x0f, 0x1e, 0x0c, 0x93, 0xdd, 0x21, 0x1d, 0x92, 0xdd, 0x09, 0x33, 0x93, 0xd4, 0x80, 0x1f, 0xc0,
	0x8b, 0x20, 0xf8, 0x11, 0xbc, 0x79, 0xf6, 0x43, 0xf4, 0x58, 0x3c, 0x89, 0x87, 0xa8, 0xe9, 0x17,
	0x91, 0xec, 0xce, 0xa6, 0xa5, 0x54, 0xf4, 0xb4, 0xfb, 0xce, 0xf3, 0x3c, 0xf3, 0x1b, 0xe6, 0x7d,
	0x07, 0xec, 0x07, 0x7c, 0xd0, 0x9f, 0x5c, 0xd0, 0x09, 0x16, 0x43, 0x26, 0xa9, 0x16, 0x52, 0xe1,
	0x71, 0x09, 0x07, 0xc2, 0x67, 0x03, 0x85, 0x86, 0x52, 0x68, 0x01, 0xff, 0x4f, 0x3c, 0x68, 0xe1,
	0x41, 0xe3, 0x52, 0xce, 0xf5, 0x84, 0x0a, 0x84, 0xc2, 0x5d, 0xaa, 0x18, 0x1e, 0x97, 0xba, 0x4c,
	0xd3, 0x12, 0xf6, 0x04, 0x0f, 0xe3, 0x58, 0x6e, 0x27, 0xd6, 0x3b, 0x51, 0x85, 0xe3, 0xc2, 0x48,
	0x5b, 0x3d, 0xd1, 0x13, 0xf1, 0xfa, 0xfc, 0x2f, 0x5e, 0xdd, 0x7f, 0xbf, 0x0c, 0xd6, 0xce, 0x0c,
	0x01, 0x6e, 0x83, 0x14, 0xf7, 0x1d, 0xbb, 0x60, 0x17, 0xff, 0xab, 0xa4, 0x67, 0xd3, 0x7c, 0xaa,
	0x5e, 0x25, 0x29, 0xee, 0xc3, 0x67, 0x20, 0xad, 0x34, 0xd5, 0x23, 0xe5, 0xa4, 0x0a, 0x76, 0x31,
	0x73, 0xf8, 0x10, 0xdd, 0x7b, 0x3a, 0x94, 0x6c, 0xd4, 0x8c, 0xcc, 0xc4, 0x84, 0x20, 0x02, 0x2b,
	0xd4, 0x0f, 0x78, 0xe8, 0x2c, 0x15, 0xec, 0xe2, 0x7a, 0xc5, 0xf9, 0xfa, 0xe5, 0x60, 0xcb, 0x1c,
	0xad, 0xec, 0xfb, 0x92, 0x29, 0xd5, 0xd4, 0x92, 0x87, 0x3d, 0x12, 0xdb, 0xa0, 0x03, 0x56, 0x03,
	0x11, 0xf2, 0x3e, 0x93, 0xce, 0xf2, 0x3c, 0x41, 0x92, 0x72, 0xae, 0x5c, 0xb0, 0xae, 0xe2, 0x9a,
	0x39, 0x2b, 0xb1, 0x62, 0x4a, 0x88, 0xc1, 0xc6, 0x90, 0x7b, 0x7a, 0x24, 0x59, 0x67, 0x24, 0x07,
	0x4e, 0x3a, 0x22, 0x65, 0x66, 0xd3, 0x3c, 0x68, 0xc4, 0xcb, 0x6d, 0x72, 0x42, 0x80, 0xb1, 0xb4,
	0xe5, 0x00, 0x1e, 0x82, 0x55, 0x1a, 0xc3, 0x9d, 0xd5, 0xbf, 0x1c, 0x2b, 0x31, 0x42, 0x0f, 0xa4,
	0xb5, 0xe8, 0xb3, 0x50, 0x39, 0x6b, 0x85, 0xa5, 0xe2, 0xc6, 0xe1, 0x0e, 0x32, 0xfe, 0x79, 0x3b,
	0x90, 0x69, 0x07, 0x3a, 0x16, 0x3c, 0xac, 0x3c, 0xb9, 0x9c, 0xe6, 0xad, 0xcf, 0x3f, 0xf2, 0xc5,
	0x1e, 0xd7, 0xe7, 0xa3, 0x2e, 0xf2, 0x44, 0x60, 0xda, 0x61, 0x3e, 0x07, 0xca, 0xef, 0x63, 0x3d,
	0x19, 0x32, 0x15, 0x05, 0x14, 0x31, 0x5b, 0xc3, 0xb7, 0x20, 0xeb, 0xb3, 0x01, 0xeb, 0xcd, 0x2f,
	0xb2, 0xa3, 0xce, 0xa9, 0x64, 0xca, 0x59, 0x8f, 0x70, 0x7b, 0xf7, 0xe2, 0xaa, 0xcc, 0x8b, 0x88,
	0x47, 0x86, 0xf8, 0xf8, 0x1f, 0x88, 0x26, 0xa3, 0xc8, 0xe6, 0x02, 0xd5, 0x8c, 0x48, 0xfb, 0xaf,
	0x41, 0x26, 0xe9, 0x62, 0x83, 0x4a, 0x1a, 0x28, 0x78, 0x02, 0x36, 0x3d, 0x11, 0x04, 0x5c, 0x29,
	0x2e, 0xc2, 0x8e, 0xa4, 0x9a, 0x45, 0x13, 0xb2, 0x5e, 0x79, 0x30, 0x07, 0x7e, 0x9f, 0xe6, 0x77,
	0xe3, 0xed, 0x95, 0xdf, 0x47, 0x5c, 0xe0, 0x80, 0xea, 0x73, 0x74, 0xc2, 0x7a, 0xd4, 0x9b, 0x54,
	0x99, 0x47, 0x32, 0x37, 0x59, 0x42, 0x35, 0x7b, 0xf4, 0xd1, 0xbe, 0x01, 0xc4, 0x63, 0x02, 0xf3,
	0x60, 0xf7, 0xac, 0x51, 0x23, 0xe5, 0xd6, 0x19, 0xe9, 0x34, 0x5b, 0xe5, 0x56, 0xbb, 0xd9, 0x69,
	0x9f, 0x36, 0x1b, 0xb5, 0xe3, 0xfa, 0xf3, 0x7a, 0xad, 0x9a, 0xb5, 0x60, 0x0e, 0x6c, 0xdf, 0x35,
	0x94, 0x8f, 0x5b, 0xf5, 0x97, 0xb5, 0xac, 0x0d, 0x0b, 0x60, 0xef, 0xae, 0x56, 0x3f, 0x8d, 0xd4,
	0x72, 0xab, 0x7e, 0xfa, 0x22, 0x9b, 0x82, 0x7b, 0xc0, 0xf9, 0x83, 0xa3, 0x96, 0x5d, 0xca, 0x2d,
	0xbf, 0xfb, 0xe4, 0x5a, 0x95, 0xf6, 0xe5, 0x2f, 0xd7, 0xba, 0x9c, 0xb9, 0xf6, 0xd5, 0xcc, 0xb5,
	0x7f, 0xce, 0x5c, 0xfb, 0xc3, 0xb5, 0x6b, 0x5d, 0x5d, 0xbb, 0xd6, 0xb7, 0x6b, 0xd7, 0x7a, 0xf5,
	0xf4, 0xd6, 0x8d, 0x26, 0x83, 0x7f, 0x30, 0xa0, 0x5d, 0xb5, 0xa8, 0xf0, 0xb8, 0x54, 0xc2, 0x6f,
	0x6e, 0x3d, 0xe7, 0xe8, 0x9a, 0xbb, 0xe9, 0xe8, 0x8d, 0x1d, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x23, 0x72, 0x2a, 0x65, 0xf1, 0x03, 0x00, 0x00,
}

func (m *Operator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Operator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Operator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorShares) > 0 {
		for iNdEx := len(m.DelegatorShares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegatorShares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.Tokens) > 0 {
		for iNdEx := len(m.Tokens) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tokens[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PictureURL) > 0 {
		i -= len(m.PictureURL)
		copy(dAtA[i:], m.PictureURL)
		i = encodeVarintModels(dAtA, i, uint64(len(m.PictureURL)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperatorParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CommissionRate.Size()
		i -= size
		if _, err := m.CommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Operator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModels(uint64(m.ID))
	}
	if m.Status != 0 {
		n += 1 + sovModels(uint64(m.Status))
	}
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.PictureURL)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Tokens) > 0 {
		for _, e := range m.Tokens {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if len(m.DelegatorShares) > 0 {
		for _, e := range m.DelegatorShares {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *OperatorParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommissionRate.Size()
	n += 1 + l + sovModels(uint64(l))
	return n
}

func sovModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Operator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Operator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Operator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= OperatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PictureURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PictureURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tokens", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tokens = append(m.Tokens, types.Coin{})
			if err := m.Tokens[len(m.Tokens)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorShares = append(m.DelegatorShares, types.DecCoin{})
			if err := m.DelegatorShares[len(m.DelegatorShares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModels = fmt.Errorf("proto: unexpected end of group")
)
