// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/operators/v1/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the operators module.
type Params struct {
	// OperatorRegistrationFee represents the fee that an operator must pay in
	// order to register itself with the network.
	// The fee is drawn from the MsgRegisterOperator sender's account and
	// transferred to the community pool.
	OperatorRegistrationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=operator_registration_fee,json=operatorRegistrationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"operator_registration_fee" yaml:"operator_registration_fee"`
	// DeactivationTime represents the amount of time that will pass between
	// the time that an operator signals its willingness to deactivate and the
	// time that it actually becomes inactive.
	DeactivationTime time.Duration `protobuf:"varint,2,opt,name=deactivation_time,json=deactivationTime,proto3,stdduration" json:"deactivation_time,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_c14ac199294977d8, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetOperatorRegistrationFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.OperatorRegistrationFee
	}
	return nil
}

func (m *Params) GetDeactivationTime() time.Duration {
	if m != nil {
		return m.DeactivationTime
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "milkyway.operators.v1.Params")
}

func init() {
	proto.RegisterFile("milkyway/operators/v1/params.proto", fileDescriptor_c14ac199294977d8)
}

var fileDescriptor_c14ac199294977d8 = []byte{
	// 313 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0xd1, 0xb1, 0x4e, 0xc2, 0x40,
	0x18, 0x07, 0xf0, 0x9e, 0x18, 0x86, 0xba, 0x28, 0xd1, 0x08, 0x0c, 0x57, 0xd2, 0x89, 0x85, 0xbb,
	0x54, 0x36, 0x47, 0x4c, 0xdc, 0x4c, 0x0c, 0x61, 0x72, 0x21, 0xd7, 0xf2, 0x59, 0x2f, 0x70, 0x7c,
	0xcd, 0xdd, 0x59, 0xed, 0x5b, 0x38, 0xfa, 0x0c, 0xfa, 0x22, 0x8c, 0x8c, 0x4e, 0x60, 0x60, 0x72,
	0xf5, 0x09, 0x0c, 0x2d, 0x25, 0x5d, 0x9c, 0xee, 0x2e, 0xdf, 0x3f, 0xbf, 0xfc, 0xf3, 0x9d, 0xeb,
	0x2b, 0x39, 0x9b, 0x66, 0x2f, 0x22, 0xe3, 0x98, 0x80, 0x16, 0x16, 0xb5, 0xe1, 0x69, 0xc0, 0x13,
	0xa1, 0x85, 0x32, 0x2c, 0xd1, 0x68, 0xb1, 0x71, 0x51, 0x66, 0xd8, 0x21, 0xc3, 0xd2, 0xa0, 0x7d,
	0x1e, 0x63, 0x8c, 0x79, 0x82, 0xef, 0x6e, 0x45, 0xb8, 0x4d, 0x23, 0x34, 0x0a, 0x0d, 0x0f, 0x85,
	0x01, 0x9e, 0x06, 0x21, 0x58, 0x11, 0xf0, 0x08, 0xe5, 0xbc, 0x98, 0xfb, 0x3f, 0xc4, 0xad, 0xdf,
	0xe7, 0x7a, 0xe3, 0x93, 0xb8, 0xad, 0x52, 0x1c, 0x6b, 0x88, 0xa5, 0xb1, 0x5a, 0x58, 0x89, 0xf3,
	0xf1, 0x23, 0x40, 0x93, 0x74, 0x6a, 0xdd, 0x93, 0xab, 0x16, 0x2b, 0x3c, 0xb6, 0xf3, 0xd8, 0xde,
	0x63, 0x37, 0x28, 0xe7, 0x83, 0xd1, 0x62, 0xe5, 0x39, 0xbf, 0x2b, 0xaf, 0x93, 0x09, 0x35, 0xbb,
	0xf6, 0xff, 0x95, 0xfc, 0x8f, 0xb5, 0xd7, 0x8d, 0xa5, 0x7d, 0x7a, 0x0e, 0x59, 0x84, 0x8a, 0xef,
	0x0b, 0x16, 0x47, 0xcf, 0x4c, 0xa6, 0xdc, 0x66, 0x09, 0x98, 0x1c, 0x35, 0xc3, 0xcb, 0xd2, 0x19,
	0x56, 0x98, 0x5b, 0x80, 0x46, 0xe0, 0x9e, 0x4d, 0x40, 0x44, 0x56, 0xa6, 0x85, 0x6c, 0xa5, 0x82,
	0xe6, 0x51, 0x87, 0x74, 0x6b, 0x83, 0xe3, 0xf7, 0xb5, 0x47, 0x86, 0xa7, 0xd5, 0xf1, 0x48, 0x2a,
	0x18, 0xdc, 0x2d, 0x36, 0x94, 0x2c, 0x37, 0x94, 0x7c, 0x6f, 0x28, 0x79, 0xdb, 0x52, 0x67, 0xb9,
	0xa5, 0xce, 0xd7, 0x96, 0x3a, 0x0f, 0xfd, 0x4a, 0x9f, 0x72, 0xbb, 0xbd, 0x99, 0x08, 0xcd, 0xe1,
	0xc5, 0x5f, 0x2b, 0x3f, 0x92, 0x17, 0x0c, 0xeb, 0xf9, 0x06, 0xfb, 0x7f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0xc0, 0xb2, 0xb1, 0x52, 0xb4, 0x01, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeactivationTime != 0 {
		i = encodeVarintParams(dAtA, i, uint64(m.DeactivationTime))
		i--
		dAtA[i] = 0x10
	}
	if len(m.OperatorRegistrationFee) > 0 {
		for iNdEx := len(m.OperatorRegistrationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorRegistrationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OperatorRegistrationFee) > 0 {
		for _, e := range m.OperatorRegistrationFee {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if m.DeactivationTime != 0 {
		n += 1 + sovParams(uint64(m.DeactivationTime))
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorRegistrationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorRegistrationFee = append(m.OperatorRegistrationFee, types.Coin{})
			if err := m.OperatorRegistrationFee[len(m.OperatorRegistrationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeactivationTime", wireType)
			}
			m.DeactivationTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeactivationTime |= time.Duration(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
