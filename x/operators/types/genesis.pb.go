// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/operators/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the operators module's genesis state.
type GenesisState struct {
	// Params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// NextOperatorID defines the ID that will be assigned to the
	// next operator that gets created.
	NextOperatorID uint32 `protobuf:"varint,2,opt,name=next_operator_id,json=nextOperatorId,proto3" json:"next_operator_id,omitempty"`
	// Operators defines the list of operators.
	Operators []Operator `protobuf:"bytes,3,rep,name=operators,proto3" json:"operators" yaml:"operators"`
	// UnbondingOperators defines the list of operators that are currently being
	// unbonded.
	UnbondingOperators []UnbondingOperator `protobuf:"bytes,4,rep,name=unbonding_operators,json=unbondingOperators,proto3" json:"unbonding_operators" yaml:"unbonding_operators"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_2071f056fdcb6ee8, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetNextOperatorID() uint32 {
	if m != nil {
		return m.NextOperatorID
	}
	return 0
}

func (m *GenesisState) GetOperators() []Operator {
	if m != nil {
		return m.Operators
	}
	return nil
}

func (m *GenesisState) GetUnbondingOperators() []UnbondingOperator {
	if m != nil {
		return m.UnbondingOperators
	}
	return nil
}

// UnbondingOperator contains the data about an operator that is currently being
// unbonded.
type UnbondingOperator struct {
	// OperatorID is the ID of the operator that is being unbonded.
	OperatorID uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// UnbondingCompletionTime is the time at which the unbonding of the operator
	// will be completed
	UnbondCompletionTime time.Time `protobuf:"bytes,2,opt,name=unbond_completion_time,json=unbondCompletionTime,proto3,stdtime" json:"unbond_completion_time"`
}

func (m *UnbondingOperator) Reset()         { *m = UnbondingOperator{} }
func (m *UnbondingOperator) String() string { return proto.CompactTextString(m) }
func (*UnbondingOperator) ProtoMessage()    {}
func (*UnbondingOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_2071f056fdcb6ee8, []int{1}
}
func (m *UnbondingOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingOperator.Merge(m, src)
}
func (m *UnbondingOperator) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingOperator.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingOperator proto.InternalMessageInfo

func (m *UnbondingOperator) GetOperatorID() uint32 {
	if m != nil {
		return m.OperatorID
	}
	return 0
}

func (m *UnbondingOperator) GetUnbondCompletionTime() time.Time {
	if m != nil {
		return m.UnbondCompletionTime
	}
	return time.Time{}
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "milkyway.operators.v1.GenesisState")
	proto.RegisterType((*UnbondingOperator)(nil), "milkyway.operators.v1.UnbondingOperator")
}

func init() {
	proto.RegisterFile("milkyway/operators/v1/genesis.proto", fileDescriptor_2071f056fdcb6ee8)
}

var fileDescriptor_2071f056fdcb6ee8 = []byte{
	// 432 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xcd, 0x6e, 0x95, 0x40,
	0x18, 0x86, 0xcf, 0xb4, 0x4d, 0xa3, 0x83, 0x9e, 0xd4, 0xb1, 0x1a, 0x42, 0x22, 0x9c, 0xe0, 0x86,
	0x8d, 0x33, 0xe9, 0xe9, 0x4e, 0x5d, 0xa1, 0x89, 0x71, 0xe1, 0x4f, 0x50, 0x63, 0xd2, 0x0d, 0x19,
	0xca, 0x88, 0x44, 0x86, 0x21, 0xcc, 0x50, 0x0f, 0x0b, 0xef, 0xa1, 0x97, 0xe0, 0xe5, 0x74, 0xd9,
	0xa5, 0x2b, 0x54, 0xce, 0x1d, 0x78, 0x05, 0x86, 0xdf, 0x43, 0xf4, 0xb4, 0x3b, 0x26, 0x3c, 0xdf,
	0xfb, 0x7c, 0x79, 0xf3, 0xc1, 0x87, 0x3c, 0x4e, 0xbe, 0x94, 0x5f, 0x69, 0x49, 0x44, 0xc6, 0x72,
	0xaa, 0x44, 0x2e, 0xc9, 0xd9, 0x11, 0x89, 0x58, 0xca, 0x64, 0x2c, 0x71, 0x96, 0x0b, 0x25, 0xd0,
	0xbd, 0x01, 0xc2, 0x23, 0x84, 0xcf, 0x8e, 0x8c, 0xc3, 0x48, 0x44, 0xa2, 0x25, 0x48, 0xf3, 0xd5,
	0xc1, 0x86, 0x15, 0x09, 0x11, 0x25, 0x8c, 0xb4, 0xaf, 0xa0, 0xf8, 0x44, 0x54, 0xcc, 0x99, 0x54,
	0x94, 0x67, 0x3d, 0x60, 0x6f, 0x57, 0x72, 0x11, 0xb2, 0x44, 0x5e, 0xcf, 0x64, 0x34, 0xa7, 0xbc,
	0x67, 0xec, 0xdf, 0x3b, 0xf0, 0xd6, 0x8b, 0x6e, 0xcf, 0x77, 0x8a, 0x2a, 0x86, 0x9e, 0xc0, 0xfd,
	0x0e, 0xd0, 0xc1, 0x02, 0x38, 0xda, 0xf2, 0x01, 0xde, 0xba, 0x37, 0x7e, 0xdb, 0x42, 0xee, 0xde,
	0x45, 0x65, 0xcd, 0xbc, 0x7e, 0x04, 0x3d, 0x85, 0x07, 0x29, 0x5b, 0x29, 0x7f, 0x20, 0xfd, 0x38,
	0xd4, 0x77, 0x16, 0xc0, 0xb9, 0xed, 0xa2, 0xba, 0xb2, 0xe6, 0xaf, 0xd9, 0x4a, 0xbd, 0xe9, 0x7f,
	0xbd, 0x7c, 0xee, 0xcd, 0xd3, 0xe9, 0x3b, 0x44, 0x1f, 0xe1, 0xcd, 0x51, 0xa1, 0xef, 0x2e, 0x76,
	0x1d, 0x6d, 0x69, 0x5d, 0x61, 0x1f, 0xa6, 0x5c, 0xbd, 0xf1, 0xff, 0xa9, 0xac, 0x83, 0x92, 0xf2,
	0xe4, 0xb1, 0x3d, 0x42, 0xb6, 0xb7, 0xc9, 0x42, 0xdf, 0xe0, 0xdd, 0x22, 0x0d, 0x44, 0x1a, 0xc6,
	0x69, 0xe4, 0x6f, 0x14, 0x7b, 0xad, 0xc2, 0xb9, 0x42, 0xf1, 0x61, 0x98, 0x18, 0x5d, 0x76, 0xef,
	0x32, 0x3a, 0xd7, 0x96, 0x48, 0xdb, 0x43, 0xc5, 0xbf, 0x63, 0xd2, 0xfe, 0x0e, 0xe0, 0x9d, 0xff,
	0xd2, 0x10, 0x81, 0xda, 0xb4, 0x26, 0xd0, 0xd6, 0x34, 0xaf, 0x2b, 0x0b, 0x4e, 0x2a, 0x82, 0x62,
	0x53, 0xcf, 0x09, 0xbc, 0xdf, 0x85, 0xfb, 0xa7, 0x82, 0x67, 0x09, 0x53, 0xb1, 0x48, 0xfd, 0xe6,
	0x2e, 0xda, 0x8a, 0xb5, 0xa5, 0x81, 0xbb, 0xa3, 0xc1, 0xc3, 0xd1, 0xe0, 0xf7, 0xc3, 0xd1, 0xb8,
	0x37, 0x9a, 0xd5, 0xcf, 0x7f, 0x5a, 0xc0, 0x3b, 0xec, 0x32, 0x9e, 0x8d, 0x11, 0x0d, 0xe4, 0xbe,
	0xba, 0xa8, 0x4d, 0x70, 0x59, 0x9b, 0xe0, 0x57, 0x6d, 0x82, 0xf3, 0xb5, 0x39, 0xbb, 0x5c, 0x9b,
	0xb3, 0x1f, 0x6b, 0x73, 0x76, 0x72, 0x1c, 0xc5, 0xea, 0x73, 0x11, 0xe0, 0x53, 0xc1, 0xc9, 0x50,
	0xd4, 0xa3, 0x84, 0x06, 0x72, 0x7c, 0x91, 0xd5, 0xe4, 0xbe, 0x54, 0x99, 0x31, 0x19, 0xec, 0xb7,
	0x2b, 0x1c, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0x3c, 0x57, 0xad, 0xd8, 0x19, 0x03, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnbondingOperators) > 0 {
		for iNdEx := len(m.UnbondingOperators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingOperators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Operators) > 0 {
		for iNdEx := len(m.Operators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NextOperatorID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextOperatorID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UnbondingOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.UnbondCompletionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnbondCompletionTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintGenesis(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	if m.OperatorID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OperatorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.NextOperatorID != 0 {
		n += 1 + sovGenesis(uint64(m.NextOperatorID))
	}
	if len(m.Operators) > 0 {
		for _, e := range m.Operators {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbondingOperators) > 0 {
		for _, e := range m.UnbondingOperators {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *UnbondingOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorID != 0 {
		n += 1 + sovGenesis(uint64(m.OperatorID))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.UnbondCompletionTime)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextOperatorID", wireType)
			}
			m.NextOperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextOperatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operators = append(m.Operators, Operator{})
			if err := m.Operators[len(m.Operators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingOperators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingOperators = append(m.UnbondingOperators, UnbondingOperator{})
			if err := m.UnbondingOperators[len(m.UnbondingOperators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorID", wireType)
			}
			m.OperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondCompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.UnbondCompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
