// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/operators/v1/messages.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterOperator defines the message structure for the RegisterService
// gRPC service method. It allows an account to register a new operator that can
// opt-in to validate various services. It requires a sender address as well as
// the details of the operator to be registered.
type MsgRegisterOperator struct {
	// Sender is the address of the user registering the operator
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Moniker is the moniker of the operator
	Moniker string `protobuf:"bytes,2,opt,name=moniker,proto3" json:"moniker,omitempty" yaml:"moniker"`
	// Website is the website of the operator (optional)
	Website string `protobuf:"bytes,3,opt,name=website,proto3" json:"website,omitempty" yaml:"website"`
	// PictureURL is the URL of operator picture (optional)
	PictureURL string `protobuf:"bytes,4,opt,name=picture_url,json=pictureUrl,proto3" json:"picture_url,omitempty" yaml:"picture_url"`
}

func (m *MsgRegisterOperator) Reset()         { *m = MsgRegisterOperator{} }
func (m *MsgRegisterOperator) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterOperator) ProtoMessage()    {}
func (*MsgRegisterOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_376ca0aafe99868c, []int{0}
}
func (m *MsgRegisterOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterOperator.Merge(m, src)
}
func (m *MsgRegisterOperator) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterOperator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterOperator proto.InternalMessageInfo

func (m *MsgRegisterOperator) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRegisterOperator) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *MsgRegisterOperator) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *MsgRegisterOperator) GetPictureURL() string {
	if m != nil {
		return m.PictureURL
	}
	return ""
}

// MsgRegisterOperatorResponse is the return value of MsgRegisterOperator.
// It returns the newly created operator ID.
type MsgRegisterOperatorResponse struct {
	// NewOperatorID is the ID of the newly registered operator
	NewOperatorID uint32 `protobuf:"varint,1,opt,name=new_operator_id,json=newOperatorId,proto3" json:"new_operator_id,omitempty"`
}

func (m *MsgRegisterOperatorResponse) Reset()         { *m = MsgRegisterOperatorResponse{} }
func (m *MsgRegisterOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterOperatorResponse) ProtoMessage()    {}
func (*MsgRegisterOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_376ca0aafe99868c, []int{1}
}
func (m *MsgRegisterOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterOperatorResponse.Merge(m, src)
}
func (m *MsgRegisterOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterOperatorResponse proto.InternalMessageInfo

func (m *MsgRegisterOperatorResponse) GetNewOperatorID() uint32 {
	if m != nil {
		return m.NewOperatorID
	}
	return 0
}

// MsgUpdateOperator defines the message structure for the UpdateService gRPC
// service method. It allows the operator owner to update the details of an
// existing operator.
type MsgUpdateOperator struct {
	// Sender is the address of the user updating the operator
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// OperatorID represents the ID of the operator to be updated
	OperatorID uint32 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// Moniker is the new moniker of the operator.
	// If it shouldn't be changed, use [do-not-modify] instead.
	Moniker string `protobuf:"bytes,3,opt,name=moniker,proto3" json:"moniker,omitempty" yaml:"name"`
	// Website is the new website of the operator.
	// If it shouldn't be changed, use [do-not-modify] instead.
	Website string `protobuf:"bytes,4,opt,name=website,proto3" json:"website,omitempty" yaml:"website"`
	// PictureURL is the new URL of the operator picture.
	// If it shouldn't be changed, use [do-not-modify] instead.
	PictureURL string `protobuf:"bytes,5,opt,name=picture_url,json=pictureUrl,proto3" json:"picture_url,omitempty" yaml:"picture_url"`
}

func (m *MsgUpdateOperator) Reset()         { *m = MsgUpdateOperator{} }
func (m *MsgUpdateOperator) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOperator) ProtoMessage()    {}
func (*MsgUpdateOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_376ca0aafe99868c, []int{2}
}
func (m *MsgUpdateOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOperator.Merge(m, src)
}
func (m *MsgUpdateOperator) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOperator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOperator proto.InternalMessageInfo

func (m *MsgUpdateOperator) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUpdateOperator) GetOperatorID() uint32 {
	if m != nil {
		return m.OperatorID
	}
	return 0
}

func (m *MsgUpdateOperator) GetMoniker() string {
	if m != nil {
		return m.Moniker
	}
	return ""
}

func (m *MsgUpdateOperator) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *MsgUpdateOperator) GetPictureURL() string {
	if m != nil {
		return m.PictureURL
	}
	return ""
}

// MsgUpdateOperatorResponse is the return value of MsgUpdateOperator.
type MsgUpdateOperatorResponse struct {
}

func (m *MsgUpdateOperatorResponse) Reset()         { *m = MsgUpdateOperatorResponse{} }
func (m *MsgUpdateOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOperatorResponse) ProtoMessage()    {}
func (*MsgUpdateOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_376ca0aafe99868c, []int{3}
}
func (m *MsgUpdateOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOperatorResponse.Merge(m, src)
}
func (m *MsgUpdateOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOperatorResponse proto.InternalMessageInfo

// MsgDeactivateOperator defines the message structure for the
// DeactivateOperator gRPC service method. It allows the operator owner to
// signal that the operator will become inactive. This should be used to signal
// users that the operator is going to stop performing services and they should
// switch to another operator.
type MsgDeactivateOperator struct {
	// Sender is the address of the user deregistering the operator
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// OperatorID represents the ID of the operator to be deregistered
	OperatorID uint32 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (m *MsgDeactivateOperator) Reset()         { *m = MsgDeactivateOperator{} }
func (m *MsgDeactivateOperator) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateOperator) ProtoMessage()    {}
func (*MsgDeactivateOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_376ca0aafe99868c, []int{4}
}
func (m *MsgDeactivateOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateOperator.Merge(m, src)
}
func (m *MsgDeactivateOperator) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateOperator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateOperator proto.InternalMessageInfo

func (m *MsgDeactivateOperator) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgDeactivateOperator) GetOperatorID() uint32 {
	if m != nil {
		return m.OperatorID
	}
	return 0
}

// MsgDeactivateOperatorResponse is the return value of MsgDeactivateOperator.
type MsgDeactivateOperatorResponse struct {
}

func (m *MsgDeactivateOperatorResponse) Reset()         { *m = MsgDeactivateOperatorResponse{} }
func (m *MsgDeactivateOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateOperatorResponse) ProtoMessage()    {}
func (*MsgDeactivateOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_376ca0aafe99868c, []int{5}
}
func (m *MsgDeactivateOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateOperatorResponse.Merge(m, src)
}
func (m *MsgDeactivateOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateOperatorResponse proto.InternalMessageInfo

// MsgUpdateParams defines the message structure for the UpdateParams gRPC
// service method. It allows the authority to update the module parameters.
type MsgUpdateParams struct {
	// Authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	// Params define the parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_376ca0aafe99868c, []int{6}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse is the return value of MsgUpdateParams.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_376ca0aafe99868c, []int{7}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterOperator)(nil), "milkyway.operators.v1.MsgRegisterOperator")
	proto.RegisterType((*MsgRegisterOperatorResponse)(nil), "milkyway.operators.v1.MsgRegisterOperatorResponse")
	proto.RegisterType((*MsgUpdateOperator)(nil), "milkyway.operators.v1.MsgUpdateOperator")
	proto.RegisterType((*MsgUpdateOperatorResponse)(nil), "milkyway.operators.v1.MsgUpdateOperatorResponse")
	proto.RegisterType((*MsgDeactivateOperator)(nil), "milkyway.operators.v1.MsgDeactivateOperator")
	proto.RegisterType((*MsgDeactivateOperatorResponse)(nil), "milkyway.operators.v1.MsgDeactivateOperatorResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "milkyway.operators.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "milkyway.operators.v1.MsgUpdateParamsResponse")
}

func init() {
	proto.RegisterFile("milkyway/operators/v1/messages.proto", fileDescriptor_376ca0aafe99868c)
}

var fileDescriptor_376ca0aafe99868c = []byte{
	// 729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xbf, 0x6f, 0xd3, 0x40,
	0x14, 0x8e, 0xd3, 0x1f, 0xa8, 0x17, 0xfa, 0xcb, 0xb4, 0x6a, 0xea, 0x52, 0x1b, 0x99, 0x0a, 0x95,
	0x28, 0xb5, 0x9b, 0x16, 0x21, 0x11, 0x26, 0xa2, 0x32, 0x80, 0x08, 0x54, 0x46, 0x95, 0x10, 0x4b,
	0x74, 0x49, 0x0e, 0xd7, 0x6a, 0xec, 0x8b, 0xee, 0x2e, 0x49, 0xb3, 0x21, 0x46, 0x26, 0x46, 0xfe,
	0x06, 0xa6, 0x0e, 0xfc, 0x05, 0x4c, 0x1d, 0xab, 0x4e, 0x4c, 0x16, 0x4a, 0x87, 0xee, 0xf9, 0x0b,
	0x50, 0xec, 0xb3, 0xe3, 0x3a, 0x8e, 0x68, 0x41, 0x62, 0x89, 0xf2, 0xee, 0x7d, 0xef, 0xbe, 0xf7,
	0x7d, 0xef, 0xee, 0x0c, 0x36, 0x6c, 0xab, 0x71, 0xd4, 0xed, 0xc0, 0xae, 0x8e, 0x9b, 0x88, 0x40,
	0x86, 0x09, 0xd5, 0xdb, 0x05, 0xdd, 0x46, 0x94, 0x42, 0x13, 0x51, 0xad, 0x49, 0x30, 0xc3, 0xe2,
	0x72, 0x80, 0xd2, 0x42, 0x94, 0xd6, 0x2e, 0x48, 0x8b, 0xd0, 0xb6, 0x1c, 0xac, 0x7b, 0xbf, 0x3e,
	0x52, 0x5a, 0xad, 0x61, 0x6a, 0x63, 0x5a, 0xf1, 0x22, 0xdd, 0x0f, 0x78, 0x4a, 0xf6, 0x23, 0xbd,
	0x0a, 0x29, 0xd2, 0xdb, 0x85, 0x2a, 0x62, 0xb0, 0xa0, 0xd7, 0xb0, 0xe5, 0x8c, 0xe4, 0x9d, 0xa3,
	0x30, 0x3f, 0x08, 0x78, 0x7e, 0x85, 0xe7, 0x6d, 0x6a, 0x7a, 0x2d, 0x52, 0x93, 0x27, 0x96, 0x4c,
	0x6c, 0x62, 0x9f, 0x70, 0xf0, 0x8f, 0xaf, 0xaa, 0xc9, 0xca, 0x9a, 0x90, 0x40, 0x9b, 0xb7, 0xa4,
	0x7e, 0x4d, 0x83, 0x3b, 0x65, 0x6a, 0x1a, 0xc8, 0xb4, 0x28, 0x43, 0xe4, 0x0d, 0x07, 0x8a, 0xdb,
	0x60, 0x9a, 0x22, 0xa7, 0x8e, 0x48, 0x56, 0xb8, 0x27, 0x6c, 0xce, 0x94, 0xb2, 0xe7, 0xdf, 0xb7,
	0x96, 0xb8, 0x98, 0x67, 0xf5, 0x3a, 0x41, 0x94, 0xbe, 0x65, 0xc4, 0x72, 0x4c, 0x83, 0xe3, 0xc4,
	0x3c, 0xb8, 0x65, 0x63, 0xc7, 0x3a, 0x42, 0x24, 0x9b, 0xf6, 0x4a, 0xc4, 0xbe, 0xab, 0xcc, 0x75,
	0xa1, 0xdd, 0x28, 0xaa, 0x3c, 0xa1, 0x1a, 0x01, 0x64, 0x80, 0xee, 0xa0, 0x2a, 0xb5, 0x18, 0xca,
	0x4e, 0xc4, 0xd1, 0x3c, 0xa1, 0x1a, 0x01, 0x44, 0x7c, 0x0e, 0x32, 0x4d, 0xab, 0xc6, 0x5a, 0x04,
	0x55, 0x5a, 0xa4, 0x91, 0x9d, 0xf4, 0x2a, 0x36, 0x7a, 0xae, 0x02, 0xf6, 0xfd, 0xe5, 0x03, 0xe3,
	0x55, 0xdf, 0x55, 0x44, 0xbf, 0x3e, 0x02, 0x55, 0x0d, 0xc0, 0xa3, 0x03, 0xd2, 0x28, 0xe6, 0x3f,
	0x5d, 0x9e, 0xe4, 0x78, 0xbf, 0x9f, 0x2f, 0x4f, 0x72, 0x77, 0x43, 0x83, 0x12, 0x2c, 0x50, 0xdf,
	0x81, 0xb5, 0x84, 0x65, 0x03, 0xd1, 0x26, 0x76, 0x28, 0x12, 0x9f, 0x80, 0x79, 0x07, 0x75, 0x2a,
	0x81, 0xb5, 0x15, 0xab, 0xee, 0x59, 0x35, 0x5b, 0x5a, 0xec, 0xb9, 0xca, 0xec, 0x6b, 0xd4, 0x09,
	0x2a, 0x5e, 0xec, 0x19, 0xb3, 0x4e, 0x24, 0xac, 0xab, 0x3f, 0xd2, 0x60, 0xb1, 0x4c, 0xcd, 0x83,
	0x66, 0x1d, 0x32, 0xf4, 0x0f, 0x96, 0xeb, 0x20, 0x13, 0xa5, 0x4f, 0x7b, 0xf4, 0x73, 0x03, 0x5b,
	0x22, 0xdc, 0x00, 0x87, 0xc4, 0xe2, 0xc3, 0xe1, 0x8c, 0x7c, 0xd7, 0xe7, 0xfb, 0xae, 0x92, 0xf1,
	0x5d, 0x73, 0xa0, 0x8d, 0x92, 0x07, 0x34, 0x79, 0xe3, 0x01, 0x4d, 0xfd, 0xe5, 0x80, 0x72, 0xb1,
	0x01, 0x49, 0xd1, 0x01, 0x5d, 0xb5, 0x4b, 0x5d, 0x03, 0xab, 0x23, 0x8b, 0xc1, 0x70, 0xd4, 0x6f,
	0x02, 0x58, 0x2e, 0x53, 0x73, 0x0f, 0xc1, 0x1a, 0xb3, 0xda, 0xff, 0xd7, 0xe5, 0xa2, 0x16, 0x53,
	0x21, 0x47, 0x55, 0xec, 0x21, 0x12, 0x3f, 0x68, 0x0a, 0x58, 0x4f, 0xec, 0x35, 0x54, 0x73, 0x2e,
	0x80, 0xf9, 0x50, 0xeb, 0xbe, 0x77, 0x7d, 0xc5, 0x97, 0x60, 0x06, 0xb6, 0xd8, 0x21, 0x26, 0x16,
	0xeb, 0x72, 0x29, 0xf9, 0xbe, 0xab, 0x2c, 0xf8, 0x0e, 0x87, 0x29, 0x75, 0xac, 0xbc, 0x61, 0xb9,
	0xf8, 0x14, 0x4c, 0xfb, 0x8f, 0x82, 0x27, 0x2e, 0xb3, 0xb3, 0xae, 0x25, 0xbe, 0x76, 0x9a, 0x4f,
	0x5d, 0x9a, 0x3c, 0x75, 0x95, 0x94, 0xc1, 0x4b, 0x8a, 0x8f, 0x07, 0x6a, 0x87, 0x9b, 0x0d, 0x04,
	0xdf, 0x0f, 0x05, 0x1f, 0xeb, 0x14, 0x91, 0xb6, 0x55, 0x43, 0x54, 0x8f, 0x09, 0x50, 0x57, 0xc1,
	0x4a, 0x6c, 0x29, 0xd0, 0xbb, 0x73, 0x36, 0x01, 0x26, 0xca, 0xd4, 0x14, 0x09, 0x58, 0x18, 0x79,
	0x98, 0x72, 0x63, 0x7a, 0x4b, 0xb8, 0xaa, 0xd2, 0xce, 0xf5, 0xb1, 0xe1, 0xb5, 0x6e, 0x80, 0xb9,
	0xd8, 0xbd, 0xdc, 0x1c, 0xbf, 0xcb, 0x55, 0xa4, 0xb4, 0x7d, 0x5d, 0x64, 0xc8, 0x76, 0x0c, 0xc4,
	0x84, 0x33, 0x9a, 0x1f, 0xbf, 0xcf, 0x28, 0x5a, 0x7a, 0x74, 0x13, 0x74, 0xc8, 0xfc, 0x01, 0xdc,
	0xbe, 0x72, 0x9e, 0x1e, 0xfc, 0xa9, 0x77, 0x1f, 0x27, 0x69, 0xd7, 0xc3, 0x05, 0x3c, 0xd2, 0xd4,
	0xc7, 0xcb, 0x93, 0x9c, 0x50, 0x2a, 0x9f, 0xf6, 0x64, 0xe1, 0xac, 0x27, 0x0b, 0xbf, 0x7a, 0xb2,
	0xf0, 0xe5, 0x42, 0x4e, 0x9d, 0x5d, 0xc8, 0xa9, 0x9f, 0x17, 0x72, 0xea, 0xfd, 0xae, 0x69, 0xb1,
	0xc3, 0x56, 0x55, 0xab, 0x61, 0x5b, 0x0f, 0xb6, 0xde, 0x6a, 0xc0, 0x2a, 0xd5, 0x23, 0xa7, 0x68,
	0xf8, 0x01, 0x63, 0xdd, 0x26, 0xa2, 0xd5, 0x69, 0xef, 0xeb, 0xb5, 0xfb, 0x3b, 0x00, 0x00, 0xff,
	0xff, 0x18, 0x6c, 0xd0, 0x93, 0xbd, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// RegisterOperator defines the operation for registering a new operator.
	RegisterOperator(ctx context.Context, in *MsgRegisterOperator, opts ...grpc.CallOption) (*MsgRegisterOperatorResponse, error)
	// UpdateOperator defines the operation for updating an operator's details.
	// The operator owner can update the moniker, website, and picture URL.
	UpdateOperator(ctx context.Context, in *MsgUpdateOperator, opts ...grpc.CallOption) (*MsgUpdateOperatorResponse, error)
	// DeactivateOperator defines the operation for deactivating an
	// operator. Operators will require some time in order to be deactivated.
	// This time is defined by the governance parameters.
	DeactivateOperator(ctx context.Context, in *MsgDeactivateOperator, opts ...grpc.CallOption) (*MsgDeactivateOperatorResponse, error)
	// UpdateParams defines a governance operation for updating the module
	// parameters.
	// The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterOperator(ctx context.Context, in *MsgRegisterOperator, opts ...grpc.CallOption) (*MsgRegisterOperatorResponse, error) {
	out := new(MsgRegisterOperatorResponse)
	err := c.cc.Invoke(ctx, "/milkyway.operators.v1.Msg/RegisterOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateOperator(ctx context.Context, in *MsgUpdateOperator, opts ...grpc.CallOption) (*MsgUpdateOperatorResponse, error) {
	out := new(MsgUpdateOperatorResponse)
	err := c.cc.Invoke(ctx, "/milkyway.operators.v1.Msg/UpdateOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeactivateOperator(ctx context.Context, in *MsgDeactivateOperator, opts ...grpc.CallOption) (*MsgDeactivateOperatorResponse, error) {
	out := new(MsgDeactivateOperatorResponse)
	err := c.cc.Invoke(ctx, "/milkyway.operators.v1.Msg/DeactivateOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.operators.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// RegisterOperator defines the operation for registering a new operator.
	RegisterOperator(context.Context, *MsgRegisterOperator) (*MsgRegisterOperatorResponse, error)
	// UpdateOperator defines the operation for updating an operator's details.
	// The operator owner can update the moniker, website, and picture URL.
	UpdateOperator(context.Context, *MsgUpdateOperator) (*MsgUpdateOperatorResponse, error)
	// DeactivateOperator defines the operation for deactivating an
	// operator. Operators will require some time in order to be deactivated.
	// This time is defined by the governance parameters.
	DeactivateOperator(context.Context, *MsgDeactivateOperator) (*MsgDeactivateOperatorResponse, error)
	// UpdateParams defines a governance operation for updating the module
	// parameters.
	// The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterOperator(ctx context.Context, req *MsgRegisterOperator) (*MsgRegisterOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterOperator not implemented")
}
func (*UnimplementedMsgServer) UpdateOperator(ctx context.Context, req *MsgUpdateOperator) (*MsgUpdateOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOperator not implemented")
}
func (*UnimplementedMsgServer) DeactivateOperator(ctx context.Context, req *MsgDeactivateOperator) (*MsgDeactivateOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateOperator not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.operators.v1.Msg/RegisterOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterOperator(ctx, req.(*MsgRegisterOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.operators.v1.Msg/UpdateOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateOperator(ctx, req.(*MsgUpdateOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeactivateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeactivateOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeactivateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.operators.v1.Msg/DeactivateOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeactivateOperator(ctx, req.(*MsgDeactivateOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.operators.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milkyway.operators.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterOperator",
			Handler:    _Msg_RegisterOperator_Handler,
		},
		{
			MethodName: "UpdateOperator",
			Handler:    _Msg_UpdateOperator_Handler,
		},
		{
			MethodName: "DeactivateOperator",
			Handler:    _Msg_DeactivateOperator_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milkyway/operators/v1/messages.proto",
}

func (m *MsgRegisterOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PictureURL) > 0 {
		i -= len(m.PictureURL)
		copy(dAtA[i:], m.PictureURL)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.PictureURL)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewOperatorID != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.NewOperatorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PictureURL) > 0 {
		i -= len(m.PictureURL)
		copy(dAtA[i:], m.PictureURL)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.PictureURL)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Moniker) > 0 {
		i -= len(m.Moniker)
		copy(dAtA[i:], m.Moniker)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Moniker)))
		i--
		dAtA[i] = 0x1a
	}
	if m.OperatorID != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.OperatorID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorID != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.OperatorID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.PictureURL)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgRegisterOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewOperatorID != 0 {
		n += 1 + sovMessages(uint64(m.NewOperatorID))
	}
	return n
}

func (m *MsgUpdateOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.OperatorID != 0 {
		n += 1 + sovMessages(uint64(m.OperatorID))
	}
	l = len(m.Moniker)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.PictureURL)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgUpdateOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeactivateOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.OperatorID != 0 {
		n += 1 + sovMessages(uint64(m.OperatorID))
	}
	return n
}

func (m *MsgDeactivateOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovMessages(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PictureURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PictureURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOperatorID", wireType)
			}
			m.NewOperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewOperatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorID", wireType)
			}
			m.OperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Moniker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Moniker = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PictureURL", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PictureURL = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorID", wireType)
			}
			m.OperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
