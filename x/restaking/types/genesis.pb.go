// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/restaking/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// OperatorJoinedServicesRecord represents the services joined by a
// individual operator.
type OperatorJoinedServices struct {
	// OperatorID is the ID of the operator.
	OperatorID uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// ServiceIDs represents the list of services joined by the operator.
	ServiceIDs []uint32 `protobuf:"varint,2,rep,packed,name=service_ids,json=serviceIds,proto3" json:"service_ids,omitempty"`
}

func (m *OperatorJoinedServices) Reset()         { *m = OperatorJoinedServices{} }
func (m *OperatorJoinedServices) String() string { return proto.CompactTextString(m) }
func (*OperatorJoinedServices) ProtoMessage()    {}
func (*OperatorJoinedServices) Descriptor() ([]byte, []int) {
	return fileDescriptor_0378bd63cae7d256, []int{0}
}
func (m *OperatorJoinedServices) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorJoinedServices) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorJoinedServices.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorJoinedServices) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorJoinedServices.Merge(m, src)
}
func (m *OperatorJoinedServices) XXX_Size() int {
	return m.Size()
}
func (m *OperatorJoinedServices) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorJoinedServices.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorJoinedServices proto.InternalMessageInfo

func (m *OperatorJoinedServices) GetOperatorID() uint32 {
	if m != nil {
		return m.OperatorID
	}
	return 0
}

func (m *OperatorJoinedServices) GetServiceIDs() []uint32 {
	if m != nil {
		return m.ServiceIDs
	}
	return nil
}

// ServiceAllowedOperators represents the operators allowed to secure a
// a service.
type ServiceAllowedOperators struct {
	// ServiceID is the ID of the service.
	ServiceID uint32 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// OperatorIDs defines the allowed operator IDs.
	OperatorIDs []uint32 `protobuf:"varint,2,rep,packed,name=operator_ids,json=operatorIds,proto3" json:"operator_ids,omitempty"`
}

func (m *ServiceAllowedOperators) Reset()         { *m = ServiceAllowedOperators{} }
func (m *ServiceAllowedOperators) String() string { return proto.CompactTextString(m) }
func (*ServiceAllowedOperators) ProtoMessage()    {}
func (*ServiceAllowedOperators) Descriptor() ([]byte, []int) {
	return fileDescriptor_0378bd63cae7d256, []int{1}
}
func (m *ServiceAllowedOperators) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceAllowedOperators) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceAllowedOperators.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceAllowedOperators) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceAllowedOperators.Merge(m, src)
}
func (m *ServiceAllowedOperators) XXX_Size() int {
	return m.Size()
}
func (m *ServiceAllowedOperators) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceAllowedOperators.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceAllowedOperators proto.InternalMessageInfo

func (m *ServiceAllowedOperators) GetServiceID() uint32 {
	if m != nil {
		return m.ServiceID
	}
	return 0
}

func (m *ServiceAllowedOperators) GetOperatorIDs() []uint32 {
	if m != nil {
		return m.OperatorIDs
	}
	return nil
}

// ServiceSecuringPools represents the list pools from which a service can
// borrow security
type ServiceSecuringPools struct {
	// ServiceID is the ID of the service.
	ServiceID uint32 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// PoolIDs defines the IDs of the pools from which the service can borrow
	// security.
	PoolIDs []uint32 `protobuf:"varint,2,rep,packed,name=pool_ids,json=poolIds,proto3" json:"pool_ids,omitempty"`
}

func (m *ServiceSecuringPools) Reset()         { *m = ServiceSecuringPools{} }
func (m *ServiceSecuringPools) String() string { return proto.CompactTextString(m) }
func (*ServiceSecuringPools) ProtoMessage()    {}
func (*ServiceSecuringPools) Descriptor() ([]byte, []int) {
	return fileDescriptor_0378bd63cae7d256, []int{2}
}
func (m *ServiceSecuringPools) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceSecuringPools) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceSecuringPools.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceSecuringPools) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceSecuringPools.Merge(m, src)
}
func (m *ServiceSecuringPools) XXX_Size() int {
	return m.Size()
}
func (m *ServiceSecuringPools) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceSecuringPools.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceSecuringPools proto.InternalMessageInfo

func (m *ServiceSecuringPools) GetServiceID() uint32 {
	if m != nil {
		return m.ServiceID
	}
	return 0
}

func (m *ServiceSecuringPools) GetPoolIDs() []uint32 {
	if m != nil {
		return m.PoolIDs
	}
	return nil
}

// UserPreferencesEntry represents the user preferences.
type UserPreferencesEntry struct {
	// UserAddress is the encoded address of the user.
	UserAddress string `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// Preferences is the user preferences.
	Preferences UserPreferences `protobuf:"bytes,2,opt,name=preferences,proto3" json:"preferences"`
}

func (m *UserPreferencesEntry) Reset()         { *m = UserPreferencesEntry{} }
func (m *UserPreferencesEntry) String() string { return proto.CompactTextString(m) }
func (*UserPreferencesEntry) ProtoMessage()    {}
func (*UserPreferencesEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_0378bd63cae7d256, []int{3}
}
func (m *UserPreferencesEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPreferencesEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPreferencesEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPreferencesEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPreferencesEntry.Merge(m, src)
}
func (m *UserPreferencesEntry) XXX_Size() int {
	return m.Size()
}
func (m *UserPreferencesEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPreferencesEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UserPreferencesEntry proto.InternalMessageInfo

func (m *UserPreferencesEntry) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *UserPreferencesEntry) GetPreferences() UserPreferences {
	if m != nil {
		return m.Preferences
	}
	return UserPreferences{}
}

// GenesisState defines the restaking module's genesis state.
type GenesisState struct {
	// Params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// OperatorsJoinedServices defines the list of the services that each operator
	// has joined.
	OperatorsJoinedServices []OperatorJoinedServices `protobuf:"bytes,2,rep,name=operators_joined_services,json=operatorsJoinedServices,proto3" json:"operators_joined_services"`
	// ServiceAllowedOperators defines the operators allowed to secure each
	// service.
	ServicesAllowedOperators []ServiceAllowedOperators `protobuf:"bytes,3,rep,name=services_allowed_operators,json=servicesAllowedOperators,proto3" json:"services_allowed_operators"`
	// ServicesSecuringPools defines the whitelisted pools for each service.
	ServicesSecuringPools []ServiceSecuringPools `protobuf:"bytes,4,rep,name=services_securing_pools,json=servicesSecuringPools,proto3" json:"services_securing_pools"`
	// Delegations represents the delegations.
	Delegations []Delegation `protobuf:"bytes,5,rep,name=delegations,proto3" json:"delegations"`
	// UnbondingDelegations represents the unbonding delegations.
	UnbondingDelegations []UnbondingDelegation `protobuf:"bytes,6,rep,name=unbonding_delegations,json=unbondingDelegations,proto3" json:"unbonding_delegations"`
	// UserPreferences represents the user preferences.
	UsersPreferences []UserPreferencesEntry `protobuf:"bytes,7,rep,name=users_preferences,json=usersPreferences,proto3" json:"users_preferences"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_0378bd63cae7d256, []int{4}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetOperatorsJoinedServices() []OperatorJoinedServices {
	if m != nil {
		return m.OperatorsJoinedServices
	}
	return nil
}

func (m *GenesisState) GetServicesAllowedOperators() []ServiceAllowedOperators {
	if m != nil {
		return m.ServicesAllowedOperators
	}
	return nil
}

func (m *GenesisState) GetServicesSecuringPools() []ServiceSecuringPools {
	if m != nil {
		return m.ServicesSecuringPools
	}
	return nil
}

func (m *GenesisState) GetDelegations() []Delegation {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *GenesisState) GetUnbondingDelegations() []UnbondingDelegation {
	if m != nil {
		return m.UnbondingDelegations
	}
	return nil
}

func (m *GenesisState) GetUsersPreferences() []UserPreferencesEntry {
	if m != nil {
		return m.UsersPreferences
	}
	return nil
}

func init() {
	proto.RegisterType((*OperatorJoinedServices)(nil), "milkyway.restaking.v1.OperatorJoinedServices")
	proto.RegisterType((*ServiceAllowedOperators)(nil), "milkyway.restaking.v1.ServiceAllowedOperators")
	proto.RegisterType((*ServiceSecuringPools)(nil), "milkyway.restaking.v1.ServiceSecuringPools")
	proto.RegisterType((*UserPreferencesEntry)(nil), "milkyway.restaking.v1.UserPreferencesEntry")
	proto.RegisterType((*GenesisState)(nil), "milkyway.restaking.v1.GenesisState")
}

func init() {
	proto.RegisterFile("milkyway/restaking/v1/genesis.proto", fileDescriptor_0378bd63cae7d256)
}

var fileDescriptor_0378bd63cae7d256 = []byte{
	// 609 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcf, 0x8e, 0xd2, 0x40,
	0x1c, 0xc7, 0xe9, 0xfe, 0x01, 0x99, 0xb2, 0xfe, 0x69, 0x40, 0x2a, 0x89, 0x85, 0xc5, 0x64, 0xb3,
	0x51, 0xb7, 0x0d, 0x78, 0xf0, 0xe0, 0x69, 0x37, 0x18, 0x83, 0x07, 0xc5, 0x12, 0x2f, 0x1e, 0x6c,
	0x0a, 0x1d, 0x6b, 0xdd, 0xd2, 0x69, 0xe6, 0x57, 0x58, 0xd1, 0x27, 0xf0, 0xe6, 0x8b, 0xf8, 0x1e,
	0x7b, 0xdc, 0xa3, 0x27, 0x62, 0xca, 0x8b, 0x98, 0xb6, 0x33, 0xa5, 0xbb, 0x50, 0x92, 0xbd, 0x41,
	0xe7, 0xfb, 0xfb, 0x7c, 0x26, 0xd3, 0x6f, 0x07, 0x3d, 0x99, 0x38, 0xee, 0xf9, 0xfc, 0xc2, 0x9c,
	0x6b, 0x14, 0x43, 0x60, 0x9e, 0x3b, 0x9e, 0xad, 0xcd, 0x3a, 0x9a, 0x8d, 0x3d, 0x0c, 0x0e, 0xa8,
	0x3e, 0x25, 0x01, 0x91, 0x6a, 0x3c, 0xa4, 0xa6, 0x21, 0x75, 0xd6, 0x69, 0x54, 0x6d, 0x62, 0x93,
	0x38, 0xa1, 0x45, 0xbf, 0x92, 0x70, 0xa3, 0xbd, 0x99, 0x38, 0x21, 0x16, 0x76, 0x61, 0x7b, 0xc6,
	0x37, 0xa9, 0x39, 0x61, 0x99, 0xf6, 0x0f, 0xf4, 0xf0, 0xbd, 0x8f, 0xa9, 0x19, 0x10, 0xfa, 0x96,
	0x38, 0x1e, 0xb6, 0x86, 0x98, 0xce, 0x9c, 0x31, 0x06, 0x49, 0x43, 0x22, 0x61, 0x2b, 0x86, 0x63,
	0xc9, 0x42, 0x4b, 0x38, 0x3e, 0x38, 0xbb, 0x1b, 0x2e, 0x9a, 0x88, 0x0f, 0xf4, 0x7b, 0x3a, 0xe2,
	0x91, 0xbe, 0x15, 0x0d, 0x40, 0x32, 0x6c, 0x38, 0x16, 0xc8, 0x3b, 0xad, 0x5d, 0x3e, 0xc0, 0x98,
	0xfd, 0x1e, 0xe8, 0x88, 0x45, 0xfa, 0x16, 0xb4, 0x7f, 0xa2, 0x3a, 0x5b, 0x39, 0x75, 0x5d, 0x72,
	0x81, 0x2d, 0x0e, 0x06, 0xe9, 0x39, 0x42, 0x2b, 0x16, 0x73, 0x1f, 0x84, 0x8b, 0x66, 0x39, 0x45,
	0xe9, 0xe5, 0x94, 0x24, 0x75, 0x51, 0x25, 0xb3, 0x55, 0xae, 0xbe, 0x17, 0x2e, 0x9a, 0xe2, 0x6a,
	0xaf, 0xa0, 0x8b, 0xab, 0xcd, 0x42, 0xdb, 0x45, 0x55, 0xc6, 0x1a, 0xe2, 0xf1, 0x94, 0x3a, 0x9e,
	0x3d, 0x20, 0xc4, 0xbd, 0xad, 0xf9, 0x08, 0xdd, 0xf1, 0x09, 0x71, 0x33, 0x56, 0x31, 0x5c, 0x34,
	0x4b, 0x11, 0x2a, 0x32, 0x96, 0xa2, 0xc5, 0xc8, 0xf6, 0x4b, 0x40, 0xd5, 0x8f, 0x80, 0xe9, 0x80,
	0xe2, 0x2f, 0x98, 0x62, 0x6f, 0x8c, 0xe1, 0xb5, 0x17, 0xd0, 0xb9, 0x74, 0x88, 0x2a, 0x53, 0xc0,
	0xd4, 0x30, 0x2d, 0x8b, 0x62, 0x80, 0x58, 0x58, 0xd6, 0xc5, 0xe8, 0xd9, 0x69, 0xf2, 0x48, 0x7a,
	0x87, 0x44, 0x7f, 0x35, 0x26, 0xef, 0xb4, 0x84, 0x63, 0xb1, 0x7b, 0xa4, 0x6e, 0x6c, 0x8b, 0x7a,
	0x43, 0x72, 0xb6, 0x77, 0xb9, 0x68, 0x16, 0xf4, 0x2c, 0xa0, 0xfd, 0x67, 0x1f, 0x55, 0xde, 0x24,
	0xcd, 0x1b, 0x06, 0x66, 0x80, 0xa5, 0x57, 0xa8, 0x98, 0x74, 0x22, 0xb6, 0x8b, 0xdd, 0xc7, 0x39,
	0xec, 0x41, 0x1c, 0x62, 0x48, 0x36, 0x22, 0x11, 0xf4, 0x88, 0x1f, 0x2b, 0x18, 0xdf, 0xe2, 0x0a,
	0x19, 0xec, 0x7c, 0x92, 0x23, 0x11, 0xbb, 0x27, 0x39, 0xbc, 0xcd, 0xc5, 0x63, 0xfc, 0x7a, 0x4a,
	0xbd, 0xd1, 0x4b, 0x8a, 0x1a, 0x9c, 0x6f, 0x98, 0x49, 0x6f, 0x8c, 0x34, 0x2b, 0xef, 0xc6, 0x46,
	0x35, 0xc7, 0x98, 0x53, 0x37, 0xa6, 0x94, 0x39, 0x77, 0xad, 0x8e, 0x0e, 0xaa, 0xa7, 0x4e, 0x60,
	0x75, 0x31, 0xa2, 0x77, 0x0b, 0xf2, 0x5e, 0x2c, 0x7c, 0xb6, 0x5d, 0x78, 0xad, 0x62, 0xcc, 0x56,
	0xe3, 0xc4, 0xeb, 0xfd, 0xeb, 0x23, 0xd1, 0xc2, 0x2e, 0xb6, 0xcd, 0xc0, 0x21, 0x1e, 0xc8, 0xfb,
	0x31, 0xfe, 0x30, 0x07, 0xdf, 0x4b, 0x93, 0xfc, 0x45, 0x67, 0x66, 0x25, 0x8c, 0x6a, 0x53, 0x6f,
	0x44, 0x3c, 0x2b, 0xda, 0x6d, 0x16, 0x5a, 0x8c, 0xa1, 0x4f, 0xf3, 0x2a, 0xc4, 0x67, 0xd6, 0xe8,
	0xd5, 0xe9, 0xfa, 0x12, 0x48, 0x9f, 0xd1, 0x83, 0xa8, 0xae, 0x60, 0x64, 0x5b, 0x5a, 0xda, 0x7a,
	0x2c, 0x9b, 0x3e, 0x05, 0xe6, 0xb8, 0x1f, 0xb3, 0xb2, 0x15, 0xfe, 0x70, 0x19, 0x2a, 0xc2, 0x55,
	0xa8, 0x08, 0xff, 0x42, 0x45, 0xf8, 0xbd, 0x54, 0x0a, 0x57, 0x4b, 0xa5, 0xf0, 0x77, 0xa9, 0x14,
	0x3e, 0xbd, 0xb4, 0x9d, 0xe0, 0xeb, 0x74, 0xa4, 0x8e, 0xc9, 0x44, 0xe3, 0xa2, 0x13, 0xd7, 0x1c,
	0x41, 0xfa, 0x4f, 0x9b, 0x75, 0x3a, 0xda, 0xf7, 0xcc, 0xfd, 0x17, 0xcc, 0x7d, 0x0c, 0xa3, 0x62,
	0x7c, 0xf9, 0xbd, 0xf8, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x8c, 0xed, 0x7b, 0x3e, 0x98, 0x05, 0x00,
	0x00,
}

func (m *OperatorJoinedServices) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorJoinedServices) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorJoinedServices) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceIDs) > 0 {
		dAtA2 := make([]byte, len(m.ServiceIDs)*10)
		var j1 int
		for _, num := range m.ServiceIDs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGenesis(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.OperatorID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OperatorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServiceAllowedOperators) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceAllowedOperators) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceAllowedOperators) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorIDs) > 0 {
		dAtA4 := make([]byte, len(m.OperatorIDs)*10)
		var j3 int
		for _, num := range m.OperatorIDs {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintGenesis(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.ServiceID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServiceSecuringPools) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceSecuringPools) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceSecuringPools) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolIDs) > 0 {
		dAtA6 := make([]byte, len(m.PoolIDs)*10)
		var j5 int
		for _, num := range m.PoolIDs {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintGenesis(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	if m.ServiceID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserPreferencesEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPreferencesEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPreferencesEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Preferences.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UsersPreferences) > 0 {
		for iNdEx := len(m.UsersPreferences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UsersPreferences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.UnbondingDelegations) > 0 {
		for iNdEx := len(m.UnbondingDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.ServicesSecuringPools) > 0 {
		for iNdEx := len(m.ServicesSecuringPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServicesSecuringPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.ServicesAllowedOperators) > 0 {
		for iNdEx := len(m.ServicesAllowedOperators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServicesAllowedOperators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.OperatorsJoinedServices) > 0 {
		for iNdEx := len(m.OperatorsJoinedServices) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorsJoinedServices[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OperatorJoinedServices) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorID != 0 {
		n += 1 + sovGenesis(uint64(m.OperatorID))
	}
	if len(m.ServiceIDs) > 0 {
		l = 0
		for _, e := range m.ServiceIDs {
			l += sovGenesis(uint64(e))
		}
		n += 1 + sovGenesis(uint64(l)) + l
	}
	return n
}

func (m *ServiceAllowedOperators) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceID != 0 {
		n += 1 + sovGenesis(uint64(m.ServiceID))
	}
	if len(m.OperatorIDs) > 0 {
		l = 0
		for _, e := range m.OperatorIDs {
			l += sovGenesis(uint64(e))
		}
		n += 1 + sovGenesis(uint64(l)) + l
	}
	return n
}

func (m *ServiceSecuringPools) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceID != 0 {
		n += 1 + sovGenesis(uint64(m.ServiceID))
	}
	if len(m.PoolIDs) > 0 {
		l = 0
		for _, e := range m.PoolIDs {
			l += sovGenesis(uint64(e))
		}
		n += 1 + sovGenesis(uint64(l)) + l
	}
	return n
}

func (m *UserPreferencesEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Preferences.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.OperatorsJoinedServices) > 0 {
		for _, e := range m.OperatorsJoinedServices {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ServicesAllowedOperators) > 0 {
		for _, e := range m.ServicesAllowedOperators {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ServicesSecuringPools) > 0 {
		for _, e := range m.ServicesSecuringPools {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UnbondingDelegations) > 0 {
		for _, e := range m.UnbondingDelegations {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.UsersPreferences) > 0 {
		for _, e := range m.UsersPreferences {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OperatorJoinedServices) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorJoinedServices: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorJoinedServices: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorID", wireType)
			}
			m.OperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ServiceIDs = append(m.ServiceIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenesis
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenesis
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ServiceIDs) == 0 {
					m.ServiceIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ServiceIDs = append(m.ServiceIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceAllowedOperators) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceAllowedOperators: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceAllowedOperators: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OperatorIDs = append(m.OperatorIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenesis
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenesis
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OperatorIDs) == 0 {
					m.OperatorIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OperatorIDs = append(m.OperatorIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceSecuringPools) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceSecuringPools: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceSecuringPools: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PoolIDs = append(m.PoolIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGenesis
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGenesis
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGenesis
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PoolIDs) == 0 {
					m.PoolIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGenesis
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PoolIDs = append(m.PoolIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPreferencesEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPreferencesEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPreferencesEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Preferences.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorsJoinedServices", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorsJoinedServices = append(m.OperatorsJoinedServices, OperatorJoinedServices{})
			if err := m.OperatorsJoinedServices[len(m.OperatorsJoinedServices)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicesAllowedOperators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicesAllowedOperators = append(m.ServicesAllowedOperators, ServiceAllowedOperators{})
			if err := m.ServicesAllowedOperators[len(m.ServicesAllowedOperators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicesSecuringPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServicesSecuringPools = append(m.ServicesSecuringPools, ServiceSecuringPools{})
			if err := m.ServicesSecuringPools[len(m.ServicesSecuringPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, Delegation{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingDelegations = append(m.UnbondingDelegations, UnbondingDelegation{})
			if err := m.UnbondingDelegations[len(m.UnbondingDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersPreferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsersPreferences = append(m.UsersPreferences, UserPreferencesEntry{})
			if err := m.UsersPreferences[len(m.UsersPreferences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
