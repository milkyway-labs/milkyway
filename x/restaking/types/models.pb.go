// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/restaking/v1/models.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// PoolDelegation represents the bond with tokens held by an account with a
// given pool. It is owned by one delegator, and is associated with a pool.
type PoolDelegation struct {
	// UserAddress is the encoded address of the user.
	UserAddress string `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// PoolID is the id of the pool.
	PoolID uint32 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Shares define the delegation shares received.
	Shares cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
}

func (m *PoolDelegation) Reset()         { *m = PoolDelegation{} }
func (m *PoolDelegation) String() string { return proto.CompactTextString(m) }
func (*PoolDelegation) ProtoMessage()    {}
func (*PoolDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_86f4cd48423b1e2f, []int{0}
}
func (m *PoolDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolDelegation.Merge(m, src)
}
func (m *PoolDelegation) XXX_Size() int {
	return m.Size()
}
func (m *PoolDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_PoolDelegation proto.InternalMessageInfo

// OperatorDelegation represents the bond with tokens held by an account with a
// given operator. It is owned by one delegator, and is associated with a
// operator.
type OperatorDelegation struct {
	// UserAddress is the encoded address of the user.
	UserAddress string `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// OperatorID is the id of the operator.
	OperatorID uint32 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// Shares define the delegation shares received.
	Shares github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,3,rep,name=shares,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"shares"`
}

func (m *OperatorDelegation) Reset()         { *m = OperatorDelegation{} }
func (m *OperatorDelegation) String() string { return proto.CompactTextString(m) }
func (*OperatorDelegation) ProtoMessage()    {}
func (*OperatorDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_86f4cd48423b1e2f, []int{1}
}
func (m *OperatorDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorDelegation.Merge(m, src)
}
func (m *OperatorDelegation) XXX_Size() int {
	return m.Size()
}
func (m *OperatorDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorDelegation proto.InternalMessageInfo

// ServiceDelegation represents the bond with tokens held by an account with a
// given service. It is owned by one delegator, and is associated with a
// service.
type ServiceDelegation struct {
	// UserAddress is the encoded address of the user.
	UserAddress string `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// ServiceID is the id of the service.
	ServiceID uint32 `protobuf:"varint,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Shares define the delegation shares received.
	Shares cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=shares,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares"`
}

func (m *ServiceDelegation) Reset()         { *m = ServiceDelegation{} }
func (m *ServiceDelegation) String() string { return proto.CompactTextString(m) }
func (*ServiceDelegation) ProtoMessage()    {}
func (*ServiceDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_86f4cd48423b1e2f, []int{2}
}
func (m *ServiceDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceDelegation.Merge(m, src)
}
func (m *ServiceDelegation) XXX_Size() int {
	return m.Size()
}
func (m *ServiceDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceDelegation proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PoolDelegation)(nil), "milkyway.restaking.v1.PoolDelegation")
	proto.RegisterType((*OperatorDelegation)(nil), "milkyway.restaking.v1.OperatorDelegation")
	proto.RegisterType((*ServiceDelegation)(nil), "milkyway.restaking.v1.ServiceDelegation")
}

func init() {
	proto.RegisterFile("milkyway/restaking/v1/models.proto", fileDescriptor_86f4cd48423b1e2f)
}

var fileDescriptor_86f4cd48423b1e2f = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xf6, 0x51, 0x29, 0x90, 0x0b, 0xad, 0x54, 0xab, 0x48, 0xa1, 0x20, 0xbb, 0x0a, 0x4b, 0x24,
	0x88, 0x4f, 0x26, 0x1b, 0x4c, 0x04, 0x2f, 0x96, 0x40, 0x20, 0x77, 0x63, 0x89, 0xce, 0xf6, 0xc9,
	0x39, 0xc5, 0xf6, 0x8b, 0xee, 0xae, 0x01, 0xff, 0x03, 0x46, 0x7e, 0x42, 0x67, 0xe6, 0xfe, 0x07,
	0x3a, 0x56, 0x65, 0x41, 0x0c, 0x06, 0x39, 0x0b, 0xff, 0x80, 0x15, 0xd9, 0x3e, 0xb7, 0x19, 0x18,
	0xdb, 0xc5, 0xf6, 0x7b, 0xef, 0xf3, 0xf7, 0xe9, 0xfb, 0xee, 0x1e, 0x1e, 0x65, 0x3c, 0x5d, 0x16,
	0x1f, 0x69, 0x41, 0x04, 0x93, 0x8a, 0x2e, 0x79, 0x9e, 0x90, 0xb5, 0x4b, 0x32, 0x88, 0x59, 0x2a,
	0x9d, 0x95, 0x00, 0x05, 0xe6, 0x83, 0x0e, 0xe3, 0x5c, 0x61, 0x9c, 0xb5, 0x7b, 0xb8, 0x4f, 0x33,
	0x9e, 0x03, 0x69, 0x9e, 0x2d, 0xf2, 0xf0, 0x61, 0x04, 0x32, 0x03, 0x39, 0x6f, 0x2a, 0xd2, 0x16,
	0x7a, 0x74, 0x90, 0x40, 0x02, 0x6d, 0xbf, 0xfe, 0xd2, 0x5d, 0xab, 0xc5, 0x90, 0x90, 0x4a, 0x46,
	0xd6, 0x6e, 0xc8, 0x14, 0x75, 0x49, 0x04, 0x3c, 0x6f, 0xe7, 0xa3, 0x6f, 0x08, 0xef, 0xbd, 0x07,
	0x48, 0x3d, 0x96, 0xb2, 0x84, 0x2a, 0x0e, 0xb9, 0xf9, 0x12, 0xdf, 0x3f, 0x91, 0x4c, 0xcc, 0x69,
	0x1c, 0x0b, 0x26, 0xe5, 0x10, 0x1d, 0xa1, 0x71, 0x7f, 0x36, 0xbc, 0x3c, 0x9b, 0x1c, 0x68, 0xc1,
	0x57, 0xed, 0xe4, 0x58, 0x09, 0x9e, 0x27, 0xc1, 0xa0, 0x46, 0xeb, 0x96, 0xf9, 0x04, 0xdf, 0x5d,
	0x01, 0xa4, 0x73, 0x1e, 0x0f, 0xef, 0x1c, 0xa1, 0xf1, 0xee, 0x0c, 0x57, 0xa5, 0xdd, 0xab, 0x15,
	0x7c, 0x2f, 0xe8, 0xd5, 0x23, 0x3f, 0x36, 0x7d, 0xdc, 0x93, 0x0b, 0x2a, 0x98, 0x1c, 0xee, 0x34,
	0xdc, 0xee, 0x79, 0x69, 0x1b, 0x3f, 0x4b, 0xfb, 0x51, 0xcb, 0x2f, 0xe3, 0xa5, 0xc3, 0x81, 0x64,
	0x54, 0x2d, 0x9c, 0x37, 0x2c, 0xa1, 0x51, 0xe1, 0xb1, 0xe8, 0xf2, 0x6c, 0x82, 0xb5, 0xbc, 0xc7,
	0xa2, 0x40, 0x13, 0xbc, 0xb8, 0xf7, 0xf9, 0xd4, 0x36, 0xfe, 0x9c, 0xda, 0xc6, 0xe8, 0x2f, 0xc2,
	0xe6, 0xbb, 0x15, 0x13, 0x54, 0x81, 0xb8, 0x29, 0x37, 0x04, 0x0f, 0x40, 0x53, 0x5e, 0x3b, 0xda,
	0xab, 0x4a, 0x1b, 0x77, 0x4a, 0xbe, 0x17, 0xe0, 0x0e, 0xe2, 0xc7, 0x26, 0xdf, 0x72, 0xb6, 0x33,
	0x1e, 0x3c, 0x7f, 0xec, 0x68, 0x91, 0x3a, 0x7f, 0x47, 0xe7, 0x5f, 0x1b, 0x78, 0x0d, 0x3c, 0x9f,
	0x4d, 0x6b, 0xdf, 0x5f, 0x7f, 0xd9, 0x4f, 0x13, 0xae, 0x16, 0x27, 0xa1, 0x13, 0x41, 0xa6, 0xcf,
	0x54, 0xbf, 0x26, 0x32, 0x5e, 0x12, 0x55, 0xac, 0x98, 0xec, 0xfe, 0x91, 0xff, 0x71, 0xfe, 0x1d,
	0xe1, 0xfd, 0x63, 0x26, 0xd6, 0x3c, 0x62, 0x37, 0x65, 0xfc, 0x19, 0xc6, 0xb2, 0x65, 0xbc, 0xf6,
	0xbd, 0x5b, 0x95, 0x76, 0x5f, 0xeb, 0xf8, 0x5e, 0xd0, 0xd7, 0x80, 0x5b, 0x3a, 0xcf, 0xd9, 0xdb,
	0xf3, 0xca, 0x42, 0x17, 0x95, 0x85, 0x7e, 0x57, 0x16, 0xfa, 0xb2, 0xb1, 0x8c, 0x8b, 0x8d, 0x65,
	0xfc, 0xd8, 0x58, 0xc6, 0x87, 0xe9, 0x56, 0x5c, 0xdd, 0xe6, 0x4c, 0x52, 0x1a, 0xca, 0xab, 0x8a,
	0x7c, 0xda, 0xda, 0xb6, 0x26, 0xbf, 0xb0, 0xd7, 0xdc, 0xf7, 0xe9, 0xbf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x89, 0xe1, 0x7c, 0x0f, 0x90, 0x03, 0x00, 0x00,
}

func (m *PoolDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PoolID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintModels(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OperatorDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.OperatorID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.OperatorID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintModels(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Shares.Size()
		i -= size
		if _, err := m.Shares.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ServiceID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintModels(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.PoolID != 0 {
		n += 1 + sovModels(uint64(m.PoolID))
	}
	l = m.Shares.Size()
	n += 1 + l + sovModels(uint64(l))
	return n
}

func (m *OperatorDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.OperatorID != 0 {
		n += 1 + sovModels(uint64(m.OperatorID))
	}
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *ServiceDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.ServiceID != 0 {
		n += 1 + sovModels(uint64(m.ServiceID))
	}
	l = m.Shares.Size()
	n += 1 + l + sovModels(uint64(l))
	return n
}

func sovModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorID", wireType)
			}
			m.OperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, types.DecCoin{})
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Shares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModels = fmt.Errorf("proto: unexpected end of group")
)
