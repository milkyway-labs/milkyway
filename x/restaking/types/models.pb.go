// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/restaking/v1/models.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DelegationType defines the type of delegation.
type DelegationType int32

const (
	DELEGATION_TYPE_UNSPECIFIED DelegationType = 0
	DELEGATION_TYPE_POOL        DelegationType = 1
	DELEGATION_TYPE_OPERATOR    DelegationType = 2
	DELEGATION_TYPE_SERVICE     DelegationType = 3
)

var DelegationType_name = map[int32]string{
	0: "DELEGATION_TYPE_UNSPECIFIED",
	1: "DELEGATION_TYPE_POOL",
	2: "DELEGATION_TYPE_OPERATOR",
	3: "DELEGATION_TYPE_SERVICE",
}

var DelegationType_value = map[string]int32{
	"DELEGATION_TYPE_UNSPECIFIED": 0,
	"DELEGATION_TYPE_POOL":        1,
	"DELEGATION_TYPE_OPERATOR":    2,
	"DELEGATION_TYPE_SERVICE":     3,
}

func (x DelegationType) String() string {
	return proto.EnumName(DelegationType_name, int32(x))
}

func (DelegationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_86f4cd48423b1e2f, []int{0}
}

// UnbondingDelegationType defines the type of an unbonding delegation.
type UnbondingDelegationType int32

const (
	UNBONDING_DELEGATION_TYPE_UNSPECIFIED UnbondingDelegationType = 0
	UNBONDING_DELEGATION_TYPE_POOL        UnbondingDelegationType = 1
	UNBONDING_DELEGATION_TYPE_OPERATOR    UnbondingDelegationType = 2
	UNBONDING_DELEGATION_TYPE_SERVICE     UnbondingDelegationType = 3
)

var UnbondingDelegationType_name = map[int32]string{
	0: "UNBONDING_DELEGATION_TYPE_UNSPECIFIED",
	1: "UNBONDING_DELEGATION_TYPE_POOL",
	2: "UNBONDING_DELEGATION_TYPE_OPERATOR",
	3: "UNBONDING_DELEGATION_TYPE_SERVICE",
}

var UnbondingDelegationType_value = map[string]int32{
	"UNBONDING_DELEGATION_TYPE_UNSPECIFIED": 0,
	"UNBONDING_DELEGATION_TYPE_POOL":        1,
	"UNBONDING_DELEGATION_TYPE_OPERATOR":    2,
	"UNBONDING_DELEGATION_TYPE_SERVICE":     3,
}

func (x UnbondingDelegationType) String() string {
	return proto.EnumName(UnbondingDelegationType_name, int32(x))
}

func (UnbondingDelegationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_86f4cd48423b1e2f, []int{1}
}

// OperatorParams represent the params that have been set for an individual
// operator.
type OperatorParams struct {
	// CommissionRate defines the commission rate charged to delegators, as a
	// fraction.
	CommissionRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=commission_rate,json=commissionRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"commission_rate"`
	// JoinedServicesIDs defines the list of service IDs that the operator has
	// joined.
	JoinedServicesIDs []uint32 `protobuf:"varint,2,rep,packed,name=joined_services_ids,json=joinedServicesIds,proto3" json:"joined_services_ids,omitempty"`
}

func (m *OperatorParams) Reset()         { *m = OperatorParams{} }
func (m *OperatorParams) String() string { return proto.CompactTextString(m) }
func (*OperatorParams) ProtoMessage()    {}
func (*OperatorParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_86f4cd48423b1e2f, []int{0}
}
func (m *OperatorParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorParams.Merge(m, src)
}
func (m *OperatorParams) XXX_Size() int {
	return m.Size()
}
func (m *OperatorParams) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorParams.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorParams proto.InternalMessageInfo

func (m *OperatorParams) GetJoinedServicesIDs() []uint32 {
	if m != nil {
		return m.JoinedServicesIDs
	}
	return nil
}

type ServiceParams struct {
	SlashFraction cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=slash_fraction,json=slashFraction,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"slash_fraction"`
	// WhitelistedPoolsIDs defines the list of pool IDs that are providing
	// cryptoeconomic security to the service.
	WhitelistedPoolsIDs []uint32 `protobuf:"varint,2,rep,packed,name=whitelisted_pools_ids,json=whitelistedPoolsIds,proto3" json:"whitelisted_pools_ids,omitempty"`
	// WhitelistedOperatorsIDs defines the list of operator IDs that are allowed
	// to validate this service.
	WhitelistedOperatorsIDs []uint32 `protobuf:"varint,3,rep,packed,name=whitelisted_operators_ids,json=whitelistedOperatorsIds,proto3" json:"whitelisted_operators_ids,omitempty"`
}

func (m *ServiceParams) Reset()         { *m = ServiceParams{} }
func (m *ServiceParams) String() string { return proto.CompactTextString(m) }
func (*ServiceParams) ProtoMessage()    {}
func (*ServiceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_86f4cd48423b1e2f, []int{1}
}
func (m *ServiceParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceParams.Merge(m, src)
}
func (m *ServiceParams) XXX_Size() int {
	return m.Size()
}
func (m *ServiceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceParams.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceParams proto.InternalMessageInfo

func (m *ServiceParams) GetWhitelistedPoolsIDs() []uint32 {
	if m != nil {
		return m.WhitelistedPoolsIDs
	}
	return nil
}

func (m *ServiceParams) GetWhitelistedOperatorsIDs() []uint32 {
	if m != nil {
		return m.WhitelistedOperatorsIDs
	}
	return nil
}

// Delegation represents the bond with tokens held by an account with a
// given target.
type Delegation struct {
	// Type is the type of delegation.
	Type DelegationType `protobuf:"varint,1,opt,name=type,proto3,enum=milkyway.restaking.v1.DelegationType" json:"type,omitempty"`
	// UserAddress is the encoded address of the user.
	UserAddress string `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// TargetID is the id of the target to which the delegation is associated
	// (pool, operator, service).
	TargetID uint32 `protobuf:"varint,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// Shares define the delegation shares received.
	Shares github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,4,rep,name=shares,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"shares"`
}

func (m *Delegation) Reset()         { *m = Delegation{} }
func (m *Delegation) String() string { return proto.CompactTextString(m) }
func (*Delegation) ProtoMessage()    {}
func (*Delegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_86f4cd48423b1e2f, []int{2}
}
func (m *Delegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegation.Merge(m, src)
}
func (m *Delegation) XXX_Size() int {
	return m.Size()
}
func (m *Delegation) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegation.DiscardUnknown(m)
}

var xxx_messageInfo_Delegation proto.InternalMessageInfo

// DelegationResponse is equivalent to Delegation except that it
// contains a balance in addition to shares which is more suitable for client
// responses.
type DelegationResponse struct {
	Delegation Delegation                               `protobuf:"bytes,1,opt,name=delegation,proto3" json:"delegation"`
	Balance    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balance"`
}

func (m *DelegationResponse) Reset()         { *m = DelegationResponse{} }
func (m *DelegationResponse) String() string { return proto.CompactTextString(m) }
func (*DelegationResponse) ProtoMessage()    {}
func (*DelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_86f4cd48423b1e2f, []int{3}
}
func (m *DelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationResponse.Merge(m, src)
}
func (m *DelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationResponse proto.InternalMessageInfo

func (m *DelegationResponse) GetDelegation() Delegation {
	if m != nil {
		return m.Delegation
	}
	return Delegation{}
}

func (m *DelegationResponse) GetBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balance
	}
	return nil
}

// UnbondingDelegation stores all of a single delegator's unbonding bonds
// for a single target in an time-ordered list.
type UnbondingDelegation struct {
	// Type is the type of the unbonding delegation.
	Type UnbondingDelegationType `protobuf:"varint,1,opt,name=type,proto3,enum=milkyway.restaking.v1.UnbondingDelegationType" json:"type,omitempty"`
	// DelegatorAddress is the encoded address of the delegator.
	DelegatorAddress string `protobuf:"bytes,2,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// TargetID is the ID of the target from which the tokens will be undelegated
	// (pool, service, operator)
	TargetID uint32 `protobuf:"varint,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// Entries are the unbonding delegation entries.
	Entries []UnbondingDelegationEntry `protobuf:"bytes,4,rep,name=entries,proto3" json:"entries"`
}

func (m *UnbondingDelegation) Reset()         { *m = UnbondingDelegation{} }
func (m *UnbondingDelegation) String() string { return proto.CompactTextString(m) }
func (*UnbondingDelegation) ProtoMessage()    {}
func (*UnbondingDelegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_86f4cd48423b1e2f, []int{4}
}
func (m *UnbondingDelegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingDelegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingDelegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingDelegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingDelegation.Merge(m, src)
}
func (m *UnbondingDelegation) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingDelegation) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingDelegation.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingDelegation proto.InternalMessageInfo

// UnbondingDelegationEntry defines an unbonding object with relevant metadata.
type UnbondingDelegationEntry struct {
	// CreationHeight is the height which the unbonding took place.
	CreationHeight int64 `protobuf:"varint,1,opt,name=creation_height,json=creationHeight,proto3" json:"creation_height,omitempty"`
	// CompletionTime is the unix time for unbonding completion.
	CompletionTime time.Time `protobuf:"bytes,2,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
	// InitialBalance defines the tokens initially scheduled to receive at
	// completion.
	InitialBalance github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=initial_balance,json=initialBalance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"initial_balance"`
	// Balance defines the tokens to receive at completion.
	Balance github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balance"`
	// Incrementing id that uniquely identifies this entry
	UnbondingId uint64 `protobuf:"varint,5,opt,name=unbonding_id,json=unbondingId,proto3" json:"unbonding_id,omitempty"`
}

func (m *UnbondingDelegationEntry) Reset()         { *m = UnbondingDelegationEntry{} }
func (m *UnbondingDelegationEntry) String() string { return proto.CompactTextString(m) }
func (*UnbondingDelegationEntry) ProtoMessage()    {}
func (*UnbondingDelegationEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_86f4cd48423b1e2f, []int{5}
}
func (m *UnbondingDelegationEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnbondingDelegationEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnbondingDelegationEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnbondingDelegationEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnbondingDelegationEntry.Merge(m, src)
}
func (m *UnbondingDelegationEntry) XXX_Size() int {
	return m.Size()
}
func (m *UnbondingDelegationEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UnbondingDelegationEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UnbondingDelegationEntry proto.InternalMessageInfo

func (m *UnbondingDelegationEntry) GetCreationHeight() int64 {
	if m != nil {
		return m.CreationHeight
	}
	return 0
}

func (m *UnbondingDelegationEntry) GetCompletionTime() time.Time {
	if m != nil {
		return m.CompletionTime
	}
	return time.Time{}
}

func (m *UnbondingDelegationEntry) GetInitialBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.InitialBalance
	}
	return nil
}

func (m *UnbondingDelegationEntry) GetBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *UnbondingDelegationEntry) GetUnbondingId() uint64 {
	if m != nil {
		return m.UnbondingId
	}
	return 0
}

func init() {
	proto.RegisterEnum("milkyway.restaking.v1.DelegationType", DelegationType_name, DelegationType_value)
	proto.RegisterEnum("milkyway.restaking.v1.UnbondingDelegationType", UnbondingDelegationType_name, UnbondingDelegationType_value)
	proto.RegisterType((*OperatorParams)(nil), "milkyway.restaking.v1.OperatorParams")
	proto.RegisterType((*ServiceParams)(nil), "milkyway.restaking.v1.ServiceParams")
	proto.RegisterType((*Delegation)(nil), "milkyway.restaking.v1.Delegation")
	proto.RegisterType((*DelegationResponse)(nil), "milkyway.restaking.v1.DelegationResponse")
	proto.RegisterType((*UnbondingDelegation)(nil), "milkyway.restaking.v1.UnbondingDelegation")
	proto.RegisterType((*UnbondingDelegationEntry)(nil), "milkyway.restaking.v1.UnbondingDelegationEntry")
}

func init() {
	proto.RegisterFile("milkyway/restaking/v1/models.proto", fileDescriptor_86f4cd48423b1e2f)
}

var fileDescriptor_86f4cd48423b1e2f = []byte{
	// 1000 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0x8e, 0x9b, 0xb0, 0xdb, 0x4e, 0xda, 0xb4, 0x9d, 0xb6, 0x6a, 0xda, 0xae, 0xe2, 0x36, 0xa8,
	0x90, 0x2d, 0xaa, 0x4d, 0xdb, 0x13, 0xcb, 0xa9, 0x6e, 0xbc, 0x4b, 0x96, 0xd2, 0x44, 0x6e, 0xca,
	0x0a, 0x2e, 0xd6, 0xc4, 0x9e, 0x75, 0x66, 0x6b, 0x7b, 0x22, 0xcf, 0xb4, 0x25, 0x47, 0x6e, 0x7b,
	0xe0, 0xb0, 0x7f, 0x00, 0x69, 0x25, 0x40, 0x42, 0x70, 0xe1, 0xc0, 0x95, 0xfb, 0xde, 0x58, 0x71,
	0x42, 0x1c, 0xb2, 0x28, 0x3d, 0xc0, 0xcf, 0x40, 0x1e, 0xdb, 0x89, 0x1b, 0x35, 0x50, 0x10, 0x7b,
	0x49, 0x32, 0xef, 0x7d, 0xef, 0xf9, 0xfb, 0xde, 0xfb, 0x3c, 0x0a, 0x28, 0x7b, 0xc4, 0x3d, 0xed,
	0x5e, 0xa0, 0xae, 0x1a, 0x60, 0xc6, 0xd1, 0x29, 0xf1, 0x1d, 0xf5, 0x7c, 0x47, 0xf5, 0xa8, 0x8d,
	0x5d, 0xa6, 0x74, 0x02, 0xca, 0x29, 0x5c, 0x4a, 0x30, 0xca, 0x00, 0xa3, 0x9c, 0xef, 0xac, 0x2e,
	0x3a, 0xd4, 0xa1, 0x02, 0xa1, 0x86, 0xbf, 0x22, 0xf0, 0xaa, 0xec, 0x50, 0xea, 0xb8, 0x58, 0x15,
	0xa7, 0xd6, 0xd9, 0x63, 0x95, 0x13, 0x2f, 0xac, 0xf2, 0x3a, 0x31, 0x60, 0x1e, 0x79, 0xc4, 0xa7,
	0xaa, 0xf8, 0x8c, 0x43, 0x2b, 0x16, 0x65, 0x1e, 0x65, 0x66, 0xd4, 0x2c, 0x3a, 0xc4, 0xa9, 0x52,
	0x74, 0x52, 0x5b, 0x88, 0x61, 0xf5, 0x7c, 0xa7, 0x85, 0x39, 0xda, 0x51, 0x2d, 0x4a, 0xfc, 0x28,
	0x5f, 0xfe, 0x46, 0x02, 0x85, 0x7a, 0x07, 0x07, 0x88, 0xd3, 0xa0, 0x81, 0x02, 0xe4, 0x31, 0x78,
	0x08, 0x66, 0x2d, 0xea, 0x79, 0x84, 0x31, 0x42, 0x7d, 0x33, 0x40, 0x1c, 0x17, 0xa5, 0x75, 0xa9,
	0x32, 0xa5, 0xbd, 0xf9, 0xa2, 0x27, 0x67, 0x7e, 0xeb, 0xc9, 0x6b, 0x51, 0x4f, 0x66, 0x9f, 0x2a,
	0x84, 0xaa, 0x1e, 0xe2, 0x6d, 0xe5, 0x10, 0x3b, 0xc8, 0xea, 0x56, 0xb1, 0x65, 0x14, 0x86, 0xb5,
	0x06, 0xe2, 0x18, 0xea, 0x60, 0xe1, 0x09, 0x25, 0x3e, 0xb6, 0x4d, 0x86, 0x83, 0x73, 0x62, 0x61,
	0x66, 0x12, 0x9b, 0x15, 0x27, 0xd6, 0xb3, 0x95, 0x19, 0x6d, 0xa9, 0xdf, 0x93, 0xe7, 0x1f, 0x8a,
	0xf4, 0x71, 0x9c, 0xad, 0x55, 0x99, 0x31, 0xff, 0xe4, 0x6a, 0xc8, 0x66, 0xe5, 0xcf, 0x27, 0xc0,
	0x4c, 0x7c, 0x8e, 0x69, 0x3e, 0x04, 0x05, 0xe6, 0x22, 0xd6, 0x36, 0x1f, 0x07, 0xc8, 0xe2, 0x84,
	0xfa, 0xff, 0x86, 0xe5, 0x8c, 0x28, 0xbd, 0x1f, 0x57, 0xc2, 0x0f, 0xc1, 0xd2, 0x45, 0x9b, 0x70,
	0xec, 0x12, 0xc6, 0xb1, 0x6d, 0x76, 0x28, 0x75, 0xd3, 0x34, 0x97, 0xfb, 0x3d, 0x79, 0xe1, 0xd1,
	0x10, 0xd0, 0x08, 0xf3, 0x21, 0xd1, 0x85, 0x8b, 0xd1, 0xa0, 0xcd, 0xe0, 0x23, 0xb0, 0x92, 0x6e,
	0x46, 0xe3, 0xe9, 0x46, 0x0d, 0xb3, 0xa2, 0xe1, 0x5a, 0xbf, 0x27, 0x2f, 0xa7, 0x1a, 0x26, 0x1b,
	0x10, 0x4d, 0x97, 0x2f, 0xae, 0x4b, 0xd8, 0xac, 0xfc, 0xf5, 0x04, 0x00, 0x55, 0xec, 0x62, 0x07,
	0x09, 0xd2, 0xef, 0x81, 0x1c, 0xef, 0x76, 0xa2, 0xe5, 0x14, 0x76, 0x37, 0x95, 0x6b, 0x5d, 0xa6,
	0x0c, 0x0b, 0x9a, 0xdd, 0x0e, 0x36, 0x44, 0x09, 0x7c, 0x1f, 0x4c, 0x9f, 0x31, 0x1c, 0x98, 0xc8,
	0xb6, 0x03, 0xcc, 0x42, 0x99, 0xe1, 0xe4, 0x8a, 0xbf, 0xfc, 0xb8, 0xbd, 0x18, 0xbb, 0x67, 0x3f,
	0xca, 0x1c, 0xf3, 0x80, 0xf8, 0x8e, 0x91, 0x0f, 0xd1, 0x71, 0x08, 0xde, 0x05, 0x53, 0x1c, 0x05,
	0x0e, 0xe6, 0x26, 0xb1, 0x8b, 0xd9, 0x75, 0xa9, 0x32, 0xa3, 0x4d, 0xf7, 0x7b, 0xf2, 0x64, 0x53,
	0x04, 0x6b, 0x55, 0x63, 0x32, 0x4a, 0xd7, 0x6c, 0x48, 0xc0, 0x2d, 0xd6, 0x46, 0x01, 0x66, 0xc5,
	0xdc, 0x7a, 0xb6, 0x92, 0xdf, 0xbd, 0xa3, 0xc4, 0xed, 0x43, 0x3b, 0x2a, 0xb1, 0x1d, 0x95, 0x2a,
	0xb6, 0x0e, 0x28, 0xf1, 0xb5, 0xbd, 0x70, 0x73, 0xdf, 0xbd, 0x92, 0xdf, 0x71, 0x08, 0x6f, 0x9f,
	0xb5, 0x14, 0x8b, 0x7a, 0xb1, 0x99, 0xe3, 0xaf, 0x6d, 0x66, 0x9f, 0xaa, 0xa1, 0x00, 0x96, 0xd4,
	0x30, 0x23, 0x7e, 0xc0, 0xbd, 0xc9, 0xa7, 0xcf, 0xe5, 0xcc, 0x9f, 0xcf, 0xe5, 0x4c, 0xf9, 0x67,
	0x09, 0xc0, 0xa1, 0x6a, 0x03, 0xb3, 0x0e, 0xf5, 0x19, 0x86, 0x87, 0x00, 0xd8, 0x83, 0xa8, 0x18,
	0x5a, 0x7e, 0x77, 0xe3, 0x1f, 0x87, 0xa6, 0x4d, 0x85, 0xa4, 0xbe, 0xfd, 0xe3, 0x87, 0x2d, 0xc9,
	0x48, 0xd5, 0x43, 0x0c, 0x6e, 0xb7, 0x90, 0x8b, 0x7c, 0x0b, 0x0b, 0x8f, 0xe4, 0x77, 0x57, 0xae,
	0x95, 0x26, 0x74, 0xbd, 0x1b, 0xeb, 0xaa, 0xdc, 0x40, 0x57, 0x24, 0x2a, 0xe9, 0x7d, 0x2f, 0x27,
	0x14, 0x7d, 0x3f, 0x01, 0x16, 0x4e, 0xfc, 0x16, 0xf5, 0x6d, 0xe2, 0x3b, 0x29, 0x07, 0x68, 0x57,
	0x1c, 0xa0, 0x8c, 0x11, 0x73, 0x4d, 0x65, 0xca, 0x0a, 0x3a, 0x98, 0x8f, 0x65, 0xd1, 0x9b, 0xfb,
	0x61, 0x6e, 0x50, 0xf2, 0x1f, 0x4c, 0xd1, 0x04, 0xb7, 0xb1, 0xcf, 0x03, 0x32, 0x70, 0x85, 0x7a,
	0x73, 0xe2, 0xba, 0xcf, 0x83, 0x6e, 0x7a, 0x27, 0x49, 0xab, 0xd4, 0xfe, 0xbf, 0xcc, 0x82, 0xe2,
	0xb8, 0x52, 0xf8, 0x36, 0x98, 0xb5, 0x02, 0x2c, 0x02, 0x66, 0x1b, 0x13, 0xa7, 0xcd, 0xc5, 0xf4,
	0xb2, 0x46, 0x21, 0x09, 0x7f, 0x20, 0xa2, 0xd0, 0x10, 0xb7, 0x60, 0xc7, 0xc5, 0x02, 0x1a, 0x5e,
	0xc2, 0x62, 0x2a, 0xf9, 0xdd, 0x55, 0x25, 0xba, 0xa1, 0x95, 0xe4, 0x86, 0x56, 0x9a, 0xc9, 0x0d,
	0xad, 0xcd, 0x84, 0xc4, 0x9e, 0xbd, 0x92, 0xa5, 0x88, 0x5c, 0x61, 0xd8, 0x21, 0xc4, 0x40, 0x0e,
	0x66, 0x89, 0x4f, 0x38, 0x41, 0xae, 0x99, 0x98, 0x27, 0xfb, 0xff, 0x9b, 0xa7, 0x10, 0x3f, 0x43,
	0x8b, 0x1e, 0x91, 0xb6, 0x6a, 0xee, 0xf5, 0x59, 0x15, 0x6e, 0x80, 0xe9, 0xb3, 0x64, 0xea, 0xa1,
	0x09, 0xde, 0x58, 0x97, 0x2a, 0x39, 0x23, 0x3f, 0x88, 0xd5, 0x6c, 0xe1, 0x66, 0x69, 0xeb, 0x0b,
	0x09, 0x14, 0xae, 0x5a, 0x11, 0xca, 0x60, 0xad, 0xaa, 0x1f, 0xea, 0x0f, 0xf6, 0x9b, 0xb5, 0xfa,
	0x91, 0xd9, 0xfc, 0xa4, 0xa1, 0x9b, 0x27, 0x47, 0xc7, 0x0d, 0xfd, 0xa0, 0x76, 0xbf, 0xa6, 0x57,
	0xe7, 0x32, 0xb0, 0x08, 0x16, 0x47, 0x01, 0x8d, 0x7a, 0xfd, 0x70, 0x4e, 0x82, 0x77, 0x40, 0x71,
	0x34, 0x53, 0x6f, 0xe8, 0xc6, 0x7e, 0xb3, 0x6e, 0xcc, 0x4d, 0xc0, 0x35, 0xb0, 0x3c, 0x9a, 0x3d,
	0xd6, 0x8d, 0x8f, 0x6b, 0x07, 0xfa, 0x5c, 0x76, 0x35, 0xf7, 0xf4, 0xab, 0x52, 0x66, 0xeb, 0x27,
	0x09, 0x2c, 0x8f, 0x79, 0x45, 0xe0, 0x5d, 0xb0, 0x79, 0x72, 0xa4, 0xd5, 0x8f, 0xaa, 0xb5, 0xa3,
	0x07, 0xe6, 0xdf, 0x33, 0x2c, 0x83, 0xd2, 0x78, 0x68, 0xcc, 0xf5, 0x2d, 0x50, 0x1e, 0x8f, 0x49,
	0xb1, 0xde, 0x04, 0x1b, 0xe3, 0x71, 0x23, 0xfc, 0xb5, 0x8f, 0x5e, 0xf4, 0x4b, 0xd2, 0xcb, 0x7e,
	0x49, 0xfa, 0xbd, 0x5f, 0x92, 0x9e, 0x5d, 0x96, 0x32, 0x2f, 0x2f, 0x4b, 0x99, 0x5f, 0x2f, 0x4b,
	0x99, 0x4f, 0xf7, 0x52, 0x4b, 0x4c, 0xde, 0xb0, 0x6d, 0x17, 0xb5, 0xd8, 0xe0, 0xa4, 0x7e, 0x96,
	0xfa, 0xdb, 0x22, 0xb6, 0xda, 0xba, 0x25, 0x6c, 0xbd, 0xf7, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xcb, 0xf2, 0x6c, 0xa1, 0xd9, 0x08, 0x00, 0x00,
}

func (this *UnbondingDelegationEntry) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UnbondingDelegationEntry)
	if !ok {
		that2, ok := that.(UnbondingDelegationEntry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CreationHeight != that1.CreationHeight {
		return false
	}
	if !this.CompletionTime.Equal(that1.CompletionTime) {
		return false
	}
	if len(this.InitialBalance) != len(that1.InitialBalance) {
		return false
	}
	for i := range this.InitialBalance {
		if !this.InitialBalance[i].Equal(&that1.InitialBalance[i]) {
			return false
		}
	}
	if len(this.Balance) != len(that1.Balance) {
		return false
	}
	for i := range this.Balance {
		if !this.Balance[i].Equal(&that1.Balance[i]) {
			return false
		}
	}
	if this.UnbondingId != that1.UnbondingId {
		return false
	}
	return true
}
func (m *OperatorParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JoinedServicesIDs) > 0 {
		dAtA2 := make([]byte, len(m.JoinedServicesIDs)*10)
		var j1 int
		for _, num := range m.JoinedServicesIDs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintModels(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.CommissionRate.Size()
		i -= size
		if _, err := m.CommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ServiceParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhitelistedOperatorsIDs) > 0 {
		dAtA4 := make([]byte, len(m.WhitelistedOperatorsIDs)*10)
		var j3 int
		for _, num := range m.WhitelistedOperatorsIDs {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintModels(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WhitelistedPoolsIDs) > 0 {
		dAtA6 := make([]byte, len(m.WhitelistedPoolsIDs)*10)
		var j5 int
		for _, num := range m.WhitelistedPoolsIDs {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintModels(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.SlashFraction.Size()
		i -= size
		if _, err := m.SlashFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Delegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TargetID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.TargetID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintModels(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Delegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *UnbondingDelegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingDelegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingDelegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Entries) > 0 {
		for iNdEx := len(m.Entries) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Entries[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TargetID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.TargetID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintModels(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnbondingDelegationEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnbondingDelegationEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnbondingDelegationEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UnbondingId != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.UnbondingId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.InitialBalance) > 0 {
		for iNdEx := len(m.InitialBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InitialBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	n8, err8 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime):])
	if err8 != nil {
		return 0, err8
	}
	i -= n8
	i = encodeVarintModels(dAtA, i, uint64(n8))
	i--
	dAtA[i] = 0x12
	if m.CreationHeight != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.CreationHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *OperatorParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommissionRate.Size()
	n += 1 + l + sovModels(uint64(l))
	if len(m.JoinedServicesIDs) > 0 {
		l = 0
		for _, e := range m.JoinedServicesIDs {
			l += sovModels(uint64(e))
		}
		n += 1 + sovModels(uint64(l)) + l
	}
	return n
}

func (m *ServiceParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SlashFraction.Size()
	n += 1 + l + sovModels(uint64(l))
	if len(m.WhitelistedPoolsIDs) > 0 {
		l = 0
		for _, e := range m.WhitelistedPoolsIDs {
			l += sovModels(uint64(e))
		}
		n += 1 + sovModels(uint64(l)) + l
	}
	if len(m.WhitelistedOperatorsIDs) > 0 {
		l = 0
		for _, e := range m.WhitelistedOperatorsIDs {
			l += sovModels(uint64(e))
		}
		n += 1 + sovModels(uint64(l)) + l
	}
	return n
}

func (m *Delegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovModels(uint64(m.Type))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.TargetID != 0 {
		n += 1 + sovModels(uint64(m.TargetID))
	}
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *DelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Delegation.Size()
	n += 1 + l + sovModels(uint64(l))
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *UnbondingDelegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovModels(uint64(m.Type))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.TargetID != 0 {
		n += 1 + sovModels(uint64(m.TargetID))
	}
	if len(m.Entries) > 0 {
		for _, e := range m.Entries {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *UnbondingDelegationEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CreationHeight != 0 {
		n += 1 + sovModels(uint64(m.CreationHeight))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovModels(uint64(l))
	if len(m.InitialBalance) > 0 {
		for _, e := range m.InitialBalance {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.UnbondingId != 0 {
		n += 1 + sovModels(uint64(m.UnbondingId))
	}
	return n
}

func sovModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *OperatorParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.JoinedServicesIDs = append(m.JoinedServicesIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.JoinedServicesIDs) == 0 {
					m.JoinedServicesIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.JoinedServicesIDs = append(m.JoinedServicesIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinedServicesIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WhitelistedPoolsIDs = append(m.WhitelistedPoolsIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WhitelistedPoolsIDs) == 0 {
					m.WhitelistedPoolsIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WhitelistedPoolsIDs = append(m.WhitelistedPoolsIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedPoolsIDs", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WhitelistedOperatorsIDs = append(m.WhitelistedOperatorsIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WhitelistedOperatorsIDs) == 0 {
					m.WhitelistedOperatorsIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WhitelistedOperatorsIDs = append(m.WhitelistedOperatorsIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedOperatorsIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DelegationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			m.TargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, types.DecCoin{})
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, types.Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingDelegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingDelegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingDelegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= UnbondingDelegationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			m.TargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Entries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Entries = append(m.Entries, UnbondingDelegationEntry{})
			if err := m.Entries[len(m.Entries)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnbondingDelegationEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnbondingDelegationEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnbondingDelegationEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreationHeight", wireType)
			}
			m.CreationHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreationHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InitialBalance = append(m.InitialBalance, types.Coin{})
			if err := m.InitialBalance[len(m.InitialBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, types.Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingId", wireType)
			}
			m.UnbondingId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnbondingId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModels = fmt.Errorf("proto: unexpected end of group")
)
