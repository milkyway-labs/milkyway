// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/restaking/v1/models.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DelegationType defines the type of delegation.
type DelegationType int32

const (
	DELEGATION_TYPE_UNSPECIFIED DelegationType = 0
	DELEGATION_TYPE_POOL        DelegationType = 1
	DELEGATION_TYPE_OPERATOR    DelegationType = 2
	DELEGATION_TYPE_SERVICE     DelegationType = 3
)

var DelegationType_name = map[int32]string{
	0: "DELEGATION_TYPE_UNSPECIFIED",
	1: "DELEGATION_TYPE_POOL",
	2: "DELEGATION_TYPE_OPERATOR",
	3: "DELEGATION_TYPE_SERVICE",
}

var DelegationType_value = map[string]int32{
	"DELEGATION_TYPE_UNSPECIFIED": 0,
	"DELEGATION_TYPE_POOL":        1,
	"DELEGATION_TYPE_OPERATOR":    2,
	"DELEGATION_TYPE_SERVICE":     3,
}

func (x DelegationType) String() string {
	return proto.EnumName(DelegationType_name, int32(x))
}

func (DelegationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_86f4cd48423b1e2f, []int{0}
}

// Delegation represents the bond with tokens held by an account with a
// given target.
type Delegation struct {
	// Type is the type of delegation.
	Type DelegationType `protobuf:"varint,1,opt,name=type,proto3,enum=milkyway.restaking.v1.DelegationType" json:"type,omitempty"`
	// UserAddress is the encoded address of the user.
	UserAddress string `protobuf:"bytes,2,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// TargetID is the id of the target to which the delegation is associated
	// (pool, operator, service).
	TargetID uint32 `protobuf:"varint,3,opt,name=target_id,json=targetId,proto3" json:"target_id,omitempty"`
	// Shares define the delegation shares received.
	Shares github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,4,rep,name=shares,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"shares"`
}

func (m *Delegation) Reset()         { *m = Delegation{} }
func (m *Delegation) String() string { return proto.CompactTextString(m) }
func (*Delegation) ProtoMessage()    {}
func (*Delegation) Descriptor() ([]byte, []int) {
	return fileDescriptor_86f4cd48423b1e2f, []int{0}
}
func (m *Delegation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegation.Merge(m, src)
}
func (m *Delegation) XXX_Size() int {
	return m.Size()
}
func (m *Delegation) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegation.DiscardUnknown(m)
}

var xxx_messageInfo_Delegation proto.InternalMessageInfo

// DelegationResponse is equivalent to Delegation except that it
// contains a balance in addition to shares which is more suitable for client
// responses.
type DelegationResponse struct {
	Delegation Delegation                               `protobuf:"bytes,1,opt,name=delegation,proto3" json:"delegation"`
	Balance    github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balance"`
}

func (m *DelegationResponse) Reset()         { *m = DelegationResponse{} }
func (m *DelegationResponse) String() string { return proto.CompactTextString(m) }
func (*DelegationResponse) ProtoMessage()    {}
func (*DelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_86f4cd48423b1e2f, []int{1}
}
func (m *DelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationResponse.Merge(m, src)
}
func (m *DelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationResponse proto.InternalMessageInfo

func (m *DelegationResponse) GetDelegation() Delegation {
	if m != nil {
		return m.Delegation
	}
	return Delegation{}
}

func (m *DelegationResponse) GetBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balance
	}
	return nil
}

func init() {
	proto.RegisterEnum("milkyway.restaking.v1.DelegationType", DelegationType_name, DelegationType_value)
	proto.RegisterType((*Delegation)(nil), "milkyway.restaking.v1.Delegation")
	proto.RegisterType((*DelegationResponse)(nil), "milkyway.restaking.v1.DelegationResponse")
}

func init() {
	proto.RegisterFile("milkyway/restaking/v1/models.proto", fileDescriptor_86f4cd48423b1e2f)
}

var fileDescriptor_86f4cd48423b1e2f = []byte{
	// 551 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x8f, 0xd2, 0x40,
	0x18, 0xc6, 0x3b, 0x40, 0x56, 0x18, 0xd6, 0x0d, 0x4e, 0x30, 0x76, 0xd9, 0x4d, 0x8b, 0x24, 0x26,
	0xb8, 0x86, 0x56, 0xe0, 0xe4, 0x7a, 0xe2, 0x4f, 0x35, 0x4d, 0x70, 0x21, 0x05, 0x4d, 0xf4, 0x42,
	0xa6, 0x74, 0xd2, 0x6d, 0x80, 0x0e, 0xe9, 0x74, 0x51, 0xbe, 0xc1, 0x1e, 0x3c, 0xf8, 0x11, 0x36,
	0xd1, 0x83, 0xf1, 0xe4, 0xc1, 0x0f, 0xb1, 0x37, 0x37, 0x9e, 0x3c, 0xad, 0x06, 0x0e, 0xfa, 0x31,
	0x4c, 0xdb, 0x81, 0x45, 0xb2, 0x89, 0x5e, 0xa0, 0xef, 0xf3, 0x3c, 0xef, 0xf4, 0xfd, 0xbd, 0x6d,
	0x61, 0x61, 0xec, 0x8c, 0x86, 0xb3, 0xd7, 0x78, 0xa6, 0x7a, 0x84, 0xf9, 0x78, 0xe8, 0xb8, 0xb6,
	0x3a, 0x2d, 0xab, 0x63, 0x6a, 0x91, 0x11, 0x53, 0x26, 0x1e, 0xf5, 0x29, 0xba, 0xbd, 0xcc, 0x28,
	0xab, 0x8c, 0x32, 0x2d, 0xe7, 0x6e, 0xe1, 0xb1, 0xe3, 0x52, 0x35, 0xfc, 0x8d, 0x92, 0xb9, 0xdd,
	0x01, 0x65, 0x63, 0xca, 0xfa, 0x61, 0xa5, 0x46, 0x05, 0xb7, 0xb2, 0x36, 0xb5, 0x69, 0xa4, 0x07,
	0x57, 0x5c, 0x95, 0xa2, 0x8c, 0x6a, 0x62, 0x46, 0xd4, 0x69, 0xd9, 0x24, 0x3e, 0x2e, 0xab, 0x03,
	0xea, 0xb8, 0x91, 0x5f, 0xf8, 0x10, 0x83, 0xb0, 0x49, 0x46, 0xc4, 0xc6, 0xbe, 0x43, 0x5d, 0xf4,
	0x08, 0x26, 0xfc, 0xd9, 0x84, 0x88, 0x20, 0x0f, 0x8a, 0x3b, 0x95, 0x7b, 0xca, 0xb5, 0x83, 0x29,
	0x57, 0x0d, 0xbd, 0xd9, 0x84, 0x18, 0x61, 0x0b, 0x7a, 0x0c, 0xb7, 0x4f, 0x18, 0xf1, 0xfa, 0xd8,
	0xb2, 0x3c, 0xc2, 0x98, 0x18, 0xcb, 0x83, 0x62, 0xaa, 0x2e, 0x7e, 0xfb, 0x52, 0xca, 0xf2, 0x39,
	0x6b, 0x91, 0xd3, 0xf5, 0x3d, 0xc7, 0xb5, 0x8d, 0x74, 0x90, 0xe6, 0x12, 0xba, 0x0f, 0x53, 0x3e,
	0xf6, 0x6c, 0xe2, 0xf7, 0x1d, 0x4b, 0x8c, 0xe7, 0x41, 0xf1, 0x66, 0x7d, 0x7b, 0x7e, 0x29, 0x27,
	0x7b, 0xa1, 0xa8, 0x37, 0x8d, 0x64, 0x64, 0xeb, 0x16, 0x72, 0xe0, 0x16, 0x3b, 0xc6, 0x1e, 0x61,
	0x62, 0x22, 0x1f, 0x2f, 0xa6, 0x2b, 0xfb, 0x0a, 0x3f, 0x3e, 0x40, 0x54, 0x38, 0xa2, 0xd2, 0x24,
	0x83, 0x06, 0x75, 0xdc, 0x7a, 0xf5, 0xfc, 0x52, 0x16, 0x3e, 0xfd, 0x90, 0x1f, 0xd8, 0x8e, 0x7f,
	0x7c, 0x62, 0x2a, 0x03, 0x3a, 0xe6, 0x6b, 0xe3, 0x7f, 0x25, 0x66, 0x0d, 0xd5, 0x00, 0x80, 0x2d,
	0x7b, 0x98, 0xc1, 0x6f, 0x70, 0x98, 0x3c, 0x3d, 0x93, 0x85, 0xdf, 0x67, 0xb2, 0x50, 0xf8, 0x0a,
	0x20, 0xba, 0xa2, 0x36, 0x08, 0x9b, 0x50, 0x97, 0x11, 0xd4, 0x82, 0xd0, 0x5a, 0xa9, 0xe1, 0xd2,
	0xd2, 0x95, 0xbb, 0xff, 0x5c, 0x5a, 0x3d, 0x15, 0x0c, 0xf5, 0xf1, 0xd7, 0xe7, 0x03, 0x60, 0xac,
	0xf5, 0x23, 0x02, 0x6f, 0x98, 0x78, 0x84, 0xdd, 0x01, 0x11, 0x63, 0x21, 0xda, 0xee, 0xb5, 0x68,
	0x21, 0xd7, 0x43, 0xce, 0x55, 0xfc, 0x0f, 0xae, 0x08, 0x6a, 0x79, 0xf6, 0x61, 0x22, 0x20, 0x3a,
	0x78, 0x0b, 0xe0, 0xce, 0xdf, 0xcf, 0x11, 0xc9, 0x70, 0xaf, 0xa9, 0xb5, 0xb4, 0xa7, 0xb5, 0x9e,
	0xde, 0x3e, 0xea, 0xf7, 0x5e, 0x76, 0xb4, 0xfe, 0xf3, 0xa3, 0x6e, 0x47, 0x6b, 0xe8, 0x4f, 0x74,
	0xad, 0x99, 0x11, 0x90, 0x08, 0xb3, 0x9b, 0x81, 0x4e, 0xbb, 0xdd, 0xca, 0x00, 0xb4, 0x0f, 0xc5,
	0x4d, 0xa7, 0xdd, 0xd1, 0x8c, 0x5a, 0xaf, 0x6d, 0x64, 0x62, 0x68, 0x0f, 0xde, 0xd9, 0x74, 0xbb,
	0x9a, 0xf1, 0x42, 0x6f, 0x68, 0x99, 0x78, 0x2e, 0x71, 0xfa, 0x5e, 0x12, 0xea, 0xcf, 0xce, 0xe7,
	0x12, 0xb8, 0x98, 0x4b, 0xe0, 0xe7, 0x5c, 0x02, 0xef, 0x16, 0x92, 0x70, 0xb1, 0x90, 0x84, 0xef,
	0x0b, 0x49, 0x78, 0x55, 0x5d, 0x23, 0x5c, 0x6e, 0xb6, 0x34, 0xc2, 0x26, 0x5b, 0x55, 0xea, 0x9b,
	0xb5, 0x6f, 0x2b, 0x44, 0x36, 0xb7, 0xc2, 0xb7, 0xbb, 0xfa, 0x27, 0x00, 0x00, 0xff, 0xff, 0x17,
	0xb7, 0x70, 0x19, 0x7e, 0x03, 0x00, 0x00,
}

func (m *Delegation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TargetID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.TargetID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintModels(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Delegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Delegation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovModels(uint64(m.Type))
	}
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.TargetID != 0 {
		n += 1 + sovModels(uint64(m.TargetID))
	}
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *DelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Delegation.Size()
	n += 1 + l + sovModels(uint64(l))
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func sovModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Delegation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DelegationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetID", wireType)
			}
			m.TargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TargetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, types.DecCoin{})
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, types.Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModels = fmt.Errorf("proto: unexpected end of group")
)
