// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/restaking/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types1 "github.com/milkyway-labs/milkyway/x/operators/types"
	types "github.com/milkyway-labs/milkyway/x/pools/types"
	types2 "github.com/milkyway-labs/milkyway/x/services/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryOperatorJoinedServicesRequest is request type for the
// Query/OperatorJoinedServices RPC method.
type QueryOperatorJoinedServicesRequest struct {
	// OperatorId is the ID of the operator to query
	OperatorId uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (m *QueryOperatorJoinedServicesRequest) Reset()         { *m = QueryOperatorJoinedServicesRequest{} }
func (m *QueryOperatorJoinedServicesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorJoinedServicesRequest) ProtoMessage()    {}
func (*QueryOperatorJoinedServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{0}
}
func (m *QueryOperatorJoinedServicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorJoinedServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorJoinedServicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorJoinedServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorJoinedServicesRequest.Merge(m, src)
}
func (m *QueryOperatorJoinedServicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorJoinedServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorJoinedServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorJoinedServicesRequest proto.InternalMessageInfo

func (m *QueryOperatorJoinedServicesRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

// QueryOperatorJoinedServicesResponse is response type for the
// Query/OperatorJoinedServices RPC method.
type QueryOperatorJoinedServicesResponse struct {
	ServiceIds []uint32 `protobuf:"varint,1,rep,packed,name=service_ids,json=serviceIds,proto3" json:"service_ids,omitempty"`
}

func (m *QueryOperatorJoinedServicesResponse) Reset()         { *m = QueryOperatorJoinedServicesResponse{} }
func (m *QueryOperatorJoinedServicesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorJoinedServicesResponse) ProtoMessage()    {}
func (*QueryOperatorJoinedServicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{1}
}
func (m *QueryOperatorJoinedServicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorJoinedServicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorJoinedServicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorJoinedServicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorJoinedServicesResponse.Merge(m, src)
}
func (m *QueryOperatorJoinedServicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorJoinedServicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorJoinedServicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorJoinedServicesResponse proto.InternalMessageInfo

func (m *QueryOperatorJoinedServicesResponse) GetServiceIds() []uint32 {
	if m != nil {
		return m.ServiceIds
	}
	return nil
}

// QueryServiceParamsRequest is request type for the Query/ServiceParams
// RPC method.
type QueryServiceParamsRequest struct {
	// ServiceId is the ID of the service to query
	ServiceId uint32 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (m *QueryServiceParamsRequest) Reset()         { *m = QueryServiceParamsRequest{} }
func (m *QueryServiceParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceParamsRequest) ProtoMessage()    {}
func (*QueryServiceParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{2}
}
func (m *QueryServiceParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceParamsRequest.Merge(m, src)
}
func (m *QueryServiceParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceParamsRequest proto.InternalMessageInfo

func (m *QueryServiceParamsRequest) GetServiceId() uint32 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

// QueryServiceParamsResponse is response type for the Query/ServiceParams
// RPC method.
type QueryServiceParamsResponse struct {
	ServiceParams ServiceParams `protobuf:"bytes,1,opt,name=service_params,json=serviceParams,proto3" json:"service_params"`
}

func (m *QueryServiceParamsResponse) Reset()         { *m = QueryServiceParamsResponse{} }
func (m *QueryServiceParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceParamsResponse) ProtoMessage()    {}
func (*QueryServiceParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{3}
}
func (m *QueryServiceParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceParamsResponse.Merge(m, src)
}
func (m *QueryServiceParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceParamsResponse proto.InternalMessageInfo

func (m *QueryServiceParamsResponse) GetServiceParams() ServiceParams {
	if m != nil {
		return m.ServiceParams
	}
	return ServiceParams{}
}

// QueryPoolDelegationsRequest is request type for the Query/PoolDelegations RPC
// method.
type QueryPoolDelegationsRequest struct {
	// PoolId is the ID of the pool to query
	PoolId uint32 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoolDelegationsRequest) Reset()         { *m = QueryPoolDelegationsRequest{} }
func (m *QueryPoolDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolDelegationsRequest) ProtoMessage()    {}
func (*QueryPoolDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{4}
}
func (m *QueryPoolDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolDelegationsRequest.Merge(m, src)
}
func (m *QueryPoolDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolDelegationsRequest proto.InternalMessageInfo

func (m *QueryPoolDelegationsRequest) GetPoolId() uint32 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryPoolDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPoolDelegationsResponse is response type for the Query/PoolDelegations
// RPC method.
type QueryPoolDelegationsResponse struct {
	// Delegations is the list of delegations
	Delegations []DelegationResponse `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoolDelegationsResponse) Reset()         { *m = QueryPoolDelegationsResponse{} }
func (m *QueryPoolDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolDelegationsResponse) ProtoMessage()    {}
func (*QueryPoolDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{5}
}
func (m *QueryPoolDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolDelegationsResponse.Merge(m, src)
}
func (m *QueryPoolDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolDelegationsResponse proto.InternalMessageInfo

func (m *QueryPoolDelegationsResponse) GetDelegations() []DelegationResponse {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *QueryPoolDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPoolDelegationRequest is request type for the Query/PoolDelegation RPC
// method.
type QueryPoolDelegationRequest struct {
	// PoolId is the ID of the pool to query
	PoolId uint32 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,2,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryPoolDelegationRequest) Reset()         { *m = QueryPoolDelegationRequest{} }
func (m *QueryPoolDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolDelegationRequest) ProtoMessage()    {}
func (*QueryPoolDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{6}
}
func (m *QueryPoolDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolDelegationRequest.Merge(m, src)
}
func (m *QueryPoolDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolDelegationRequest proto.InternalMessageInfo

func (m *QueryPoolDelegationRequest) GetPoolId() uint32 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryPoolDelegationRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

// QueryPoolDelegationResponse is response type for the Query/PoolDelegation RPC
// method.
type QueryPoolDelegationResponse struct {
	// Delegation is the delegation
	Delegation DelegationResponse `protobuf:"bytes,1,opt,name=delegation,proto3" json:"delegation"`
}

func (m *QueryPoolDelegationResponse) Reset()         { *m = QueryPoolDelegationResponse{} }
func (m *QueryPoolDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolDelegationResponse) ProtoMessage()    {}
func (*QueryPoolDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{7}
}
func (m *QueryPoolDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolDelegationResponse.Merge(m, src)
}
func (m *QueryPoolDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolDelegationResponse proto.InternalMessageInfo

func (m *QueryPoolDelegationResponse) GetDelegation() DelegationResponse {
	if m != nil {
		return m.Delegation
	}
	return DelegationResponse{}
}

// QueryPoolUnbondingDelegationsRequest is request type for the
// Query/PoolUnbondingDelegations RPC method.
type QueryPoolUnbondingDelegationsRequest struct {
	PoolId     uint32             `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoolUnbondingDelegationsRequest) Reset()         { *m = QueryPoolUnbondingDelegationsRequest{} }
func (m *QueryPoolUnbondingDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolUnbondingDelegationsRequest) ProtoMessage()    {}
func (*QueryPoolUnbondingDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{8}
}
func (m *QueryPoolUnbondingDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolUnbondingDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolUnbondingDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolUnbondingDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolUnbondingDelegationsRequest.Merge(m, src)
}
func (m *QueryPoolUnbondingDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolUnbondingDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolUnbondingDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolUnbondingDelegationsRequest proto.InternalMessageInfo

func (m *QueryPoolUnbondingDelegationsRequest) GetPoolId() uint32 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryPoolUnbondingDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPoolUnbondingDelegationsResponse is response type for the
// Query/PoolUnbondingDelegations RPC method.
type QueryPoolUnbondingDelegationsResponse struct {
	UnbondingDelegations []UnbondingDelegation `protobuf:"bytes,1,rep,name=unbonding_delegations,json=unbondingDelegations,proto3" json:"unbonding_delegations"`
	Pagination           *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryPoolUnbondingDelegationsResponse) Reset()         { *m = QueryPoolUnbondingDelegationsResponse{} }
func (m *QueryPoolUnbondingDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolUnbondingDelegationsResponse) ProtoMessage()    {}
func (*QueryPoolUnbondingDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{9}
}
func (m *QueryPoolUnbondingDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolUnbondingDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolUnbondingDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolUnbondingDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolUnbondingDelegationsResponse.Merge(m, src)
}
func (m *QueryPoolUnbondingDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolUnbondingDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolUnbondingDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolUnbondingDelegationsResponse proto.InternalMessageInfo

func (m *QueryPoolUnbondingDelegationsResponse) GetUnbondingDelegations() []UnbondingDelegation {
	if m != nil {
		return m.UnbondingDelegations
	}
	return nil
}

func (m *QueryPoolUnbondingDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPoolUnbondingDelegationRequest is request type for the
// Query/PoolUnbondingDelegation RPC method.
type QueryPoolUnbondingDelegationRequest struct {
	PoolId           uint32 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	DelegatorAddress string `protobuf:"bytes,2,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryPoolUnbondingDelegationRequest) Reset()         { *m = QueryPoolUnbondingDelegationRequest{} }
func (m *QueryPoolUnbondingDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolUnbondingDelegationRequest) ProtoMessage()    {}
func (*QueryPoolUnbondingDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{10}
}
func (m *QueryPoolUnbondingDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolUnbondingDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolUnbondingDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolUnbondingDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolUnbondingDelegationRequest.Merge(m, src)
}
func (m *QueryPoolUnbondingDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolUnbondingDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolUnbondingDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolUnbondingDelegationRequest proto.InternalMessageInfo

func (m *QueryPoolUnbondingDelegationRequest) GetPoolId() uint32 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *QueryPoolUnbondingDelegationRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

// QueryPoolUnbondingDelegationResponse is response type for the
// Query/PoolUnbondingDelegation RPC method.
type QueryPoolUnbondingDelegationResponse struct {
	UnbondingDelegation UnbondingDelegation `protobuf:"bytes,1,opt,name=unbonding_delegation,json=unbondingDelegation,proto3" json:"unbonding_delegation"`
}

func (m *QueryPoolUnbondingDelegationResponse) Reset()         { *m = QueryPoolUnbondingDelegationResponse{} }
func (m *QueryPoolUnbondingDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolUnbondingDelegationResponse) ProtoMessage()    {}
func (*QueryPoolUnbondingDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{11}
}
func (m *QueryPoolUnbondingDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolUnbondingDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolUnbondingDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolUnbondingDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolUnbondingDelegationResponse.Merge(m, src)
}
func (m *QueryPoolUnbondingDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolUnbondingDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolUnbondingDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolUnbondingDelegationResponse proto.InternalMessageInfo

func (m *QueryPoolUnbondingDelegationResponse) GetUnbondingDelegation() UnbondingDelegation {
	if m != nil {
		return m.UnbondingDelegation
	}
	return UnbondingDelegation{}
}

// QueryOperatorDelegationsRequest is request type for the
// Query/OperatorDelegations RPC method.
type QueryOperatorDelegationsRequest struct {
	// OperatorId is the ID of the operator to query
	OperatorId uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOperatorDelegationsRequest) Reset()         { *m = QueryOperatorDelegationsRequest{} }
func (m *QueryOperatorDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorDelegationsRequest) ProtoMessage()    {}
func (*QueryOperatorDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{12}
}
func (m *QueryOperatorDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorDelegationsRequest.Merge(m, src)
}
func (m *QueryOperatorDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorDelegationsRequest proto.InternalMessageInfo

func (m *QueryOperatorDelegationsRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *QueryOperatorDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryOperatorDelegationsResponse is response type for the
// Query/OperatorDelegations RPC method.
type QueryOperatorDelegationsResponse struct {
	// Delegations is the list of delegations
	Delegations []DelegationResponse `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOperatorDelegationsResponse) Reset()         { *m = QueryOperatorDelegationsResponse{} }
func (m *QueryOperatorDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorDelegationsResponse) ProtoMessage()    {}
func (*QueryOperatorDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{13}
}
func (m *QueryOperatorDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorDelegationsResponse.Merge(m, src)
}
func (m *QueryOperatorDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorDelegationsResponse proto.InternalMessageInfo

func (m *QueryOperatorDelegationsResponse) GetDelegations() []DelegationResponse {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *QueryOperatorDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryOperatorDelegationRequest is request type for the
// Query/OperatorDelegation RPC method.
type QueryOperatorDelegationRequest struct {
	// OperatorId is the ID of the operator to query
	OperatorId uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,2,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryOperatorDelegationRequest) Reset()         { *m = QueryOperatorDelegationRequest{} }
func (m *QueryOperatorDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorDelegationRequest) ProtoMessage()    {}
func (*QueryOperatorDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{14}
}
func (m *QueryOperatorDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorDelegationRequest.Merge(m, src)
}
func (m *QueryOperatorDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorDelegationRequest proto.InternalMessageInfo

func (m *QueryOperatorDelegationRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *QueryOperatorDelegationRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

// QueryOperatorDelegationResponse is response type for the
// Query/OperatorDelegation RPC method.
type QueryOperatorDelegationResponse struct {
	// Delegation is the delegation
	Delegation DelegationResponse `protobuf:"bytes,1,opt,name=delegation,proto3" json:"delegation"`
}

func (m *QueryOperatorDelegationResponse) Reset()         { *m = QueryOperatorDelegationResponse{} }
func (m *QueryOperatorDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorDelegationResponse) ProtoMessage()    {}
func (*QueryOperatorDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{15}
}
func (m *QueryOperatorDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorDelegationResponse.Merge(m, src)
}
func (m *QueryOperatorDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorDelegationResponse proto.InternalMessageInfo

func (m *QueryOperatorDelegationResponse) GetDelegation() DelegationResponse {
	if m != nil {
		return m.Delegation
	}
	return DelegationResponse{}
}

// QueryOperatorUnbondingDelegationsRequest is request type for the
// Query/OperatorUnbondingDelegations RPC method.
type QueryOperatorUnbondingDelegationsRequest struct {
	// OperatorId is the ID of the operator to query
	OperatorId uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOperatorUnbondingDelegationsRequest) Reset() {
	*m = QueryOperatorUnbondingDelegationsRequest{}
}
func (m *QueryOperatorUnbondingDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorUnbondingDelegationsRequest) ProtoMessage()    {}
func (*QueryOperatorUnbondingDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{16}
}
func (m *QueryOperatorUnbondingDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorUnbondingDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorUnbondingDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorUnbondingDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorUnbondingDelegationsRequest.Merge(m, src)
}
func (m *QueryOperatorUnbondingDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorUnbondingDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorUnbondingDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorUnbondingDelegationsRequest proto.InternalMessageInfo

func (m *QueryOperatorUnbondingDelegationsRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *QueryOperatorUnbondingDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryOperatorUnbondingDelegationsResponse is response type for the
// Query/OperatorUnbondingDelegations RPC method.
type QueryOperatorUnbondingDelegationsResponse struct {
	// UnbondingDelegations is the list of unbonding delegations
	UnbondingDelegations []UnbondingDelegation `protobuf:"bytes,1,rep,name=unbonding_delegations,json=unbondingDelegations,proto3" json:"unbonding_delegations"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryOperatorUnbondingDelegationsResponse) Reset() {
	*m = QueryOperatorUnbondingDelegationsResponse{}
}
func (m *QueryOperatorUnbondingDelegationsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryOperatorUnbondingDelegationsResponse) ProtoMessage() {}
func (*QueryOperatorUnbondingDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{17}
}
func (m *QueryOperatorUnbondingDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorUnbondingDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorUnbondingDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorUnbondingDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorUnbondingDelegationsResponse.Merge(m, src)
}
func (m *QueryOperatorUnbondingDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorUnbondingDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorUnbondingDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorUnbondingDelegationsResponse proto.InternalMessageInfo

func (m *QueryOperatorUnbondingDelegationsResponse) GetUnbondingDelegations() []UnbondingDelegation {
	if m != nil {
		return m.UnbondingDelegations
	}
	return nil
}

func (m *QueryOperatorUnbondingDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryOperatorUnbondingDelegationRequest is request type for the
// Query/OperatorUnbondingDelegation RPC method.
type QueryOperatorUnbondingDelegationRequest struct {
	// OperatorId is the ID of the operator to query
	OperatorId uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,2,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryOperatorUnbondingDelegationRequest) Reset() {
	*m = QueryOperatorUnbondingDelegationRequest{}
}
func (m *QueryOperatorUnbondingDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorUnbondingDelegationRequest) ProtoMessage()    {}
func (*QueryOperatorUnbondingDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{18}
}
func (m *QueryOperatorUnbondingDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorUnbondingDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorUnbondingDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorUnbondingDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorUnbondingDelegationRequest.Merge(m, src)
}
func (m *QueryOperatorUnbondingDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorUnbondingDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorUnbondingDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorUnbondingDelegationRequest proto.InternalMessageInfo

func (m *QueryOperatorUnbondingDelegationRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *QueryOperatorUnbondingDelegationRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

// QueryOperatorUnbondingDelegationResponse is response type for the
// Query/OperatorUnbondingDelegation RPC method.
type QueryOperatorUnbondingDelegationResponse struct {
	// UnbondingDelegation is the unbonding delegation
	UnbondingDelegation UnbondingDelegation `protobuf:"bytes,1,opt,name=unbonding_delegation,json=unbondingDelegation,proto3" json:"unbonding_delegation"`
}

func (m *QueryOperatorUnbondingDelegationResponse) Reset() {
	*m = QueryOperatorUnbondingDelegationResponse{}
}
func (m *QueryOperatorUnbondingDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorUnbondingDelegationResponse) ProtoMessage()    {}
func (*QueryOperatorUnbondingDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{19}
}
func (m *QueryOperatorUnbondingDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorUnbondingDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorUnbondingDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorUnbondingDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorUnbondingDelegationResponse.Merge(m, src)
}
func (m *QueryOperatorUnbondingDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorUnbondingDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorUnbondingDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorUnbondingDelegationResponse proto.InternalMessageInfo

func (m *QueryOperatorUnbondingDelegationResponse) GetUnbondingDelegation() UnbondingDelegation {
	if m != nil {
		return m.UnbondingDelegation
	}
	return UnbondingDelegation{}
}

// QueryServiceDelegationsRequest is request type for the
// Query/ServiceDelegations RPC method.
type QueryServiceDelegationsRequest struct {
	// ServiceId is the ID of the service to query
	ServiceId uint32 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryServiceDelegationsRequest) Reset()         { *m = QueryServiceDelegationsRequest{} }
func (m *QueryServiceDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceDelegationsRequest) ProtoMessage()    {}
func (*QueryServiceDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{20}
}
func (m *QueryServiceDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceDelegationsRequest.Merge(m, src)
}
func (m *QueryServiceDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceDelegationsRequest proto.InternalMessageInfo

func (m *QueryServiceDelegationsRequest) GetServiceId() uint32 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

func (m *QueryServiceDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryServiceDelegationsResponse is response type for the
// Query/ServiceDelegations RPC method.
type QueryServiceDelegationsResponse struct {
	// Delegations is the list of delegations
	Delegations []DelegationResponse `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryServiceDelegationsResponse) Reset()         { *m = QueryServiceDelegationsResponse{} }
func (m *QueryServiceDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceDelegationsResponse) ProtoMessage()    {}
func (*QueryServiceDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{21}
}
func (m *QueryServiceDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceDelegationsResponse.Merge(m, src)
}
func (m *QueryServiceDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceDelegationsResponse proto.InternalMessageInfo

func (m *QueryServiceDelegationsResponse) GetDelegations() []DelegationResponse {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *QueryServiceDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryServiceDelegationRequest is request type for the Query/ServiceDelegation
// RPC method.
type QueryServiceDelegationRequest struct {
	// ServiceId is the ID of the service to query
	ServiceId uint32 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,2,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryServiceDelegationRequest) Reset()         { *m = QueryServiceDelegationRequest{} }
func (m *QueryServiceDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceDelegationRequest) ProtoMessage()    {}
func (*QueryServiceDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{22}
}
func (m *QueryServiceDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceDelegationRequest.Merge(m, src)
}
func (m *QueryServiceDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceDelegationRequest proto.InternalMessageInfo

func (m *QueryServiceDelegationRequest) GetServiceId() uint32 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

func (m *QueryServiceDelegationRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

// QueryServiceDelegationResponse is response type for the
// Query/ServiceDelegation RPC method.
type QueryServiceDelegationResponse struct {
	// Delegation is the delegation
	Delegation DelegationResponse `protobuf:"bytes,1,opt,name=delegation,proto3" json:"delegation"`
}

func (m *QueryServiceDelegationResponse) Reset()         { *m = QueryServiceDelegationResponse{} }
func (m *QueryServiceDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceDelegationResponse) ProtoMessage()    {}
func (*QueryServiceDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{23}
}
func (m *QueryServiceDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceDelegationResponse.Merge(m, src)
}
func (m *QueryServiceDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceDelegationResponse proto.InternalMessageInfo

func (m *QueryServiceDelegationResponse) GetDelegation() DelegationResponse {
	if m != nil {
		return m.Delegation
	}
	return DelegationResponse{}
}

// QueryServiceUnbondingDelegationsRequest is request type for the
// Query/ServiceUnbondingDelegations RPC method.
type QueryServiceUnbondingDelegationsRequest struct {
	// ServiceId is the ID of the service to query
	ServiceId uint32 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryServiceUnbondingDelegationsRequest) Reset() {
	*m = QueryServiceUnbondingDelegationsRequest{}
}
func (m *QueryServiceUnbondingDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceUnbondingDelegationsRequest) ProtoMessage()    {}
func (*QueryServiceUnbondingDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{24}
}
func (m *QueryServiceUnbondingDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceUnbondingDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceUnbondingDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceUnbondingDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceUnbondingDelegationsRequest.Merge(m, src)
}
func (m *QueryServiceUnbondingDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceUnbondingDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceUnbondingDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceUnbondingDelegationsRequest proto.InternalMessageInfo

func (m *QueryServiceUnbondingDelegationsRequest) GetServiceId() uint32 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

func (m *QueryServiceUnbondingDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryServiceUnbondingDelegationsResponse is response type for the
// Query/ServiceUnbondingDelegations RPC method.
type QueryServiceUnbondingDelegationsResponse struct {
	// UnbondingDelegations is the list of unbonding delegations
	UnbondingDelegations []UnbondingDelegation `protobuf:"bytes,1,rep,name=unbonding_delegations,json=unbondingDelegations,proto3" json:"unbonding_delegations"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryServiceUnbondingDelegationsResponse) Reset() {
	*m = QueryServiceUnbondingDelegationsResponse{}
}
func (m *QueryServiceUnbondingDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceUnbondingDelegationsResponse) ProtoMessage()    {}
func (*QueryServiceUnbondingDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{25}
}
func (m *QueryServiceUnbondingDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceUnbondingDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceUnbondingDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceUnbondingDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceUnbondingDelegationsResponse.Merge(m, src)
}
func (m *QueryServiceUnbondingDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceUnbondingDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceUnbondingDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceUnbondingDelegationsResponse proto.InternalMessageInfo

func (m *QueryServiceUnbondingDelegationsResponse) GetUnbondingDelegations() []UnbondingDelegation {
	if m != nil {
		return m.UnbondingDelegations
	}
	return nil
}

func (m *QueryServiceUnbondingDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryServiceUnbondingDelegationRequest is request type for the
// Query/ServiceUnbondingDelegation RPC method.
type QueryServiceUnbondingDelegationRequest struct {
	// ServiceId is the ID of the service to query
	ServiceId uint32 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,2,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryServiceUnbondingDelegationRequest) Reset() {
	*m = QueryServiceUnbondingDelegationRequest{}
}
func (m *QueryServiceUnbondingDelegationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceUnbondingDelegationRequest) ProtoMessage()    {}
func (*QueryServiceUnbondingDelegationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{26}
}
func (m *QueryServiceUnbondingDelegationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceUnbondingDelegationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceUnbondingDelegationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceUnbondingDelegationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceUnbondingDelegationRequest.Merge(m, src)
}
func (m *QueryServiceUnbondingDelegationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceUnbondingDelegationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceUnbondingDelegationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceUnbondingDelegationRequest proto.InternalMessageInfo

func (m *QueryServiceUnbondingDelegationRequest) GetServiceId() uint32 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

func (m *QueryServiceUnbondingDelegationRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

// QueryServiceUnbondingDelegationResponse is response type for the
// Query/ServiceUnbondingDelegation RPC method.
type QueryServiceUnbondingDelegationResponse struct {
	// UnbondingDelegation is the unbonding delegation
	UnbondingDelegation UnbondingDelegation `protobuf:"bytes,1,opt,name=unbonding_delegation,json=unbondingDelegation,proto3" json:"unbonding_delegation"`
}

func (m *QueryServiceUnbondingDelegationResponse) Reset() {
	*m = QueryServiceUnbondingDelegationResponse{}
}
func (m *QueryServiceUnbondingDelegationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceUnbondingDelegationResponse) ProtoMessage()    {}
func (*QueryServiceUnbondingDelegationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{27}
}
func (m *QueryServiceUnbondingDelegationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceUnbondingDelegationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceUnbondingDelegationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceUnbondingDelegationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceUnbondingDelegationResponse.Merge(m, src)
}
func (m *QueryServiceUnbondingDelegationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceUnbondingDelegationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceUnbondingDelegationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceUnbondingDelegationResponse proto.InternalMessageInfo

func (m *QueryServiceUnbondingDelegationResponse) GetUnbondingDelegation() UnbondingDelegation {
	if m != nil {
		return m.UnbondingDelegation
	}
	return UnbondingDelegation{}
}

// QueryDelegatorPoolDelegationsRequest is request type for the
// Query/DelegatorPoolDelegations RPC method.
type QueryDelegatorPoolDelegationsRequest struct {
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorPoolDelegationsRequest) Reset()         { *m = QueryDelegatorPoolDelegationsRequest{} }
func (m *QueryDelegatorPoolDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorPoolDelegationsRequest) ProtoMessage()    {}
func (*QueryDelegatorPoolDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{28}
}
func (m *QueryDelegatorPoolDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorPoolDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorPoolDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorPoolDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorPoolDelegationsRequest.Merge(m, src)
}
func (m *QueryDelegatorPoolDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorPoolDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorPoolDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorPoolDelegationsRequest proto.InternalMessageInfo

func (m *QueryDelegatorPoolDelegationsRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryDelegatorPoolDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorPoolDelegationsResponse is response type for the
// Query/DelegatorPoolDelegations RPC method.
type QueryDelegatorPoolDelegationsResponse struct {
	// Delegations is the list of delegations
	Delegations []DelegationResponse `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorPoolDelegationsResponse) Reset()         { *m = QueryDelegatorPoolDelegationsResponse{} }
func (m *QueryDelegatorPoolDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorPoolDelegationsResponse) ProtoMessage()    {}
func (*QueryDelegatorPoolDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{29}
}
func (m *QueryDelegatorPoolDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorPoolDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorPoolDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorPoolDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorPoolDelegationsResponse.Merge(m, src)
}
func (m *QueryDelegatorPoolDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorPoolDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorPoolDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorPoolDelegationsResponse proto.InternalMessageInfo

func (m *QueryDelegatorPoolDelegationsResponse) GetDelegations() []DelegationResponse {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *QueryDelegatorPoolDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorPoolUnbondingDelegationsRequest is request type for the
// Query/DelegatorPoolUnbondingDelegations RPC method.
type QueryDelegatorPoolUnbondingDelegationsRequest struct {
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorPoolUnbondingDelegationsRequest) Reset() {
	*m = QueryDelegatorPoolUnbondingDelegationsRequest{}
}
func (m *QueryDelegatorPoolUnbondingDelegationsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegatorPoolUnbondingDelegationsRequest) ProtoMessage() {}
func (*QueryDelegatorPoolUnbondingDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{30}
}
func (m *QueryDelegatorPoolUnbondingDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorPoolUnbondingDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorPoolUnbondingDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorPoolUnbondingDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorPoolUnbondingDelegationsRequest.Merge(m, src)
}
func (m *QueryDelegatorPoolUnbondingDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorPoolUnbondingDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorPoolUnbondingDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorPoolUnbondingDelegationsRequest proto.InternalMessageInfo

func (m *QueryDelegatorPoolUnbondingDelegationsRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryDelegatorPoolUnbondingDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorPoolUnbondingDelegationsResponse is response type for the
// Query/DelegatorPoolUnbondingDelegations RPC method.
type QueryDelegatorPoolUnbondingDelegationsResponse struct {
	// UnbondingDelegations is the list of unbonding delegations
	UnbondingDelegations []UnbondingDelegation `protobuf:"bytes,1,rep,name=unbonding_delegations,json=unbondingDelegations,proto3" json:"unbonding_delegations"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorPoolUnbondingDelegationsResponse) Reset() {
	*m = QueryDelegatorPoolUnbondingDelegationsResponse{}
}
func (m *QueryDelegatorPoolUnbondingDelegationsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegatorPoolUnbondingDelegationsResponse) ProtoMessage() {}
func (*QueryDelegatorPoolUnbondingDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{31}
}
func (m *QueryDelegatorPoolUnbondingDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorPoolUnbondingDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorPoolUnbondingDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorPoolUnbondingDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorPoolUnbondingDelegationsResponse.Merge(m, src)
}
func (m *QueryDelegatorPoolUnbondingDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorPoolUnbondingDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorPoolUnbondingDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorPoolUnbondingDelegationsResponse proto.InternalMessageInfo

func (m *QueryDelegatorPoolUnbondingDelegationsResponse) GetUnbondingDelegations() []UnbondingDelegation {
	if m != nil {
		return m.UnbondingDelegations
	}
	return nil
}

func (m *QueryDelegatorPoolUnbondingDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorOperatorDelegationsRequest is request type for the
// Query/DelegatorOperatorDelegations RPC method.
type QueryDelegatorOperatorDelegationsRequest struct {
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorOperatorDelegationsRequest) Reset() {
	*m = QueryDelegatorOperatorDelegationsRequest{}
}
func (m *QueryDelegatorOperatorDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorOperatorDelegationsRequest) ProtoMessage()    {}
func (*QueryDelegatorOperatorDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{32}
}
func (m *QueryDelegatorOperatorDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorOperatorDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorOperatorDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorOperatorDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorOperatorDelegationsRequest.Merge(m, src)
}
func (m *QueryDelegatorOperatorDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorOperatorDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorOperatorDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorOperatorDelegationsRequest proto.InternalMessageInfo

func (m *QueryDelegatorOperatorDelegationsRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryDelegatorOperatorDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorOperatorDelegationsResponse is response type for the
// Query/DelegatorOperatorDelegations RPC method.
type QueryDelegatorOperatorDelegationsResponse struct {
	// Delegations is the list of delegations
	Delegations []DelegationResponse `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorOperatorDelegationsResponse) Reset() {
	*m = QueryDelegatorOperatorDelegationsResponse{}
}
func (m *QueryDelegatorOperatorDelegationsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegatorOperatorDelegationsResponse) ProtoMessage() {}
func (*QueryDelegatorOperatorDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{33}
}
func (m *QueryDelegatorOperatorDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorOperatorDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorOperatorDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorOperatorDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorOperatorDelegationsResponse.Merge(m, src)
}
func (m *QueryDelegatorOperatorDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorOperatorDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorOperatorDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorOperatorDelegationsResponse proto.InternalMessageInfo

func (m *QueryDelegatorOperatorDelegationsResponse) GetDelegations() []DelegationResponse {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *QueryDelegatorOperatorDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorOperatorUnbondingDelegationsRequest is request type for the
// Query/DelegatorOperatorUnbondingDelegations RPC method.
type QueryDelegatorOperatorUnbondingDelegationsRequest struct {
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorOperatorUnbondingDelegationsRequest) Reset() {
	*m = QueryDelegatorOperatorUnbondingDelegationsRequest{}
}
func (m *QueryDelegatorOperatorUnbondingDelegationsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegatorOperatorUnbondingDelegationsRequest) ProtoMessage() {}
func (*QueryDelegatorOperatorUnbondingDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{34}
}
func (m *QueryDelegatorOperatorUnbondingDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorOperatorUnbondingDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorOperatorUnbondingDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorOperatorUnbondingDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorOperatorUnbondingDelegationsRequest.Merge(m, src)
}
func (m *QueryDelegatorOperatorUnbondingDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorOperatorUnbondingDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorOperatorUnbondingDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorOperatorUnbondingDelegationsRequest proto.InternalMessageInfo

func (m *QueryDelegatorOperatorUnbondingDelegationsRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryDelegatorOperatorUnbondingDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorOperatorUnbondingDelegationsResponse is response type for the
// Query/DelegatorOperatorUnbondingDelegations RPC method.
type QueryDelegatorOperatorUnbondingDelegationsResponse struct {
	// UnbondingDelegations is the list of unbonding delegations
	UnbondingDelegations []UnbondingDelegation `protobuf:"bytes,1,rep,name=unbonding_delegations,json=unbondingDelegations,proto3" json:"unbonding_delegations"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorOperatorUnbondingDelegationsResponse) Reset() {
	*m = QueryDelegatorOperatorUnbondingDelegationsResponse{}
}
func (m *QueryDelegatorOperatorUnbondingDelegationsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegatorOperatorUnbondingDelegationsResponse) ProtoMessage() {}
func (*QueryDelegatorOperatorUnbondingDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{35}
}
func (m *QueryDelegatorOperatorUnbondingDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorOperatorUnbondingDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorOperatorUnbondingDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorOperatorUnbondingDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorOperatorUnbondingDelegationsResponse.Merge(m, src)
}
func (m *QueryDelegatorOperatorUnbondingDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorOperatorUnbondingDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorOperatorUnbondingDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorOperatorUnbondingDelegationsResponse proto.InternalMessageInfo

func (m *QueryDelegatorOperatorUnbondingDelegationsResponse) GetUnbondingDelegations() []UnbondingDelegation {
	if m != nil {
		return m.UnbondingDelegations
	}
	return nil
}

func (m *QueryDelegatorOperatorUnbondingDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorServiceDelegationsRequest is request type for the
// Query/DelegatorServiceDelegations RPC method.
type QueryDelegatorServiceDelegationsRequest struct {
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorServiceDelegationsRequest) Reset() {
	*m = QueryDelegatorServiceDelegationsRequest{}
}
func (m *QueryDelegatorServiceDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorServiceDelegationsRequest) ProtoMessage()    {}
func (*QueryDelegatorServiceDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{36}
}
func (m *QueryDelegatorServiceDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorServiceDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorServiceDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorServiceDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorServiceDelegationsRequest.Merge(m, src)
}
func (m *QueryDelegatorServiceDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorServiceDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorServiceDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorServiceDelegationsRequest proto.InternalMessageInfo

func (m *QueryDelegatorServiceDelegationsRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryDelegatorServiceDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorServiceDelegationsResponse is response type for the
// Query/DelegatorServiceDelegations RPC method.
type QueryDelegatorServiceDelegationsResponse struct {
	// Delegations is the list of delegations
	Delegations []DelegationResponse `protobuf:"bytes,1,rep,name=delegations,proto3" json:"delegations"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorServiceDelegationsResponse) Reset() {
	*m = QueryDelegatorServiceDelegationsResponse{}
}
func (m *QueryDelegatorServiceDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorServiceDelegationsResponse) ProtoMessage()    {}
func (*QueryDelegatorServiceDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{37}
}
func (m *QueryDelegatorServiceDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorServiceDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorServiceDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorServiceDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorServiceDelegationsResponse.Merge(m, src)
}
func (m *QueryDelegatorServiceDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorServiceDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorServiceDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorServiceDelegationsResponse proto.InternalMessageInfo

func (m *QueryDelegatorServiceDelegationsResponse) GetDelegations() []DelegationResponse {
	if m != nil {
		return m.Delegations
	}
	return nil
}

func (m *QueryDelegatorServiceDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorServiceUnbondingDelegationsRequest is request type for the
// Query/DelegatorServiceUnbondingDelegations RPC method.
type QueryDelegatorServiceUnbondingDelegationsRequest struct {
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorServiceUnbondingDelegationsRequest) Reset() {
	*m = QueryDelegatorServiceUnbondingDelegationsRequest{}
}
func (m *QueryDelegatorServiceUnbondingDelegationsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegatorServiceUnbondingDelegationsRequest) ProtoMessage() {}
func (*QueryDelegatorServiceUnbondingDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{38}
}
func (m *QueryDelegatorServiceUnbondingDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorServiceUnbondingDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorServiceUnbondingDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorServiceUnbondingDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorServiceUnbondingDelegationsRequest.Merge(m, src)
}
func (m *QueryDelegatorServiceUnbondingDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorServiceUnbondingDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorServiceUnbondingDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorServiceUnbondingDelegationsRequest proto.InternalMessageInfo

func (m *QueryDelegatorServiceUnbondingDelegationsRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryDelegatorServiceUnbondingDelegationsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorServiceUnbondingDelegationsResponse is response type for the
// Query/DelegatorServiceUnbondingDelegations RPC method.
type QueryDelegatorServiceUnbondingDelegationsResponse struct {
	// UnbondingDelegations is the list of unbonding delegations
	UnbondingDelegations []UnbondingDelegation `protobuf:"bytes,1,rep,name=unbonding_delegations,json=unbondingDelegations,proto3" json:"unbonding_delegations"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorServiceUnbondingDelegationsResponse) Reset() {
	*m = QueryDelegatorServiceUnbondingDelegationsResponse{}
}
func (m *QueryDelegatorServiceUnbondingDelegationsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryDelegatorServiceUnbondingDelegationsResponse) ProtoMessage() {}
func (*QueryDelegatorServiceUnbondingDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{39}
}
func (m *QueryDelegatorServiceUnbondingDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorServiceUnbondingDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorServiceUnbondingDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorServiceUnbondingDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorServiceUnbondingDelegationsResponse.Merge(m, src)
}
func (m *QueryDelegatorServiceUnbondingDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorServiceUnbondingDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorServiceUnbondingDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorServiceUnbondingDelegationsResponse proto.InternalMessageInfo

func (m *QueryDelegatorServiceUnbondingDelegationsResponse) GetUnbondingDelegations() []UnbondingDelegation {
	if m != nil {
		return m.UnbondingDelegations
	}
	return nil
}

func (m *QueryDelegatorServiceUnbondingDelegationsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorPoolsRequest is request type for the Query/DelegatorPools RPC
// method.
type QueryDelegatorPoolsRequest struct {
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorPoolsRequest) Reset()         { *m = QueryDelegatorPoolsRequest{} }
func (m *QueryDelegatorPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorPoolsRequest) ProtoMessage()    {}
func (*QueryDelegatorPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{40}
}
func (m *QueryDelegatorPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorPoolsRequest.Merge(m, src)
}
func (m *QueryDelegatorPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorPoolsRequest proto.InternalMessageInfo

func (m *QueryDelegatorPoolsRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryDelegatorPoolsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorPoolsResponse is response type for the Query/DelegatorPools RPC
// method.
type QueryDelegatorPoolsResponse struct {
	// Pools is the list of pools
	Pools []types.Pool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorPoolsResponse) Reset()         { *m = QueryDelegatorPoolsResponse{} }
func (m *QueryDelegatorPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorPoolsResponse) ProtoMessage()    {}
func (*QueryDelegatorPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{41}
}
func (m *QueryDelegatorPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorPoolsResponse.Merge(m, src)
}
func (m *QueryDelegatorPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorPoolsResponse proto.InternalMessageInfo

func (m *QueryDelegatorPoolsResponse) GetPools() []types.Pool {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *QueryDelegatorPoolsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorPoolRequest is request type for the Query/DelegatorPool RPC
// method.
type QueryDelegatorPoolRequest struct {
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// PoolId is the ID of the pool to query
	PoolId uint32 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryDelegatorPoolRequest) Reset()         { *m = QueryDelegatorPoolRequest{} }
func (m *QueryDelegatorPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorPoolRequest) ProtoMessage()    {}
func (*QueryDelegatorPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{42}
}
func (m *QueryDelegatorPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorPoolRequest.Merge(m, src)
}
func (m *QueryDelegatorPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorPoolRequest proto.InternalMessageInfo

func (m *QueryDelegatorPoolRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryDelegatorPoolRequest) GetPoolId() uint32 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

// QueryDelegatorPoolResponse is response type for the Query/DelegatorPool RPC
// method.
type QueryDelegatorPoolResponse struct {
	// Pool is the pool
	Pool types.Pool `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool"`
}

func (m *QueryDelegatorPoolResponse) Reset()         { *m = QueryDelegatorPoolResponse{} }
func (m *QueryDelegatorPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorPoolResponse) ProtoMessage()    {}
func (*QueryDelegatorPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{43}
}
func (m *QueryDelegatorPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorPoolResponse.Merge(m, src)
}
func (m *QueryDelegatorPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorPoolResponse proto.InternalMessageInfo

func (m *QueryDelegatorPoolResponse) GetPool() types.Pool {
	if m != nil {
		return m.Pool
	}
	return types.Pool{}
}

// QueryDelegatorOperatorsRequest is request type for the
// Query/DelegatorOperators RPC method.
type QueryDelegatorOperatorsRequest struct {
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorOperatorsRequest) Reset()         { *m = QueryDelegatorOperatorsRequest{} }
func (m *QueryDelegatorOperatorsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorOperatorsRequest) ProtoMessage()    {}
func (*QueryDelegatorOperatorsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{44}
}
func (m *QueryDelegatorOperatorsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorOperatorsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorOperatorsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorOperatorsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorOperatorsRequest.Merge(m, src)
}
func (m *QueryDelegatorOperatorsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorOperatorsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorOperatorsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorOperatorsRequest proto.InternalMessageInfo

func (m *QueryDelegatorOperatorsRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryDelegatorOperatorsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorOperatorsResponse is response type for the
// Query/DelegatorOperators RPC method.
type QueryDelegatorOperatorsResponse struct {
	// Operators is the list of operators
	Operators []types1.Operator `protobuf:"bytes,1,rep,name=operators,proto3" json:"operators"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorOperatorsResponse) Reset()         { *m = QueryDelegatorOperatorsResponse{} }
func (m *QueryDelegatorOperatorsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorOperatorsResponse) ProtoMessage()    {}
func (*QueryDelegatorOperatorsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{45}
}
func (m *QueryDelegatorOperatorsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorOperatorsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorOperatorsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorOperatorsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorOperatorsResponse.Merge(m, src)
}
func (m *QueryDelegatorOperatorsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorOperatorsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorOperatorsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorOperatorsResponse proto.InternalMessageInfo

func (m *QueryDelegatorOperatorsResponse) GetOperators() []types1.Operator {
	if m != nil {
		return m.Operators
	}
	return nil
}

func (m *QueryDelegatorOperatorsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorOperatorRequest is request type for the Query/DelegatorOperator
// RPC method.
type QueryDelegatorOperatorRequest struct {
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// OperatorId is the ID of the operator to query
	OperatorId uint32 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (m *QueryDelegatorOperatorRequest) Reset()         { *m = QueryDelegatorOperatorRequest{} }
func (m *QueryDelegatorOperatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorOperatorRequest) ProtoMessage()    {}
func (*QueryDelegatorOperatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{46}
}
func (m *QueryDelegatorOperatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorOperatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorOperatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorOperatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorOperatorRequest.Merge(m, src)
}
func (m *QueryDelegatorOperatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorOperatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorOperatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorOperatorRequest proto.InternalMessageInfo

func (m *QueryDelegatorOperatorRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryDelegatorOperatorRequest) GetOperatorId() uint32 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

// QueryDelegatorOperatorResponse is response type for the
// Query/DelegatorOperator RPC method.
type QueryDelegatorOperatorResponse struct {
	// Operator is the operator
	Operator types1.Operator `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator"`
}

func (m *QueryDelegatorOperatorResponse) Reset()         { *m = QueryDelegatorOperatorResponse{} }
func (m *QueryDelegatorOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorOperatorResponse) ProtoMessage()    {}
func (*QueryDelegatorOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{47}
}
func (m *QueryDelegatorOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorOperatorResponse.Merge(m, src)
}
func (m *QueryDelegatorOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorOperatorResponse proto.InternalMessageInfo

func (m *QueryDelegatorOperatorResponse) GetOperator() types1.Operator {
	if m != nil {
		return m.Operator
	}
	return types1.Operator{}
}

// QueryDelegatorServicesRequest is request type for the Query/DelegatorServices
// RPC method.
type QueryDelegatorServicesRequest struct {
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// Pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorServicesRequest) Reset()         { *m = QueryDelegatorServicesRequest{} }
func (m *QueryDelegatorServicesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorServicesRequest) ProtoMessage()    {}
func (*QueryDelegatorServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{48}
}
func (m *QueryDelegatorServicesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorServicesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorServicesRequest.Merge(m, src)
}
func (m *QueryDelegatorServicesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorServicesRequest proto.InternalMessageInfo

func (m *QueryDelegatorServicesRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryDelegatorServicesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorServicesResponse is response type for the
// Query/DelegatorServices RPC method.
type QueryDelegatorServicesResponse struct {
	// Services is the list of services
	Services []types2.Service `protobuf:"bytes,1,rep,name=services,proto3" json:"services"`
	// Pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDelegatorServicesResponse) Reset()         { *m = QueryDelegatorServicesResponse{} }
func (m *QueryDelegatorServicesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorServicesResponse) ProtoMessage()    {}
func (*QueryDelegatorServicesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{49}
}
func (m *QueryDelegatorServicesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorServicesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorServicesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorServicesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorServicesResponse.Merge(m, src)
}
func (m *QueryDelegatorServicesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorServicesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorServicesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorServicesResponse proto.InternalMessageInfo

func (m *QueryDelegatorServicesResponse) GetServices() []types2.Service {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *QueryDelegatorServicesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryDelegatorServiceRequest is request type for the Query/DelegatorService
// RPC method.
type QueryDelegatorServiceRequest struct {
	// DelegatorAddress is the address of the delegator to query
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// ServiceId is the ID of the service to query
	ServiceId uint32 `protobuf:"varint,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (m *QueryDelegatorServiceRequest) Reset()         { *m = QueryDelegatorServiceRequest{} }
func (m *QueryDelegatorServiceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorServiceRequest) ProtoMessage()    {}
func (*QueryDelegatorServiceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{50}
}
func (m *QueryDelegatorServiceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorServiceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorServiceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorServiceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorServiceRequest.Merge(m, src)
}
func (m *QueryDelegatorServiceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorServiceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorServiceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorServiceRequest proto.InternalMessageInfo

func (m *QueryDelegatorServiceRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *QueryDelegatorServiceRequest) GetServiceId() uint32 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

// QueryDelegatorServiceResponse is response type for the Query/DelegatorService
// RPC method.
type QueryDelegatorServiceResponse struct {
	// Service is the service
	Service types2.Service `protobuf:"bytes,1,opt,name=service,proto3" json:"service"`
}

func (m *QueryDelegatorServiceResponse) Reset()         { *m = QueryDelegatorServiceResponse{} }
func (m *QueryDelegatorServiceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorServiceResponse) ProtoMessage()    {}
func (*QueryDelegatorServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{51}
}
func (m *QueryDelegatorServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorServiceResponse.Merge(m, src)
}
func (m *QueryDelegatorServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorServiceResponse proto.InternalMessageInfo

func (m *QueryDelegatorServiceResponse) GetService() types2.Service {
	if m != nil {
		return m.Service
	}
	return types2.Service{}
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{52}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_946984316b0f92c4, []int{53}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryOperatorJoinedServicesRequest)(nil), "milkyway.restaking.v1.QueryOperatorJoinedServicesRequest")
	proto.RegisterType((*QueryOperatorJoinedServicesResponse)(nil), "milkyway.restaking.v1.QueryOperatorJoinedServicesResponse")
	proto.RegisterType((*QueryServiceParamsRequest)(nil), "milkyway.restaking.v1.QueryServiceParamsRequest")
	proto.RegisterType((*QueryServiceParamsResponse)(nil), "milkyway.restaking.v1.QueryServiceParamsResponse")
	proto.RegisterType((*QueryPoolDelegationsRequest)(nil), "milkyway.restaking.v1.QueryPoolDelegationsRequest")
	proto.RegisterType((*QueryPoolDelegationsResponse)(nil), "milkyway.restaking.v1.QueryPoolDelegationsResponse")
	proto.RegisterType((*QueryPoolDelegationRequest)(nil), "milkyway.restaking.v1.QueryPoolDelegationRequest")
	proto.RegisterType((*QueryPoolDelegationResponse)(nil), "milkyway.restaking.v1.QueryPoolDelegationResponse")
	proto.RegisterType((*QueryPoolUnbondingDelegationsRequest)(nil), "milkyway.restaking.v1.QueryPoolUnbondingDelegationsRequest")
	proto.RegisterType((*QueryPoolUnbondingDelegationsResponse)(nil), "milkyway.restaking.v1.QueryPoolUnbondingDelegationsResponse")
	proto.RegisterType((*QueryPoolUnbondingDelegationRequest)(nil), "milkyway.restaking.v1.QueryPoolUnbondingDelegationRequest")
	proto.RegisterType((*QueryPoolUnbondingDelegationResponse)(nil), "milkyway.restaking.v1.QueryPoolUnbondingDelegationResponse")
	proto.RegisterType((*QueryOperatorDelegationsRequest)(nil), "milkyway.restaking.v1.QueryOperatorDelegationsRequest")
	proto.RegisterType((*QueryOperatorDelegationsResponse)(nil), "milkyway.restaking.v1.QueryOperatorDelegationsResponse")
	proto.RegisterType((*QueryOperatorDelegationRequest)(nil), "milkyway.restaking.v1.QueryOperatorDelegationRequest")
	proto.RegisterType((*QueryOperatorDelegationResponse)(nil), "milkyway.restaking.v1.QueryOperatorDelegationResponse")
	proto.RegisterType((*QueryOperatorUnbondingDelegationsRequest)(nil), "milkyway.restaking.v1.QueryOperatorUnbondingDelegationsRequest")
	proto.RegisterType((*QueryOperatorUnbondingDelegationsResponse)(nil), "milkyway.restaking.v1.QueryOperatorUnbondingDelegationsResponse")
	proto.RegisterType((*QueryOperatorUnbondingDelegationRequest)(nil), "milkyway.restaking.v1.QueryOperatorUnbondingDelegationRequest")
	proto.RegisterType((*QueryOperatorUnbondingDelegationResponse)(nil), "milkyway.restaking.v1.QueryOperatorUnbondingDelegationResponse")
	proto.RegisterType((*QueryServiceDelegationsRequest)(nil), "milkyway.restaking.v1.QueryServiceDelegationsRequest")
	proto.RegisterType((*QueryServiceDelegationsResponse)(nil), "milkyway.restaking.v1.QueryServiceDelegationsResponse")
	proto.RegisterType((*QueryServiceDelegationRequest)(nil), "milkyway.restaking.v1.QueryServiceDelegationRequest")
	proto.RegisterType((*QueryServiceDelegationResponse)(nil), "milkyway.restaking.v1.QueryServiceDelegationResponse")
	proto.RegisterType((*QueryServiceUnbondingDelegationsRequest)(nil), "milkyway.restaking.v1.QueryServiceUnbondingDelegationsRequest")
	proto.RegisterType((*QueryServiceUnbondingDelegationsResponse)(nil), "milkyway.restaking.v1.QueryServiceUnbondingDelegationsResponse")
	proto.RegisterType((*QueryServiceUnbondingDelegationRequest)(nil), "milkyway.restaking.v1.QueryServiceUnbondingDelegationRequest")
	proto.RegisterType((*QueryServiceUnbondingDelegationResponse)(nil), "milkyway.restaking.v1.QueryServiceUnbondingDelegationResponse")
	proto.RegisterType((*QueryDelegatorPoolDelegationsRequest)(nil), "milkyway.restaking.v1.QueryDelegatorPoolDelegationsRequest")
	proto.RegisterType((*QueryDelegatorPoolDelegationsResponse)(nil), "milkyway.restaking.v1.QueryDelegatorPoolDelegationsResponse")
	proto.RegisterType((*QueryDelegatorPoolUnbondingDelegationsRequest)(nil), "milkyway.restaking.v1.QueryDelegatorPoolUnbondingDelegationsRequest")
	proto.RegisterType((*QueryDelegatorPoolUnbondingDelegationsResponse)(nil), "milkyway.restaking.v1.QueryDelegatorPoolUnbondingDelegationsResponse")
	proto.RegisterType((*QueryDelegatorOperatorDelegationsRequest)(nil), "milkyway.restaking.v1.QueryDelegatorOperatorDelegationsRequest")
	proto.RegisterType((*QueryDelegatorOperatorDelegationsResponse)(nil), "milkyway.restaking.v1.QueryDelegatorOperatorDelegationsResponse")
	proto.RegisterType((*QueryDelegatorOperatorUnbondingDelegationsRequest)(nil), "milkyway.restaking.v1.QueryDelegatorOperatorUnbondingDelegationsRequest")
	proto.RegisterType((*QueryDelegatorOperatorUnbondingDelegationsResponse)(nil), "milkyway.restaking.v1.QueryDelegatorOperatorUnbondingDelegationsResponse")
	proto.RegisterType((*QueryDelegatorServiceDelegationsRequest)(nil), "milkyway.restaking.v1.QueryDelegatorServiceDelegationsRequest")
	proto.RegisterType((*QueryDelegatorServiceDelegationsResponse)(nil), "milkyway.restaking.v1.QueryDelegatorServiceDelegationsResponse")
	proto.RegisterType((*QueryDelegatorServiceUnbondingDelegationsRequest)(nil), "milkyway.restaking.v1.QueryDelegatorServiceUnbondingDelegationsRequest")
	proto.RegisterType((*QueryDelegatorServiceUnbondingDelegationsResponse)(nil), "milkyway.restaking.v1.QueryDelegatorServiceUnbondingDelegationsResponse")
	proto.RegisterType((*QueryDelegatorPoolsRequest)(nil), "milkyway.restaking.v1.QueryDelegatorPoolsRequest")
	proto.RegisterType((*QueryDelegatorPoolsResponse)(nil), "milkyway.restaking.v1.QueryDelegatorPoolsResponse")
	proto.RegisterType((*QueryDelegatorPoolRequest)(nil), "milkyway.restaking.v1.QueryDelegatorPoolRequest")
	proto.RegisterType((*QueryDelegatorPoolResponse)(nil), "milkyway.restaking.v1.QueryDelegatorPoolResponse")
	proto.RegisterType((*QueryDelegatorOperatorsRequest)(nil), "milkyway.restaking.v1.QueryDelegatorOperatorsRequest")
	proto.RegisterType((*QueryDelegatorOperatorsResponse)(nil), "milkyway.restaking.v1.QueryDelegatorOperatorsResponse")
	proto.RegisterType((*QueryDelegatorOperatorRequest)(nil), "milkyway.restaking.v1.QueryDelegatorOperatorRequest")
	proto.RegisterType((*QueryDelegatorOperatorResponse)(nil), "milkyway.restaking.v1.QueryDelegatorOperatorResponse")
	proto.RegisterType((*QueryDelegatorServicesRequest)(nil), "milkyway.restaking.v1.QueryDelegatorServicesRequest")
	proto.RegisterType((*QueryDelegatorServicesResponse)(nil), "milkyway.restaking.v1.QueryDelegatorServicesResponse")
	proto.RegisterType((*QueryDelegatorServiceRequest)(nil), "milkyway.restaking.v1.QueryDelegatorServiceRequest")
	proto.RegisterType((*QueryDelegatorServiceResponse)(nil), "milkyway.restaking.v1.QueryDelegatorServiceResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "milkyway.restaking.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "milkyway.restaking.v1.QueryParamsResponse")
}

func init() { proto.RegisterFile("milkyway/restaking/v1/query.proto", fileDescriptor_946984316b0f92c4) }

var fileDescriptor_946984316b0f92c4 = []byte{
	// 2038 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x5b, 0xed, 0x6f, 0x14, 0x5b,
	0x19, 0xef, 0x59, 0xef, 0xed, 0xbd, 0x7d, 0x9a, 0xe2, 0xed, 0xa1, 0x57, 0x7a, 0xb7, 0xed, 0x96,
	0x3b, 0x72, 0x79, 0x69, 0xc2, 0x0e, 0xdb, 0x17, 0xd4, 0x02, 0x6d, 0xa9, 0x7d, 0x05, 0x4a, 0xcb,
	0x12, 0x01, 0x31, 0xda, 0x6c, 0xbb, 0x93, 0x75, 0xa5, 0xdd, 0x59, 0x76, 0xb6, 0xd5, 0xa6, 0xd6,
	0x18, 0x23, 0x81, 0x48, 0x82, 0x10, 0xe2, 0x27, 0xff, 0x01, 0xa3, 0x89, 0xf8, 0x41, 0x8d, 0x2f,
	0x91, 0x04, 0x4d, 0x94, 0x10, 0x8d, 0xa8, 0x1f, 0x30, 0x42, 0x4c, 0x43, 0x49, 0xfc, 0x62, 0xa2,
	0x26, 0xfe, 0x01, 0x66, 0x67, 0x9e, 0x33, 0x67, 0xa7, 0x73, 0xe6, 0xcc, 0xcc, 0xee, 0x52, 0xbb,
	0xf7, 0x4b, 0xd3, 0xce, 0x9c, 0xe7, 0x39, 0xbf, 0xdf, 0xef, 0x3c, 0xe7, 0x99, 0x33, 0xcf, 0x33,
	0x85, 0xf7, 0x97, 0xb3, 0x4b, 0xd7, 0xd6, 0xbe, 0x9c, 0x5a, 0x53, 0x0b, 0x9a, 0x51, 0x4c, 0x5d,
	0xcb, 0xe6, 0x32, 0xea, 0x6a, 0x42, 0xbd, 0xbe, 0xa2, 0x15, 0xd6, 0xe2, 0xf9, 0x82, 0x5e, 0xd4,
	0xe9, 0xbb, 0x6c, 0x48, 0xdc, 0x1e, 0x12, 0x5f, 0x4d, 0x44, 0x7b, 0x16, 0x75, 0x63, 0x59, 0x37,
	0xd4, 0x85, 0x94, 0xa1, 0x59, 0xe3, 0xd5, 0xd5, 0xc4, 0x82, 0x56, 0x4c, 0x25, 0xd4, 0x7c, 0x2a,
	0x93, 0xcd, 0xa5, 0x8a, 0x59, 0x3d, 0x67, 0xb9, 0x88, 0xb6, 0x65, 0xf4, 0x8c, 0x6e, 0xfe, 0xaa,
	0x96, 0x7e, 0xc3, 0xab, 0x9d, 0x19, 0x5d, 0xcf, 0x2c, 0x69, 0x6a, 0x2a, 0x9f, 0x55, 0x53, 0xb9,
	0x9c, 0x5e, 0x34, 0x4d, 0x0c, 0xbc, 0xfb, 0x9e, 0xe5, 0x7f, 0xde, 0x32, 0xb3, 0xfe, 0xc0, 0x5b,
	0x1d, 0x38, 0x35, 0x9b, 0xb5, 0x1c, 0x6e, 0xb4, 0x35, 0xb5, 0x9c, 0xcd, 0xe9, 0xaa, 0xf9, 0x13,
	0x2f, 0x29, 0x62, 0x92, 0xcb, 0x7a, 0x5a, 0x5b, 0x32, 0xe4, 0x63, 0xf2, 0xa9, 0x42, 0x6a, 0xd9,
	0x3d, 0x46, 0xcf, 0x6b, 0x85, 0x54, 0x51, 0x2f, 0x18, 0x2e, 0x3f, 0x31, 0x7b, 0x4c, 0x5e, 0xd7,
	0x97, 0xdc, 0xf7, 0xb9, 0xe0, 0x86, 0x56, 0x58, 0xcd, 0x2e, 0x6a, 0xae, 0x21, 0xca, 0x38, 0x28,
	0x17, 0x4a, 0x84, 0x66, 0x71, 0x92, 0x33, 0x7a, 0x36, 0xa7, 0xa5, 0x2f, 0xe2, 0xf0, 0xa4, 0x76,
	0x7d, 0x45, 0x33, 0x8a, 0xb4, 0x1b, 0x9a, 0x19, 0x8a, 0xf9, 0x6c, 0xba, 0x9d, 0xec, 0x27, 0x87,
	0x5b, 0x92, 0xc0, 0x2e, 0x4d, 0xa7, 0x95, 0x09, 0xf8, 0xb8, 0xd4, 0x8d, 0x91, 0xd7, 0x73, 0x86,
	0x56, 0xf2, 0x83, 0x48, 0xe6, 0xb3, 0x69, 0xa3, 0x9d, 0xec, 0xff, 0x48, 0xc9, 0x0f, 0x5e, 0x9a,
	0x4e, 0x1b, 0xca, 0x20, 0xbc, 0x67, 0xfa, 0x41, 0xcb, 0x39, 0x53, 0x11, 0x86, 0xa2, 0x0b, 0x80,
	0x5b, 0x23, 0x88, 0x26, 0xdb, 0x58, 0xd1, 0x21, 0x2a, 0xb2, 0xc5, 0xa9, 0x2f, 0xc0, 0x1e, 0x66,
	0x6c, 0xe9, 0x6c, 0x3a, 0x68, 0xee, 0x3d, 0x10, 0x17, 0x86, 0x5c, 0xdc, 0xe1, 0x65, 0xf4, 0x8d,
	0xc7, 0x7f, 0xef, 0x6e, 0x48, 0xb6, 0x18, 0xe5, 0x17, 0x95, 0xaf, 0x41, 0x87, 0x39, 0xe1, 0x9c,
	0xae, 0x2f, 0x8d, 0x69, 0x4b, 0x5a, 0xc6, 0x8a, 0x29, 0x06, 0x77, 0x1f, 0xbc, 0x55, 0x5a, 0x16,
	0x8e, 0xb5, 0xb1, 0xf4, 0xe7, 0x74, 0x9a, 0x4e, 0x00, 0xf0, 0xa8, 0x6d, 0x8f, 0x98, 0x30, 0x0e,
	0xc6, 0x31, 0xea, 0x4a, 0x21, 0x1e, 0xb7, 0x62, 0x0c, 0x43, 0x3c, 0x3e, 0x97, 0xca, 0x68, 0xe8,
	0x34, 0x59, 0x66, 0xa9, 0xfc, 0x82, 0x40, 0xa7, 0x18, 0x80, 0xcd, 0xb9, 0x39, 0xcd, 0x2f, 0x9b,
	0x72, 0x37, 0xf7, 0x1e, 0xf1, 0x20, 0xcc, 0x1d, 0x30, 0x7b, 0x64, 0x5d, 0xee, 0x83, 0x4e, 0x0a,
	0xb0, 0x1f, 0xf2, 0xc5, 0x6e, 0xf9, 0x73, 0x80, 0xff, 0x2a, 0xae, 0x96, 0x13, 0xbb, 0xaf, 0x76,
	0xe3, 0xd0, 0x8a, 0x70, 0xf4, 0xc2, 0x7c, 0x2a, 0x9d, 0x2e, 0x68, 0x86, 0x61, 0xc2, 0x68, 0x1a,
	0x6d, 0xff, 0xf3, 0x8f, 0x8f, 0xb6, 0x21, 0x92, 0xd3, 0xd6, 0x9d, 0x8b, 0xc5, 0x42, 0x36, 0x97,
	0x49, 0xbe, 0x63, 0x9b, 0xe0, 0x75, 0x25, 0x27, 0x5c, 0x3a, 0x5b, 0xb8, 0x59, 0x00, 0x4e, 0x1a,
	0x03, 0x25, 0xb4, 0x6e, 0x65, 0x2e, 0x94, 0x9b, 0x04, 0x0e, 0xd8, 0x13, 0x7e, 0x26, 0xb7, 0xa0,
	0xe7, 0xd2, 0xd9, 0x5c, 0xe6, 0xff, 0x11, 0x34, 0xcf, 0x08, 0x7c, 0xe0, 0x83, 0x04, 0x45, 0xd0,
	0xe0, 0xdd, 0x15, 0x76, 0x7f, 0xde, 0x1d, 0x47, 0x3d, 0x1e, 0x7a, 0x08, 0x7c, 0xa2, 0x20, 0x6d,
	0x2b, 0x82, 0xe9, 0x6a, 0x17, 0x51, 0x37, 0x08, 0x26, 0x21, 0x0f, 0x66, 0x3b, 0x15, 0x5b, 0xb7,
	0x7d, 0xd6, 0xda, 0x16, 0x78, 0x11, 0xda, 0x44, 0x02, 0x63, 0xbc, 0x85, 0xd7, 0x77, 0xaf, 0x40,
	0x5f, 0xe5, 0x5b, 0x04, 0xba, 0x1d, 0xa9, 0x59, 0x10, 0x74, 0x7e, 0xe9, 0xbd, 0x66, 0xc1, 0xf7,
	0x90, 0xc0, 0x7e, 0x6f, 0x30, 0x75, 0x90, 0xb5, 0x6e, 0x11, 0x88, 0x79, 0x10, 0x08, 0x2c, 0x66,
	0x8d, 0xc2, 0xac, 0xe0, 0xb9, 0xae, 0xaf, 0x2f, 0x8d, 0xdd, 0x27, 0x70, 0xd8, 0x31, 0xa9, 0x2c,
	0x95, 0xed, 0x58, 0x54, 0x3d, 0x27, 0x70, 0x24, 0x00, 0xaa, 0x3a, 0x4d, 0x6b, 0xf7, 0x08, 0x1c,
	0xf2, 0x63, 0xb7, 0xd3, 0xb1, 0xf7, 0xed, 0x00, 0x71, 0xb0, 0xb3, 0x69, 0xee, 0x26, 0xdb, 0x98,
	0x78, 0x6e, 0x13, 0xc4, 0xa3, 0xfc, 0xf8, 0x58, 0xb3, 0x68, 0xfc, 0x15, 0x4b, 0xb8, 0x22, 0x24,
	0x75, 0x90, 0xe2, 0x6e, 0x10, 0xe8, 0x12, 0xe3, 0x0f, 0x28, 0x64, 0x8d, 0x62, 0xec, 0xba, 0xd7,
	0x82, 0xbe, 0xbe, 0xf4, 0x76, 0x97, 0x6d, 0x35, 0x9c, 0x53, 0x96, 0xdd, 0x76, 0x28, 0x9a, 0xfe,
	0xc6, 0x76, 0x9a, 0x14, 0x52, 0x9d, 0xa6, 0xb6, 0x3b, 0x04, 0x0e, 0xfa, 0x90, 0xdb, 0xd9, 0x98,
	0xbb, 0xe3, 0x1f, 0x00, 0x3b, 0x9b, 0xd6, 0x7e, 0xc2, 0xce, 0x92, 0x63, 0x0c, 0xaa, 0xc7, 0xcb,
	0xa6, 0x50, 0x00, 0x12, 0x56, 0x80, 0x9a, 0x85, 0xed, 0x6f, 0xd8, 0x5b, 0x86, 0x37, 0xee, 0x3a,
	0x48, 0x85, 0x0f, 0x09, 0x1c, 0x75, 0xb3, 0x90, 0x65, 0x85, 0x5d, 0xb6, 0x0c, 0x9b, 0x04, 0xe2,
	0x41, 0x09, 0xd4, 0x69, 0x0e, 0xf9, 0x39, 0x4b, 0x90, 0x36, 0x45, 0xc9, 0x8b, 0xce, 0x2e, 0x5b,
	0x9e, 0xdf, 0xb1, 0x83, 0xab, 0x1c, 0x7b, 0x1d, 0xec, 0x94, 0x5f, 0x13, 0x48, 0x88, 0x99, 0xd4,
	0xd1, 0x6e, 0x79, 0x45, 0xa0, 0x37, 0x0c, 0x89, 0x3a, 0xdd, 0x31, 0x3f, 0x63, 0x0f, 0x39, 0x9b,
	0xa6, 0xf7, 0x99, 0x79, 0x97, 0xad, 0xd0, 0x6f, 0x5d, 0x9b, 0xbd, 0x4e, 0x0f, 0xd9, 0x8f, 0x08,
	0x1c, 0x13, 0x12, 0xa9, 0xa3, 0xed, 0xb2, 0xe5, 0xda, 0xf3, 0x1f, 0xc6, 0x33, 0xea, 0x0f, 0x08,
	0x16, 0xaa, 0x1d, 0x8f, 0xd0, 0xdd, 0xba, 0x26, 0xdf, 0x25, 0x58, 0xd8, 0xde, 0x8e, 0x16, 0xd5,
	0xef, 0x83, 0x37, 0xcd, 0x56, 0x11, 0xaa, 0xbd, 0x8f, 0xab, 0x6d, 0x5e, 0x2e, 0x29, 0x5d, 0x32,
	0x40, 0x69, 0xad, 0xb1, 0xb5, 0xd3, 0x72, 0x1d, 0xbb, 0x3b, 0x0e, 0x70, 0x35, 0x56, 0xb2, 0xac,
	0xba, 0x1b, 0x29, 0xaf, 0xee, 0x2a, 0xb3, 0xa2, 0x75, 0xb4, 0x85, 0x49, 0xc0, 0x1b, 0xa5, 0x71,
	0x78, 0x7a, 0xf7, 0xd1, 0xc5, 0x1c, 0xaa, 0x3c, 0x60, 0x25, 0x07, 0xd7, 0xe3, 0x62, 0xb7, 0x46,
	0xc7, 0x03, 0x56, 0x9a, 0x10, 0x21, 0x46, 0x21, 0x3e, 0x0d, 0x4d, 0x76, 0xc3, 0x11, 0xa3, 0xa4,
	0x9b, 0xab, 0x61, 0xdf, 0x2a, 0x29, 0xc2, 0x8c, 0x51, 0x15, 0x6e, 0x57, 0xbb, 0x88, 0xb9, 0xc9,
	0x8a, 0x11, 0x2e, 0xc4, 0x35, 0x96, 0x78, 0x5b, 0xe5, 0x2c, 0xe2, 0xea, 0x70, 0x2e, 0x7a, 0x2d,
	0xb6, 0xad, 0xdc, 0x69, 0x78, 0x9b, 0x8d, 0xc7, 0x30, 0x0a, 0x28, 0x9c, 0x6d, 0xa6, 0xfc, 0xd0,
	0x45, 0x77, 0x7b, 0x27, 0x76, 0x97, 0x45, 0xd4, 0xf7, 0x5d, 0x7b, 0xc0, 0xd5, 0xf3, 0x1d, 0x86,
	0xb7, 0x59, 0xf7, 0x19, 0xe3, 0xa9, 0x8b, 0xcb, 0xc2, 0xee, 0x94, 0x75, 0x5c, 0x99, 0x28, 0xec,
	0x56, 0xed, 0x82, 0xe9, 0x9b, 0xac, 0x5f, 0xba, 0x1d, 0x6c, 0x8d, 0xc5, 0x75, 0xd6, 0x2a, 0x22,
	0xdb, 0xfb, 0xd4, 0x5f, 0xf0, 0x58, 0x63, 0x5b, 0xb1, 0x53, 0xf0, 0x16, 0x8e, 0xc6, 0x38, 0x0a,
	0x24, 0x18, 0xb3, 0x51, 0xda, 0x80, 0x5a, 0xed, 0xa7, 0xf2, 0xe6, 0xb9, 0x72, 0x19, 0xf6, 0x3a,
	0xae, 0xe2, 0x5c, 0x23, 0xd0, 0xe8, 0x68, 0x87, 0x77, 0x79, 0x3c, 0x7f, 0xb1, 0x0f, 0xde, 0x54,
	0x9a, 0xea, 0x7b, 0xff, 0xf8, 0x51, 0x0f, 0x49, 0xa2, 0x5d, 0xef, 0x13, 0x15, 0xde, 0x34, 0x3d,
	0xd3, 0x17, 0x04, 0x3e, 0x26, 0xfe, 0x00, 0x80, 0x7e, 0xca, 0xc3, 0xad, 0xff, 0xb7, 0x07, 0xd1,
	0xc1, 0x4a, 0x4c, 0x2d, 0x76, 0xca, 0xd9, 0x5b, 0x25, 0xa8, 0xdf, 0xf8, 0xcb, 0xab, 0xfb, 0x91,
	0x11, 0x3a, 0xa4, 0x8a, 0x3f, 0xbb, 0xe0, 0xdf, 0x57, 0xac, 0x97, 0xa5, 0x80, 0x0d, 0xf5, 0x4b,
	0xa6, 0xcf, 0x79, 0x3b, 0x0e, 0x7f, 0x4a, 0xa0, 0xc5, 0xf1, 0x55, 0x00, 0x3d, 0x26, 0x83, 0x26,
	0xfa, 0x84, 0x21, 0x9a, 0x08, 0x61, 0x81, 0x1c, 0x46, 0x38, 0x87, 0x01, 0xda, 0xe7, 0xc1, 0xc1,
	0xfe, 0xbe, 0x63, 0x9d, 0x47, 0xde, 0x06, 0x7e, 0x50, 0x42, 0x7f, 0x49, 0xe0, 0xa3, 0xdb, 0xca,
	0x2f, 0xb4, 0x57, 0x06, 0x44, 0x5c, 0x63, 0x8a, 0xf6, 0x85, 0xb2, 0x41, 0xf8, 0xc3, 0x1c, 0x7e,
	0x3f, 0xed, 0xf5, 0x80, 0x6f, 0x7d, 0xbe, 0xb2, 0x8e, 0x0f, 0xee, 0x0d, 0xb5, 0xfc, 0xcc, 0xfd,
	0x7b, 0x02, 0x7b, 0x9c, 0xce, 0x69, 0x22, 0x38, 0x10, 0x86, 0xbd, 0x37, 0x8c, 0x09, 0x42, 0xbf,
	0xc8, 0xa1, 0x4f, 0xd1, 0x89, 0xf0, 0xd0, 0xd5, 0x75, 0x57, 0x36, 0xd9, 0xa0, 0x9b, 0x04, 0xda,
	0xbd, 0x8a, 0x30, 0xf4, 0x84, 0x1f, 0x4a, 0xc9, 0xeb, 0x41, 0xf4, 0x64, 0x65, 0xc6, 0x48, 0x76,
	0x9a, 0x93, 0x1d, 0xa2, 0x27, 0x03, 0x92, 0x15, 0x9e, 0xe4, 0xe9, 0x7f, 0x08, 0xec, 0xf3, 0x98,
	0x8f, 0x0e, 0x56, 0x00, 0x92, 0x11, 0x3c, 0x51, 0x91, 0x2d, 0xf2, 0xfb, 0x3c, 0xe7, 0x97, 0xa4,
	0x73, 0xd5, 0xf0, 0x13, 0x2e, 0xeb, 0x1f, 0x09, 0xec, 0x15, 0x14, 0x6f, 0xe8, 0xf1, 0x20, 0xd9,
	0x4b, 0xb0, 0x98, 0x9f, 0x08, 0x6d, 0x87, 0x3c, 0x27, 0x39, 0xcf, 0x93, 0x74, 0x30, 0x64, 0xca,
	0x2b, 0x5f, 0xc5, 0x4d, 0x02, 0xd4, 0x3d, 0x11, 0x1d, 0x08, 0x07, 0x8c, 0xf1, 0x39, 0x1e, 0xd6,
	0x0c, 0xe9, 0x7c, 0x8e, 0xd3, 0x99, 0xa3, 0xe7, 0x2b, 0xa7, 0x23, 0x5c, 0xb4, 0xff, 0x12, 0xe8,
	0x94, 0x95, 0x78, 0xe8, 0x70, 0x10, 0xd4, 0xb2, 0x3d, 0x39, 0x52, 0xb9, 0x03, 0x14, 0xe0, 0x02,
	0x17, 0x60, 0x82, 0x8e, 0x85, 0x14, 0x40, 0xbc, 0x3f, 0x6f, 0x44, 0xa0, 0x43, 0x32, 0x37, 0x1d,
	0xaa, 0x10, 0x34, 0x23, 0x3d, 0x5c, 0xb1, 0x3d, 0x72, 0xd6, 0x38, 0xe7, 0xab, 0xf4, 0x4a, 0x2d,
	0x38, 0x0b, 0x97, 0xff, 0x09, 0x01, 0xea, 0xae, 0x1f, 0xc9, 0x23, 0xdc, 0xb3, 0x54, 0x26, 0x8f,
	0x70, 0xef, 0x32, 0x95, 0x32, 0xce, 0xc9, 0x0e, 0xd2, 0x4f, 0x86, 0x7a, 0xbe, 0x97, 0x2f, 0xea,
	0x73, 0x02, 0xad, 0xae, 0x59, 0x68, 0x7f, 0x28, 0x50, 0x8c, 0xca, 0x40, 0x48, 0x2b, 0x64, 0xf2,
	0x59, 0xce, 0xe4, 0x3c, 0x3d, 0x57, 0x29, 0x13, 0xe1, 0x52, 0xfd, 0x8b, 0x40, 0x87, 0xa4, 0xba,
	0x24, 0x0f, 0x59, 0xff, 0xd2, 0x9a, 0x3c, 0x64, 0x03, 0x94, 0xb5, 0x94, 0x59, 0xce, 0x7d, 0x8c,
	0x8e, 0x86, 0xe2, 0x2e, 0xde, 0xa4, 0x5f, 0x8f, 0x40, 0xd4, 0x7b, 0x62, 0x7a, 0xaa, 0x32, 0xc0,
	0x8c, 0xef, 0x50, 0xa5, 0xe6, 0x48, 0x77, 0x91, 0xd3, 0xbd, 0x42, 0x2f, 0x55, 0x4f, 0xd7, 0xf3,
	0xa8, 0xe4, 0xd5, 0x3f, 0x94, 0x1f, 0x95, 0x7c, 0xba, 0xa5, 0xf2, 0xa3, 0x92, 0x5f, 0xcb, 0x32,
	0xd8, 0x51, 0xc9, 0x87, 0x9c, 0x75, 0xd4, 0x28, 0xa5, 0xe2, 0xf7, 0x7d, 0x7b, 0x73, 0x74, 0x2c,
	0x30, 0x5c, 0x59, 0x8c, 0x8f, 0x57, 0xe9, 0x25, 0xcc, 0xa9, 0xd8, 0x8f, 0x3d, 0x0f, 0x02, 0x4b,
	0x87, 0x7f, 0x13, 0xe8, 0x94, 0x35, 0xc1, 0xe4, 0x4f, 0xe2, 0x00, 0xad, 0x3f, 0xf9, 0x93, 0x38,
	0x48, 0xff, 0x4d, 0x99, 0xe1, 0xc4, 0x47, 0xe9, 0x48, 0x85, 0xc4, 0x79, 0x8d, 0xec, 0x3b, 0x11,
	0xf8, 0x20, 0x50, 0xa3, 0x89, 0x4e, 0x85, 0x82, 0x2e, 0x0b, 0x81, 0xe9, 0x1a, 0x78, 0x42, 0x35,
	0x2e, 0x73, 0x35, 0xce, 0xd1, 0x33, 0x55, 0x87, 0x01, 0xd7, 0xe5, 0x9f, 0x04, 0x3a, 0x24, 0xed,
	0x1d, 0x79, 0xaa, 0xf7, 0x6f, 0x69, 0x45, 0x87, 0x2b, 0xb6, 0x47, 0xe6, 0xe7, 0x38, 0xf3, 0xd3,
	0x74, 0xb8, 0x42, 0xe6, 0x76, 0x55, 0xe1, 0x5e, 0x04, 0x0e, 0x04, 0x69, 0xa0, 0xd0, 0xc9, 0x30,
	0xb8, 0x65, 0x41, 0x30, 0x55, 0xbd, 0x23, 0x54, 0xe2, 0x12, 0x57, 0xe2, 0x2c, 0x9d, 0xae, 0x3a,
	0x06, 0x6c, 0x4d, 0x1e, 0x11, 0xd8, 0xe3, 0x6c, 0x60, 0xc8, 0x5f, 0xf9, 0x85, 0xad, 0x19, 0xf9,
	0x2b, 0xbf, 0xb8, 0x3f, 0xa2, 0x4c, 0x71, 0x46, 0xa7, 0xe8, 0x09, 0x39, 0x23, 0xf3, 0xe8, 0xe9,
	0x99, 0xd9, 0x1f, 0x13, 0x68, 0x71, 0x4c, 0x22, 0xaf, 0x16, 0x89, 0x5a, 0x22, 0xd1, 0x44, 0x08,
	0x0b, 0x24, 0x90, 0xe4, 0x04, 0x26, 0xe9, 0x78, 0x15, 0x04, 0xf8, 0x5b, 0x30, 0xfd, 0x13, 0x01,
	0xea, 0xee, 0x18, 0xc8, 0xcf, 0xc9, 0x9e, 0x3d, 0x11, 0xf9, 0x39, 0xd9, 0xbb, 0x31, 0x11, 0x6a,
	0xdb, 0x79, 0x31, 0xe3, 0x59, 0xe6, 0x05, 0x81, 0x56, 0xd7, 0x64, 0xf2, 0xe3, 0xb2, 0x57, 0x0b,
	0x22, 0x3a, 0x10, 0xd2, 0x0a, 0x09, 0x5d, 0xe5, 0x84, 0x66, 0xe9, 0x4c, 0x95, 0x84, 0x9c, 0x2f,
	0x41, 0xf4, 0x0f, 0xe5, 0xf4, 0xec, 0x2a, 0x6c, 0x7f, 0x98, 0x9d, 0x6f, 0x84, 0xa3, 0x57, 0x59,
	0xed, 0xd5, 0x87, 0x9e, 0x9d, 0x11, 0x9e, 0x11, 0x78, 0x67, 0xfb, 0x54, 0xb4, 0x2f, 0x0c, 0x30,
	0xc6, 0xa6, 0x3f, 0x9c, 0x11, 0x92, 0xb9, 0xc2, 0xc9, 0xcc, 0xd0, 0xb3, 0xd5, 0x91, 0x71, 0x1c,
	0x87, 0xe9, 0x6d, 0x02, 0x8d, 0x58, 0x4e, 0x3e, 0x22, 0xad, 0x6f, 0x39, 0xea, 0xc8, 0x3d, 0x41,
	0x86, 0x22, 0xf6, 0x1e, 0x8e, 0xbd, 0x9b, 0x76, 0xa9, 0xb2, 0xff, 0x3d, 0x1c, 0x9d, 0x79, 0xfc,
	0x32, 0x46, 0x9e, 0xbe, 0x8c, 0x91, 0xcd, 0x97, 0x31, 0x72, 0x77, 0x2b, 0xd6, 0xf0, 0x74, 0x2b,
	0xd6, 0xf0, 0xd7, 0xad, 0x58, 0xc3, 0xd5, 0xbe, 0x4c, 0xb6, 0xf8, 0xc5, 0x95, 0x85, 0xf8, 0xa2,
	0xbe, 0x6c, 0xbb, 0x38, 0xba, 0x94, 0x5a, 0x30, 0xb8, 0xc3, 0xaf, 0x94, 0xb9, 0x2c, 0xae, 0xe5,
	0x35, 0x63, 0xa1, 0xd1, 0xfc, 0x27, 0xc3, 0xbe, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x71, 0x01,
	0x77, 0x5c, 0xfa, 0x39, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// OperatorJoinedServices queries the services that an operator has joined.
	OperatorJoinedServices(ctx context.Context, in *QueryOperatorJoinedServicesRequest, opts ...grpc.CallOption) (*QueryOperatorJoinedServicesResponse, error)
	// ServiceParams queries the service params for the given service.
	ServiceParams(ctx context.Context, in *QueryServiceParamsRequest, opts ...grpc.CallOption) (*QueryServiceParamsResponse, error)
	// PoolDelegations queries the delegations info for the given pool.
	PoolDelegations(ctx context.Context, in *QueryPoolDelegationsRequest, opts ...grpc.CallOption) (*QueryPoolDelegationsResponse, error)
	// PoolDelegation queries the delegation info for the given pool and
	// delegator.
	PoolDelegation(ctx context.Context, in *QueryPoolDelegationRequest, opts ...grpc.CallOption) (*QueryPoolDelegationResponse, error)
	// PoolUnbondingDelegations queries the unbonding delegations info for the
	// given pool.
	PoolUnbondingDelegations(ctx context.Context, in *QueryPoolUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryPoolUnbondingDelegationsResponse, error)
	// PoolUnbondingDelegation queries the unbonding delegation info for the given
	// pool and delegator.
	PoolUnbondingDelegation(ctx context.Context, in *QueryPoolUnbondingDelegationRequest, opts ...grpc.CallOption) (*QueryPoolUnbondingDelegationResponse, error)
	// OperatorDelegations queries the delegations info for the given operator.
	OperatorDelegations(ctx context.Context, in *QueryOperatorDelegationsRequest, opts ...grpc.CallOption) (*QueryOperatorDelegationsResponse, error)
	// OperatorDelegation queries the delegation info for the given operator and
	// delegator.
	OperatorDelegation(ctx context.Context, in *QueryOperatorDelegationRequest, opts ...grpc.CallOption) (*QueryOperatorDelegationResponse, error)
	// OperatorUnbondingDelegations queries the unbonding delegations info for the
	// given operator.
	OperatorUnbondingDelegations(ctx context.Context, in *QueryOperatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryOperatorUnbondingDelegationsResponse, error)
	// OperatorUnbondingDelegation queries the unbonding delegation info for the
	// given operator and delegator.
	OperatorUnbondingDelegation(ctx context.Context, in *QueryOperatorUnbondingDelegationRequest, opts ...grpc.CallOption) (*QueryOperatorUnbondingDelegationResponse, error)
	// ServiceDelegations queries the delegations info for the given service.
	ServiceDelegations(ctx context.Context, in *QueryServiceDelegationsRequest, opts ...grpc.CallOption) (*QueryServiceDelegationsResponse, error)
	// ServiceDelegation queries the delegation info for the given service and
	// delegator.
	ServiceDelegation(ctx context.Context, in *QueryServiceDelegationRequest, opts ...grpc.CallOption) (*QueryServiceDelegationResponse, error)
	// ServiceUnbondingDelegations queries the unbonding delegations info for the
	// given service.
	ServiceUnbondingDelegations(ctx context.Context, in *QueryServiceUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryServiceUnbondingDelegationsResponse, error)
	// ServiceUnbondingDelegation queries the unbonding delegation info for the
	// given service and delegator.
	ServiceUnbondingDelegation(ctx context.Context, in *QueryServiceUnbondingDelegationRequest, opts ...grpc.CallOption) (*QueryServiceUnbondingDelegationResponse, error)
	// DelegatorPoolDelegations queries all the pool delegations of a given
	// delegator address.
	DelegatorPoolDelegations(ctx context.Context, in *QueryDelegatorPoolDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolDelegationsResponse, error)
	// DelegatorPoolUnbondingDelegations queries all the pool unbonding
	// delegations of a given delegator address.
	DelegatorPoolUnbondingDelegations(ctx context.Context, in *QueryDelegatorPoolUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolUnbondingDelegationsResponse, error)
	// DelegatorOperatorDelegations queries all the operator delegations of a
	// given delegator address.
	DelegatorOperatorDelegations(ctx context.Context, in *QueryDelegatorOperatorDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorDelegationsResponse, error)
	// DelegatorOperatorUnbondingDelegations queries all the operator unbonding
	// delegations of a given delegator address.
	DelegatorOperatorUnbondingDelegations(ctx context.Context, in *QueryDelegatorOperatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorUnbondingDelegationsResponse, error)
	// DelegatorServiceDelegations queries all the service delegations of a given
	// delegator address.
	DelegatorServiceDelegations(ctx context.Context, in *QueryDelegatorServiceDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorServiceDelegationsResponse, error)
	// DelegatorServiceUnbondingDelegations queries all the service unbonding
	// delegations of a given delegator address.
	DelegatorServiceUnbondingDelegations(ctx context.Context, in *QueryDelegatorServiceUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorServiceUnbondingDelegationsResponse, error)
	// DelegatorPools queries all pools info for given delegator
	// address.
	DelegatorPools(ctx context.Context, in *QueryDelegatorPoolsRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolsResponse, error)
	// DelegatorPool queries the pool info for given delegator and pool id.
	DelegatorPool(ctx context.Context, in *QueryDelegatorPoolRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolResponse, error)
	// DelegatorOperators queries all operators info for given delegator
	DelegatorOperators(ctx context.Context, in *QueryDelegatorOperatorsRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorsResponse, error)
	// DelegatorOperator queries the operator info for given delegator and
	// operator id.
	DelegatorOperator(ctx context.Context, in *QueryDelegatorOperatorRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorResponse, error)
	// DelegatorServices queries all services info for given delegator
	DelegatorServices(ctx context.Context, in *QueryDelegatorServicesRequest, opts ...grpc.CallOption) (*QueryDelegatorServicesResponse, error)
	// DelegatorService queries the service info for given delegator and service
	// id.
	DelegatorService(ctx context.Context, in *QueryDelegatorServiceRequest, opts ...grpc.CallOption) (*QueryDelegatorServiceResponse, error)
	// Params queries the restaking parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) OperatorJoinedServices(ctx context.Context, in *QueryOperatorJoinedServicesRequest, opts ...grpc.CallOption) (*QueryOperatorJoinedServicesResponse, error) {
	out := new(QueryOperatorJoinedServicesResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/OperatorJoinedServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceParams(ctx context.Context, in *QueryServiceParamsRequest, opts ...grpc.CallOption) (*QueryServiceParamsResponse, error) {
	out := new(QueryServiceParamsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/ServiceParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolDelegations(ctx context.Context, in *QueryPoolDelegationsRequest, opts ...grpc.CallOption) (*QueryPoolDelegationsResponse, error) {
	out := new(QueryPoolDelegationsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/PoolDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolDelegation(ctx context.Context, in *QueryPoolDelegationRequest, opts ...grpc.CallOption) (*QueryPoolDelegationResponse, error) {
	out := new(QueryPoolDelegationResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/PoolDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolUnbondingDelegations(ctx context.Context, in *QueryPoolUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryPoolUnbondingDelegationsResponse, error) {
	out := new(QueryPoolUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/PoolUnbondingDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolUnbondingDelegation(ctx context.Context, in *QueryPoolUnbondingDelegationRequest, opts ...grpc.CallOption) (*QueryPoolUnbondingDelegationResponse, error) {
	out := new(QueryPoolUnbondingDelegationResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/PoolUnbondingDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorDelegations(ctx context.Context, in *QueryOperatorDelegationsRequest, opts ...grpc.CallOption) (*QueryOperatorDelegationsResponse, error) {
	out := new(QueryOperatorDelegationsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/OperatorDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorDelegation(ctx context.Context, in *QueryOperatorDelegationRequest, opts ...grpc.CallOption) (*QueryOperatorDelegationResponse, error) {
	out := new(QueryOperatorDelegationResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/OperatorDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorUnbondingDelegations(ctx context.Context, in *QueryOperatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryOperatorUnbondingDelegationsResponse, error) {
	out := new(QueryOperatorUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/OperatorUnbondingDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorUnbondingDelegation(ctx context.Context, in *QueryOperatorUnbondingDelegationRequest, opts ...grpc.CallOption) (*QueryOperatorUnbondingDelegationResponse, error) {
	out := new(QueryOperatorUnbondingDelegationResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/OperatorUnbondingDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceDelegations(ctx context.Context, in *QueryServiceDelegationsRequest, opts ...grpc.CallOption) (*QueryServiceDelegationsResponse, error) {
	out := new(QueryServiceDelegationsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/ServiceDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceDelegation(ctx context.Context, in *QueryServiceDelegationRequest, opts ...grpc.CallOption) (*QueryServiceDelegationResponse, error) {
	out := new(QueryServiceDelegationResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/ServiceDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceUnbondingDelegations(ctx context.Context, in *QueryServiceUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryServiceUnbondingDelegationsResponse, error) {
	out := new(QueryServiceUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/ServiceUnbondingDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceUnbondingDelegation(ctx context.Context, in *QueryServiceUnbondingDelegationRequest, opts ...grpc.CallOption) (*QueryServiceUnbondingDelegationResponse, error) {
	out := new(QueryServiceUnbondingDelegationResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/ServiceUnbondingDelegation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorPoolDelegations(ctx context.Context, in *QueryDelegatorPoolDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolDelegationsResponse, error) {
	out := new(QueryDelegatorPoolDelegationsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/DelegatorPoolDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorPoolUnbondingDelegations(ctx context.Context, in *QueryDelegatorPoolUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolUnbondingDelegationsResponse, error) {
	out := new(QueryDelegatorPoolUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/DelegatorPoolUnbondingDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorOperatorDelegations(ctx context.Context, in *QueryDelegatorOperatorDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorDelegationsResponse, error) {
	out := new(QueryDelegatorOperatorDelegationsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/DelegatorOperatorDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorOperatorUnbondingDelegations(ctx context.Context, in *QueryDelegatorOperatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorUnbondingDelegationsResponse, error) {
	out := new(QueryDelegatorOperatorUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/DelegatorOperatorUnbondingDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorServiceDelegations(ctx context.Context, in *QueryDelegatorServiceDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorServiceDelegationsResponse, error) {
	out := new(QueryDelegatorServiceDelegationsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/DelegatorServiceDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorServiceUnbondingDelegations(ctx context.Context, in *QueryDelegatorServiceUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorServiceUnbondingDelegationsResponse, error) {
	out := new(QueryDelegatorServiceUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/DelegatorServiceUnbondingDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorPools(ctx context.Context, in *QueryDelegatorPoolsRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolsResponse, error) {
	out := new(QueryDelegatorPoolsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/DelegatorPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorPool(ctx context.Context, in *QueryDelegatorPoolRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolResponse, error) {
	out := new(QueryDelegatorPoolResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/DelegatorPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorOperators(ctx context.Context, in *QueryDelegatorOperatorsRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorsResponse, error) {
	out := new(QueryDelegatorOperatorsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/DelegatorOperators", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorOperator(ctx context.Context, in *QueryDelegatorOperatorRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorResponse, error) {
	out := new(QueryDelegatorOperatorResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/DelegatorOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorServices(ctx context.Context, in *QueryDelegatorServicesRequest, opts ...grpc.CallOption) (*QueryDelegatorServicesResponse, error) {
	out := new(QueryDelegatorServicesResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/DelegatorServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorService(ctx context.Context, in *QueryDelegatorServiceRequest, opts ...grpc.CallOption) (*QueryDelegatorServiceResponse, error) {
	out := new(QueryDelegatorServiceResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/DelegatorService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// OperatorJoinedServices queries the services that an operator has joined.
	OperatorJoinedServices(context.Context, *QueryOperatorJoinedServicesRequest) (*QueryOperatorJoinedServicesResponse, error)
	// ServiceParams queries the service params for the given service.
	ServiceParams(context.Context, *QueryServiceParamsRequest) (*QueryServiceParamsResponse, error)
	// PoolDelegations queries the delegations info for the given pool.
	PoolDelegations(context.Context, *QueryPoolDelegationsRequest) (*QueryPoolDelegationsResponse, error)
	// PoolDelegation queries the delegation info for the given pool and
	// delegator.
	PoolDelegation(context.Context, *QueryPoolDelegationRequest) (*QueryPoolDelegationResponse, error)
	// PoolUnbondingDelegations queries the unbonding delegations info for the
	// given pool.
	PoolUnbondingDelegations(context.Context, *QueryPoolUnbondingDelegationsRequest) (*QueryPoolUnbondingDelegationsResponse, error)
	// PoolUnbondingDelegation queries the unbonding delegation info for the given
	// pool and delegator.
	PoolUnbondingDelegation(context.Context, *QueryPoolUnbondingDelegationRequest) (*QueryPoolUnbondingDelegationResponse, error)
	// OperatorDelegations queries the delegations info for the given operator.
	OperatorDelegations(context.Context, *QueryOperatorDelegationsRequest) (*QueryOperatorDelegationsResponse, error)
	// OperatorDelegation queries the delegation info for the given operator and
	// delegator.
	OperatorDelegation(context.Context, *QueryOperatorDelegationRequest) (*QueryOperatorDelegationResponse, error)
	// OperatorUnbondingDelegations queries the unbonding delegations info for the
	// given operator.
	OperatorUnbondingDelegations(context.Context, *QueryOperatorUnbondingDelegationsRequest) (*QueryOperatorUnbondingDelegationsResponse, error)
	// OperatorUnbondingDelegation queries the unbonding delegation info for the
	// given operator and delegator.
	OperatorUnbondingDelegation(context.Context, *QueryOperatorUnbondingDelegationRequest) (*QueryOperatorUnbondingDelegationResponse, error)
	// ServiceDelegations queries the delegations info for the given service.
	ServiceDelegations(context.Context, *QueryServiceDelegationsRequest) (*QueryServiceDelegationsResponse, error)
	// ServiceDelegation queries the delegation info for the given service and
	// delegator.
	ServiceDelegation(context.Context, *QueryServiceDelegationRequest) (*QueryServiceDelegationResponse, error)
	// ServiceUnbondingDelegations queries the unbonding delegations info for the
	// given service.
	ServiceUnbondingDelegations(context.Context, *QueryServiceUnbondingDelegationsRequest) (*QueryServiceUnbondingDelegationsResponse, error)
	// ServiceUnbondingDelegation queries the unbonding delegation info for the
	// given service and delegator.
	ServiceUnbondingDelegation(context.Context, *QueryServiceUnbondingDelegationRequest) (*QueryServiceUnbondingDelegationResponse, error)
	// DelegatorPoolDelegations queries all the pool delegations of a given
	// delegator address.
	DelegatorPoolDelegations(context.Context, *QueryDelegatorPoolDelegationsRequest) (*QueryDelegatorPoolDelegationsResponse, error)
	// DelegatorPoolUnbondingDelegations queries all the pool unbonding
	// delegations of a given delegator address.
	DelegatorPoolUnbondingDelegations(context.Context, *QueryDelegatorPoolUnbondingDelegationsRequest) (*QueryDelegatorPoolUnbondingDelegationsResponse, error)
	// DelegatorOperatorDelegations queries all the operator delegations of a
	// given delegator address.
	DelegatorOperatorDelegations(context.Context, *QueryDelegatorOperatorDelegationsRequest) (*QueryDelegatorOperatorDelegationsResponse, error)
	// DelegatorOperatorUnbondingDelegations queries all the operator unbonding
	// delegations of a given delegator address.
	DelegatorOperatorUnbondingDelegations(context.Context, *QueryDelegatorOperatorUnbondingDelegationsRequest) (*QueryDelegatorOperatorUnbondingDelegationsResponse, error)
	// DelegatorServiceDelegations queries all the service delegations of a given
	// delegator address.
	DelegatorServiceDelegations(context.Context, *QueryDelegatorServiceDelegationsRequest) (*QueryDelegatorServiceDelegationsResponse, error)
	// DelegatorServiceUnbondingDelegations queries all the service unbonding
	// delegations of a given delegator address.
	DelegatorServiceUnbondingDelegations(context.Context, *QueryDelegatorServiceUnbondingDelegationsRequest) (*QueryDelegatorServiceUnbondingDelegationsResponse, error)
	// DelegatorPools queries all pools info for given delegator
	// address.
	DelegatorPools(context.Context, *QueryDelegatorPoolsRequest) (*QueryDelegatorPoolsResponse, error)
	// DelegatorPool queries the pool info for given delegator and pool id.
	DelegatorPool(context.Context, *QueryDelegatorPoolRequest) (*QueryDelegatorPoolResponse, error)
	// DelegatorOperators queries all operators info for given delegator
	DelegatorOperators(context.Context, *QueryDelegatorOperatorsRequest) (*QueryDelegatorOperatorsResponse, error)
	// DelegatorOperator queries the operator info for given delegator and
	// operator id.
	DelegatorOperator(context.Context, *QueryDelegatorOperatorRequest) (*QueryDelegatorOperatorResponse, error)
	// DelegatorServices queries all services info for given delegator
	DelegatorServices(context.Context, *QueryDelegatorServicesRequest) (*QueryDelegatorServicesResponse, error)
	// DelegatorService queries the service info for given delegator and service
	// id.
	DelegatorService(context.Context, *QueryDelegatorServiceRequest) (*QueryDelegatorServiceResponse, error)
	// Params queries the restaking parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) OperatorJoinedServices(ctx context.Context, req *QueryOperatorJoinedServicesRequest) (*QueryOperatorJoinedServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorJoinedServices not implemented")
}
func (*UnimplementedQueryServer) ServiceParams(ctx context.Context, req *QueryServiceParamsRequest) (*QueryServiceParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceParams not implemented")
}
func (*UnimplementedQueryServer) PoolDelegations(ctx context.Context, req *QueryPoolDelegationsRequest) (*QueryPoolDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolDelegations not implemented")
}
func (*UnimplementedQueryServer) PoolDelegation(ctx context.Context, req *QueryPoolDelegationRequest) (*QueryPoolDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolDelegation not implemented")
}
func (*UnimplementedQueryServer) PoolUnbondingDelegations(ctx context.Context, req *QueryPoolUnbondingDelegationsRequest) (*QueryPoolUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolUnbondingDelegations not implemented")
}
func (*UnimplementedQueryServer) PoolUnbondingDelegation(ctx context.Context, req *QueryPoolUnbondingDelegationRequest) (*QueryPoolUnbondingDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolUnbondingDelegation not implemented")
}
func (*UnimplementedQueryServer) OperatorDelegations(ctx context.Context, req *QueryOperatorDelegationsRequest) (*QueryOperatorDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorDelegations not implemented")
}
func (*UnimplementedQueryServer) OperatorDelegation(ctx context.Context, req *QueryOperatorDelegationRequest) (*QueryOperatorDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorDelegation not implemented")
}
func (*UnimplementedQueryServer) OperatorUnbondingDelegations(ctx context.Context, req *QueryOperatorUnbondingDelegationsRequest) (*QueryOperatorUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorUnbondingDelegations not implemented")
}
func (*UnimplementedQueryServer) OperatorUnbondingDelegation(ctx context.Context, req *QueryOperatorUnbondingDelegationRequest) (*QueryOperatorUnbondingDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorUnbondingDelegation not implemented")
}
func (*UnimplementedQueryServer) ServiceDelegations(ctx context.Context, req *QueryServiceDelegationsRequest) (*QueryServiceDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceDelegations not implemented")
}
func (*UnimplementedQueryServer) ServiceDelegation(ctx context.Context, req *QueryServiceDelegationRequest) (*QueryServiceDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceDelegation not implemented")
}
func (*UnimplementedQueryServer) ServiceUnbondingDelegations(ctx context.Context, req *QueryServiceUnbondingDelegationsRequest) (*QueryServiceUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceUnbondingDelegations not implemented")
}
func (*UnimplementedQueryServer) ServiceUnbondingDelegation(ctx context.Context, req *QueryServiceUnbondingDelegationRequest) (*QueryServiceUnbondingDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceUnbondingDelegation not implemented")
}
func (*UnimplementedQueryServer) DelegatorPoolDelegations(ctx context.Context, req *QueryDelegatorPoolDelegationsRequest) (*QueryDelegatorPoolDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorPoolDelegations not implemented")
}
func (*UnimplementedQueryServer) DelegatorPoolUnbondingDelegations(ctx context.Context, req *QueryDelegatorPoolUnbondingDelegationsRequest) (*QueryDelegatorPoolUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorPoolUnbondingDelegations not implemented")
}
func (*UnimplementedQueryServer) DelegatorOperatorDelegations(ctx context.Context, req *QueryDelegatorOperatorDelegationsRequest) (*QueryDelegatorOperatorDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorOperatorDelegations not implemented")
}
func (*UnimplementedQueryServer) DelegatorOperatorUnbondingDelegations(ctx context.Context, req *QueryDelegatorOperatorUnbondingDelegationsRequest) (*QueryDelegatorOperatorUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorOperatorUnbondingDelegations not implemented")
}
func (*UnimplementedQueryServer) DelegatorServiceDelegations(ctx context.Context, req *QueryDelegatorServiceDelegationsRequest) (*QueryDelegatorServiceDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorServiceDelegations not implemented")
}
func (*UnimplementedQueryServer) DelegatorServiceUnbondingDelegations(ctx context.Context, req *QueryDelegatorServiceUnbondingDelegationsRequest) (*QueryDelegatorServiceUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorServiceUnbondingDelegations not implemented")
}
func (*UnimplementedQueryServer) DelegatorPools(ctx context.Context, req *QueryDelegatorPoolsRequest) (*QueryDelegatorPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorPools not implemented")
}
func (*UnimplementedQueryServer) DelegatorPool(ctx context.Context, req *QueryDelegatorPoolRequest) (*QueryDelegatorPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorPool not implemented")
}
func (*UnimplementedQueryServer) DelegatorOperators(ctx context.Context, req *QueryDelegatorOperatorsRequest) (*QueryDelegatorOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorOperators not implemented")
}
func (*UnimplementedQueryServer) DelegatorOperator(ctx context.Context, req *QueryDelegatorOperatorRequest) (*QueryDelegatorOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorOperator not implemented")
}
func (*UnimplementedQueryServer) DelegatorServices(ctx context.Context, req *QueryDelegatorServicesRequest) (*QueryDelegatorServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorServices not implemented")
}
func (*UnimplementedQueryServer) DelegatorService(ctx context.Context, req *QueryDelegatorServiceRequest) (*QueryDelegatorServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorService not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_OperatorJoinedServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorJoinedServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorJoinedServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/OperatorJoinedServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorJoinedServices(ctx, req.(*QueryOperatorJoinedServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/ServiceParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceParams(ctx, req.(*QueryServiceParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/PoolDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolDelegations(ctx, req.(*QueryPoolDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/PoolDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolDelegation(ctx, req.(*QueryPoolDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/PoolUnbondingDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolUnbondingDelegations(ctx, req.(*QueryPoolUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolUnbondingDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolUnbondingDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolUnbondingDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/PoolUnbondingDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolUnbondingDelegation(ctx, req.(*QueryPoolUnbondingDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/OperatorDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorDelegations(ctx, req.(*QueryOperatorDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/OperatorDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorDelegation(ctx, req.(*QueryOperatorDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/OperatorUnbondingDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorUnbondingDelegations(ctx, req.(*QueryOperatorUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorUnbondingDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorUnbondingDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorUnbondingDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/OperatorUnbondingDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorUnbondingDelegation(ctx, req.(*QueryOperatorUnbondingDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/ServiceDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceDelegations(ctx, req.(*QueryServiceDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/ServiceDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceDelegation(ctx, req.(*QueryServiceDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/ServiceUnbondingDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceUnbondingDelegations(ctx, req.(*QueryServiceUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceUnbondingDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceUnbondingDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceUnbondingDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/ServiceUnbondingDelegation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceUnbondingDelegation(ctx, req.(*QueryServiceUnbondingDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorPoolDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorPoolDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorPoolDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/DelegatorPoolDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorPoolDelegations(ctx, req.(*QueryDelegatorPoolDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorPoolUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorPoolUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorPoolUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/DelegatorPoolUnbondingDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorPoolUnbondingDelegations(ctx, req.(*QueryDelegatorPoolUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorOperatorDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorOperatorDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorOperatorDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/DelegatorOperatorDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorOperatorDelegations(ctx, req.(*QueryDelegatorOperatorDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorOperatorUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorOperatorUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorOperatorUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/DelegatorOperatorUnbondingDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorOperatorUnbondingDelegations(ctx, req.(*QueryDelegatorOperatorUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorServiceDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorServiceDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorServiceDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/DelegatorServiceDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorServiceDelegations(ctx, req.(*QueryDelegatorServiceDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorServiceUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorServiceUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorServiceUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/DelegatorServiceUnbondingDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorServiceUnbondingDelegations(ctx, req.(*QueryDelegatorServiceUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/DelegatorPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorPools(ctx, req.(*QueryDelegatorPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/DelegatorPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorPool(ctx, req.(*QueryDelegatorPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/DelegatorOperators",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorOperators(ctx, req.(*QueryDelegatorOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/DelegatorOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorOperator(ctx, req.(*QueryDelegatorOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/DelegatorServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorServices(ctx, req.(*QueryDelegatorServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/DelegatorService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorService(ctx, req.(*QueryDelegatorServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milkyway.restaking.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OperatorJoinedServices",
			Handler:    _Query_OperatorJoinedServices_Handler,
		},
		{
			MethodName: "ServiceParams",
			Handler:    _Query_ServiceParams_Handler,
		},
		{
			MethodName: "PoolDelegations",
			Handler:    _Query_PoolDelegations_Handler,
		},
		{
			MethodName: "PoolDelegation",
			Handler:    _Query_PoolDelegation_Handler,
		},
		{
			MethodName: "PoolUnbondingDelegations",
			Handler:    _Query_PoolUnbondingDelegations_Handler,
		},
		{
			MethodName: "PoolUnbondingDelegation",
			Handler:    _Query_PoolUnbondingDelegation_Handler,
		},
		{
			MethodName: "OperatorDelegations",
			Handler:    _Query_OperatorDelegations_Handler,
		},
		{
			MethodName: "OperatorDelegation",
			Handler:    _Query_OperatorDelegation_Handler,
		},
		{
			MethodName: "OperatorUnbondingDelegations",
			Handler:    _Query_OperatorUnbondingDelegations_Handler,
		},
		{
			MethodName: "OperatorUnbondingDelegation",
			Handler:    _Query_OperatorUnbondingDelegation_Handler,
		},
		{
			MethodName: "ServiceDelegations",
			Handler:    _Query_ServiceDelegations_Handler,
		},
		{
			MethodName: "ServiceDelegation",
			Handler:    _Query_ServiceDelegation_Handler,
		},
		{
			MethodName: "ServiceUnbondingDelegations",
			Handler:    _Query_ServiceUnbondingDelegations_Handler,
		},
		{
			MethodName: "ServiceUnbondingDelegation",
			Handler:    _Query_ServiceUnbondingDelegation_Handler,
		},
		{
			MethodName: "DelegatorPoolDelegations",
			Handler:    _Query_DelegatorPoolDelegations_Handler,
		},
		{
			MethodName: "DelegatorPoolUnbondingDelegations",
			Handler:    _Query_DelegatorPoolUnbondingDelegations_Handler,
		},
		{
			MethodName: "DelegatorOperatorDelegations",
			Handler:    _Query_DelegatorOperatorDelegations_Handler,
		},
		{
			MethodName: "DelegatorOperatorUnbondingDelegations",
			Handler:    _Query_DelegatorOperatorUnbondingDelegations_Handler,
		},
		{
			MethodName: "DelegatorServiceDelegations",
			Handler:    _Query_DelegatorServiceDelegations_Handler,
		},
		{
			MethodName: "DelegatorServiceUnbondingDelegations",
			Handler:    _Query_DelegatorServiceUnbondingDelegations_Handler,
		},
		{
			MethodName: "DelegatorPools",
			Handler:    _Query_DelegatorPools_Handler,
		},
		{
			MethodName: "DelegatorPool",
			Handler:    _Query_DelegatorPool_Handler,
		},
		{
			MethodName: "DelegatorOperators",
			Handler:    _Query_DelegatorOperators_Handler,
		},
		{
			MethodName: "DelegatorOperator",
			Handler:    _Query_DelegatorOperator_Handler,
		},
		{
			MethodName: "DelegatorServices",
			Handler:    _Query_DelegatorServices_Handler,
		},
		{
			MethodName: "DelegatorService",
			Handler:    _Query_DelegatorService_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milkyway/restaking/v1/query.proto",
}

func (m *QueryOperatorJoinedServicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorJoinedServicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorJoinedServicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorJoinedServicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorJoinedServicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorJoinedServicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceIds) > 0 {
		dAtA2 := make([]byte, len(m.ServiceIds)*10)
		var j1 int
		for _, num := range m.ServiceIds {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintQuery(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ServiceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ServiceParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPoolDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Delegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPoolUnbondingDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolUnbondingDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolUnbondingDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolUnbondingDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolUnbondingDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolUnbondingDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnbondingDelegations) > 0 {
		for iNdEx := len(m.UnbondingDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolUnbondingDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolUnbondingDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolUnbondingDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolUnbondingDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolUnbondingDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolUnbondingDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UnbondingDelegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOperatorDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OperatorId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.OperatorId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Delegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOperatorUnbondingDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorUnbondingDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorUnbondingDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.OperatorId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorUnbondingDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorUnbondingDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorUnbondingDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnbondingDelegations) > 0 {
		for iNdEx := len(m.UnbondingDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorUnbondingDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorUnbondingDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorUnbondingDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.OperatorId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorUnbondingDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorUnbondingDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorUnbondingDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UnbondingDelegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryServiceDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ServiceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ServiceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ServiceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ServiceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Delegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryServiceUnbondingDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceUnbondingDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceUnbondingDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ServiceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ServiceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceUnbondingDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceUnbondingDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceUnbondingDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnbondingDelegations) > 0 {
		for iNdEx := len(m.UnbondingDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceUnbondingDelegationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceUnbondingDelegationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceUnbondingDelegationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.ServiceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ServiceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceUnbondingDelegationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceUnbondingDelegationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceUnbondingDelegationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UnbondingDelegation.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorPoolDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorPoolDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorPoolDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorPoolDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorPoolDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorPoolDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorPoolUnbondingDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorPoolUnbondingDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorPoolUnbondingDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorPoolUnbondingDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorPoolUnbondingDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorPoolUnbondingDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnbondingDelegations) > 0 {
		for iNdEx := len(m.UnbondingDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorOperatorDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorOperatorDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorOperatorDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorOperatorDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorOperatorDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorOperatorDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorOperatorUnbondingDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorOperatorUnbondingDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorOperatorUnbondingDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorOperatorUnbondingDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorOperatorUnbondingDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorOperatorUnbondingDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnbondingDelegations) > 0 {
		for iNdEx := len(m.UnbondingDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorServiceDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorServiceDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorServiceDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorServiceDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorServiceDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorServiceDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Delegations) > 0 {
		for iNdEx := len(m.Delegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Delegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorServiceUnbondingDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorServiceUnbondingDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorServiceUnbondingDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorServiceUnbondingDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorServiceUnbondingDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorServiceUnbondingDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UnbondingDelegations) > 0 {
		for iNdEx := len(m.UnbondingDelegations) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UnbondingDelegations[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorOperatorsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorOperatorsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorOperatorsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorOperatorsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorOperatorsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorOperatorsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Operators) > 0 {
		for iNdEx := len(m.Operators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Operators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorOperatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorOperatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorOperatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Operator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorServicesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorServicesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorServicesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorServicesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorServicesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorServicesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Services) > 0 {
		for iNdEx := len(m.Services) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Services[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorServiceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorServiceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorServiceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ServiceId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorServiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Service.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryOperatorJoinedServicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovQuery(uint64(m.OperatorId))
	}
	return n
}

func (m *QueryOperatorJoinedServicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ServiceIds) > 0 {
		l = 0
		for _, e := range m.ServiceIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryServiceParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceId != 0 {
		n += 1 + sovQuery(uint64(m.ServiceId))
	}
	return n
}

func (m *QueryServiceParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ServiceParams.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Delegation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolUnbondingDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolUnbondingDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnbondingDelegations) > 0 {
		for _, e := range m.UnbondingDelegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolUnbondingDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPoolUnbondingDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UnbondingDelegation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOperatorDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovQuery(uint64(m.OperatorId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovQuery(uint64(m.OperatorId))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Delegation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOperatorUnbondingDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovQuery(uint64(m.OperatorId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorUnbondingDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnbondingDelegations) > 0 {
		for _, e := range m.UnbondingDelegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorUnbondingDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovQuery(uint64(m.OperatorId))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOperatorUnbondingDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UnbondingDelegation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryServiceDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceId != 0 {
		n += 1 + sovQuery(uint64(m.ServiceId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryServiceDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryServiceDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceId != 0 {
		n += 1 + sovQuery(uint64(m.ServiceId))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryServiceDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Delegation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryServiceUnbondingDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceId != 0 {
		n += 1 + sovQuery(uint64(m.ServiceId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryServiceUnbondingDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnbondingDelegations) > 0 {
		for _, e := range m.UnbondingDelegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryServiceUnbondingDelegationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceId != 0 {
		n += 1 + sovQuery(uint64(m.ServiceId))
	}
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryServiceUnbondingDelegationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UnbondingDelegation.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegatorPoolDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorPoolDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorPoolUnbondingDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorPoolUnbondingDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnbondingDelegations) > 0 {
		for _, e := range m.UnbondingDelegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorOperatorDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorOperatorDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorOperatorUnbondingDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorOperatorUnbondingDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnbondingDelegations) > 0 {
		for _, e := range m.UnbondingDelegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorServiceDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorServiceDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Delegations) > 0 {
		for _, e := range m.Delegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorServiceUnbondingDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorServiceUnbondingDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UnbondingDelegations) > 0 {
		for _, e := range m.UnbondingDelegations {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryDelegatorPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pool.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegatorOperatorsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorOperatorsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Operators) > 0 {
		for _, e := range m.Operators {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorOperatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OperatorId != 0 {
		n += 1 + sovQuery(uint64(m.OperatorId))
	}
	return n
}

func (m *QueryDelegatorOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Operator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDelegatorServicesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorServicesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Services) > 0 {
		for _, e := range m.Services {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorServiceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ServiceId != 0 {
		n += 1 + sovQuery(uint64(m.ServiceId))
	}
	return n
}

func (m *QueryDelegatorServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Service.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryOperatorJoinedServicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorJoinedServicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorJoinedServicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorJoinedServicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorJoinedServicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorJoinedServicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ServiceIds = append(m.ServiceIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ServiceIds) == 0 {
					m.ServiceIds = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ServiceIds = append(m.ServiceIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			m.ServiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServiceParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, DelegationResponse{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolUnbondingDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolUnbondingDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolUnbondingDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolUnbondingDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolUnbondingDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolUnbondingDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingDelegations = append(m.UnbondingDelegations, UnbondingDelegation{})
			if err := m.UnbondingDelegations[len(m.UnbondingDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolUnbondingDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolUnbondingDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolUnbondingDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolUnbondingDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolUnbondingDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolUnbondingDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnbondingDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, DelegationResponse{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorUnbondingDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorUnbondingDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorUnbondingDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorUnbondingDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorUnbondingDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorUnbondingDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingDelegations = append(m.UnbondingDelegations, UnbondingDelegation{})
			if err := m.UnbondingDelegations[len(m.UnbondingDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorUnbondingDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorUnbondingDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorUnbondingDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorUnbondingDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorUnbondingDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorUnbondingDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnbondingDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			m.ServiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, DelegationResponse{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			m.ServiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceUnbondingDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceUnbondingDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceUnbondingDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			m.ServiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceUnbondingDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceUnbondingDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceUnbondingDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingDelegations = append(m.UnbondingDelegations, UnbondingDelegation{})
			if err := m.UnbondingDelegations[len(m.UnbondingDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceUnbondingDelegationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceUnbondingDelegationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceUnbondingDelegationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			m.ServiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceUnbondingDelegationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceUnbondingDelegationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceUnbondingDelegationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UnbondingDelegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorPoolDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorPoolDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorPoolDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorPoolDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorPoolDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorPoolDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, DelegationResponse{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorPoolUnbondingDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorPoolUnbondingDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorPoolUnbondingDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorPoolUnbondingDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorPoolUnbondingDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorPoolUnbondingDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingDelegations = append(m.UnbondingDelegations, UnbondingDelegation{})
			if err := m.UnbondingDelegations[len(m.UnbondingDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorOperatorDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorOperatorDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorOperatorDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorOperatorDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorOperatorDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorOperatorDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, DelegationResponse{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorOperatorUnbondingDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorOperatorUnbondingDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorOperatorUnbondingDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorOperatorUnbondingDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorOperatorUnbondingDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorOperatorUnbondingDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingDelegations = append(m.UnbondingDelegations, UnbondingDelegation{})
			if err := m.UnbondingDelegations[len(m.UnbondingDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorServiceDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorServiceDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorServiceDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorServiceDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorServiceDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorServiceDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegations = append(m.Delegations, DelegationResponse{})
			if err := m.Delegations[len(m.Delegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorServiceUnbondingDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorServiceUnbondingDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorServiceUnbondingDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorServiceUnbondingDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorServiceUnbondingDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorServiceUnbondingDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnbondingDelegations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnbondingDelegations = append(m.UnbondingDelegations, UnbondingDelegation{})
			if err := m.UnbondingDelegations[len(m.UnbondingDelegations)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, types.Pool{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorOperatorsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorOperatorsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorOperatorsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorOperatorsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorOperatorsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorOperatorsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Operators = append(m.Operators, types1.Operator{})
			if err := m.Operators[len(m.Operators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorOperatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorOperatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorOperatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Operator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Operator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorServicesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorServicesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorServicesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorServicesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorServicesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorServicesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Services = append(m.Services, types2.Service{})
			if err := m.Services[len(m.Services)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorServiceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorServiceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorServiceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			m.ServiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Service", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Service.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
