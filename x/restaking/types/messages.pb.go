// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/restaking/v1/messages.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgJoinRestakingPool defines the message structure for the PoolRestake gRPC
// service method. It allows a user to put their assets into a restaking pool
// that will later be used to provide cryptoeconomic security to services that
// chose it.
type MsgJoinRestakingPool struct {
	// Delegator is the address of the user joining the pool
	Delegator string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	// Amount is the amount of coins to be staked
	Amount types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgJoinRestakingPool) Reset()         { *m = MsgJoinRestakingPool{} }
func (m *MsgJoinRestakingPool) String() string { return proto.CompactTextString(m) }
func (*MsgJoinRestakingPool) ProtoMessage()    {}
func (*MsgJoinRestakingPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_9772be2b1a923bdb, []int{0}
}
func (m *MsgJoinRestakingPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinRestakingPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinRestakingPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinRestakingPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinRestakingPool.Merge(m, src)
}
func (m *MsgJoinRestakingPool) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinRestakingPool) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinRestakingPool.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinRestakingPool proto.InternalMessageInfo

func (m *MsgJoinRestakingPool) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *MsgJoinRestakingPool) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

// MsgJoinRestakingPoolResponse defines the return value of
// MsgJoinRestakingPool.
type MsgJoinRestakingPoolResponse struct {
}

func (m *MsgJoinRestakingPoolResponse) Reset()         { *m = MsgJoinRestakingPoolResponse{} }
func (m *MsgJoinRestakingPoolResponse) String() string { return proto.CompactTextString(m) }
func (*MsgJoinRestakingPoolResponse) ProtoMessage()    {}
func (*MsgJoinRestakingPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9772be2b1a923bdb, []int{1}
}
func (m *MsgJoinRestakingPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgJoinRestakingPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgJoinRestakingPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgJoinRestakingPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgJoinRestakingPoolResponse.Merge(m, src)
}
func (m *MsgJoinRestakingPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgJoinRestakingPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgJoinRestakingPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgJoinRestakingPoolResponse proto.InternalMessageInfo

// MsgDelegateOperator defines the message structure for the OperatorRestake
// gRPC service method. It allows a user to delegate their assets to an
// operator.
type MsgDelegateOperator struct {
	// Delegator is the address of the user delegating to the operator
	Delegator string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	// OperatorID is the ID of the operator to delegate to
	OperatorID uint32 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// Amount is the amount of coins to be delegated
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgDelegateOperator) Reset()         { *m = MsgDelegateOperator{} }
func (m *MsgDelegateOperator) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateOperator) ProtoMessage()    {}
func (*MsgDelegateOperator) Descriptor() ([]byte, []int) {
	return fileDescriptor_9772be2b1a923bdb, []int{2}
}
func (m *MsgDelegateOperator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateOperator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateOperator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateOperator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateOperator.Merge(m, src)
}
func (m *MsgDelegateOperator) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateOperator) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateOperator.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateOperator proto.InternalMessageInfo

func (m *MsgDelegateOperator) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *MsgDelegateOperator) GetOperatorID() uint32 {
	if m != nil {
		return m.OperatorID
	}
	return 0
}

func (m *MsgDelegateOperator) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// MsgDelegateOperatorResponse is the return value of MsgDelegateOperator.
type MsgDelegateOperatorResponse struct {
}

func (m *MsgDelegateOperatorResponse) Reset()         { *m = MsgDelegateOperatorResponse{} }
func (m *MsgDelegateOperatorResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateOperatorResponse) ProtoMessage()    {}
func (*MsgDelegateOperatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9772be2b1a923bdb, []int{3}
}
func (m *MsgDelegateOperatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateOperatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateOperatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateOperatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateOperatorResponse.Merge(m, src)
}
func (m *MsgDelegateOperatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateOperatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateOperatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateOperatorResponse proto.InternalMessageInfo

// MsgDelegateService defines the message structure for the ServiceRestake gRPC
// service method. It allows a user to delegate their assets to a service.
type MsgDelegateService struct {
	// Delegator is the address of the user delegating to the service
	Delegator string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty"`
	// ServiceID is the ID of the service to delegate to
	ServiceID uint32 `protobuf:"varint,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Amount is the amount of coins to be delegated
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgDelegateService) Reset()         { *m = MsgDelegateService{} }
func (m *MsgDelegateService) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateService) ProtoMessage()    {}
func (*MsgDelegateService) Descriptor() ([]byte, []int) {
	return fileDescriptor_9772be2b1a923bdb, []int{4}
}
func (m *MsgDelegateService) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateService) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateService.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateService) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateService.Merge(m, src)
}
func (m *MsgDelegateService) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateService) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateService.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateService proto.InternalMessageInfo

func (m *MsgDelegateService) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *MsgDelegateService) GetServiceID() uint32 {
	if m != nil {
		return m.ServiceID
	}
	return 0
}

func (m *MsgDelegateService) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// MsgDelegateServiceResponse is the return value of MsgDelegateService.
type MsgDelegateServiceResponse struct {
}

func (m *MsgDelegateServiceResponse) Reset()         { *m = MsgDelegateServiceResponse{} }
func (m *MsgDelegateServiceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDelegateServiceResponse) ProtoMessage()    {}
func (*MsgDelegateServiceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9772be2b1a923bdb, []int{5}
}
func (m *MsgDelegateServiceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDelegateServiceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDelegateServiceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDelegateServiceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDelegateServiceResponse.Merge(m, src)
}
func (m *MsgDelegateServiceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDelegateServiceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDelegateServiceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDelegateServiceResponse proto.InternalMessageInfo

// MsgDeactivateService defines the message structure for the UpdateParams gRPC
// service method. It allows the authority to update the module parameters.
type MsgUpdateParams struct {
	// Authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	// Params define the parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_9772be2b1a923bdb, []int{6}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgDeactivateServiceResponse is the return value of MsgUpdateParams.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9772be2b1a923bdb, []int{7}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgJoinRestakingPool)(nil), "milkyway.restaking.v1.MsgJoinRestakingPool")
	proto.RegisterType((*MsgJoinRestakingPoolResponse)(nil), "milkyway.restaking.v1.MsgJoinRestakingPoolResponse")
	proto.RegisterType((*MsgDelegateOperator)(nil), "milkyway.restaking.v1.MsgDelegateOperator")
	proto.RegisterType((*MsgDelegateOperatorResponse)(nil), "milkyway.restaking.v1.MsgDelegateOperatorResponse")
	proto.RegisterType((*MsgDelegateService)(nil), "milkyway.restaking.v1.MsgDelegateService")
	proto.RegisterType((*MsgDelegateServiceResponse)(nil), "milkyway.restaking.v1.MsgDelegateServiceResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "milkyway.restaking.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "milkyway.restaking.v1.MsgUpdateParamsResponse")
}

func init() {
	proto.RegisterFile("milkyway/restaking/v1/messages.proto", fileDescriptor_9772be2b1a923bdb)
}

var fileDescriptor_9772be2b1a923bdb = []byte{
	// 701 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xc1, 0x4f, 0x13, 0x4f,
	0x14, 0xee, 0xd2, 0xdf, 0xaf, 0x49, 0x07, 0x01, 0x5d, 0x31, 0xc0, 0x02, 0x5b, 0xb2, 0x31, 0x06,
	0x2b, 0xec, 0x58, 0x48, 0x34, 0xa9, 0x27, 0x2a, 0x17, 0x48, 0x1a, 0xc9, 0x12, 0x2f, 0x5e, 0xc8,
	0xb4, 0x3b, 0x0e, 0x9b, 0x76, 0x77, 0xea, 0xce, 0x50, 0xed, 0xcd, 0x78, 0xf4, 0xe4, 0xd5, 0x8b,
	0x7f, 0x80, 0x27, 0x0e, 0xfe, 0x07, 0x5e, 0x38, 0x12, 0xbd, 0x78, 0xaa, 0xa6, 0x1c, 0xb8, 0xfb,
	0x17, 0x98, 0xce, 0xce, 0x4e, 0x97, 0x76, 0xab, 0xc8, 0xc1, 0x0b, 0x74, 0xe6, 0x7d, 0xef, 0x7b,
	0xef, 0xfb, 0xfa, 0xde, 0x14, 0xdc, 0xf6, 0xbd, 0x66, 0xa3, 0xf3, 0x12, 0x75, 0x60, 0x88, 0x19,
	0x47, 0x0d, 0x2f, 0x20, 0xb0, 0x5d, 0x82, 0x3e, 0x66, 0x0c, 0x11, 0xcc, 0xec, 0x56, 0x48, 0x39,
	0xd5, 0x6f, 0xc5, 0x28, 0x5b, 0xa1, 0xec, 0x76, 0xc9, 0xb8, 0x81, 0x7c, 0x2f, 0xa0, 0x50, 0xfc,
	0x8d, 0x90, 0xc6, 0x42, 0x9d, 0x32, 0x9f, 0xb2, 0x03, 0x71, 0x82, 0xd1, 0x41, 0x86, 0xcc, 0xe8,
	0x04, 0x6b, 0x88, 0x61, 0xd8, 0x2e, 0xd5, 0x30, 0x47, 0x25, 0x58, 0xa7, 0x5e, 0x30, 0x12, 0x0f,
	0x1a, 0x2a, 0xde, 0x3f, 0xc8, 0xf8, 0x9c, 0x8c, 0xfb, 0x2c, 0x6a, 0x91, 0x11, 0x19, 0x98, 0x25,
	0x94, 0xd0, 0xa8, 0x60, 0xff, 0x93, 0xbc, 0xb5, 0xd2, 0x95, 0xb5, 0x50, 0x88, 0x7c, 0xd9, 0x92,
	0xf5, 0x59, 0x03, 0xb3, 0x55, 0x46, 0x76, 0xa9, 0x17, 0x38, 0x31, 0x68, 0x8f, 0xd2, 0xa6, 0xfe,
	0x00, 0xe4, 0x5d, 0xdc, 0xc4, 0x04, 0x71, 0x1a, 0xce, 0x6b, 0x2b, 0xda, 0x6a, 0xbe, 0x32, 0xff,
	0xe5, 0xd3, 0xfa, 0xac, 0x14, 0xb4, 0xe5, 0xba, 0x21, 0x66, 0x6c, 0x9f, 0x87, 0x5e, 0x40, 0x9c,
	0x01, 0x54, 0xdf, 0x02, 0x39, 0xe4, 0xd3, 0xa3, 0x80, 0xcf, 0x4f, 0xac, 0x68, 0xab, 0x93, 0x1b,
	0x0b, 0xb6, 0xcc, 0xe8, 0x8b, 0xb6, 0xa5, 0x28, 0xfb, 0x31, 0xf5, 0x82, 0xca, 0xf4, 0x49, 0xb7,
	0x90, 0xe9, 0x75, 0x0b, 0xb9, 0x2d, 0x91, 0xe0, 0xc8, 0xc4, 0xf2, 0xfd, 0x37, 0xe7, 0xc7, 0xc5,
	0x01, 0xe5, 0xdb, 0xf3, 0xe3, 0xe2, 0xb2, 0x92, 0x92, 0xd6, 0xac, 0x65, 0x82, 0xa5, 0xb4, 0x7b,
	0x07, 0xb3, 0x16, 0x0d, 0x18, 0xb6, 0x3e, 0x4c, 0x80, 0x9b, 0x55, 0x46, 0xb6, 0x23, 0x4a, 0xfc,
	0xa4, 0x85, 0x43, 0xd1, 0xec, 0x55, 0x45, 0x42, 0x30, 0x49, 0x25, 0xc7, 0x81, 0xe7, 0x0a, 0xa5,
	0x53, 0x95, 0xe9, 0x5e, 0xb7, 0x00, 0x62, 0xea, 0x9d, 0x6d, 0x07, 0xc4, 0x90, 0x1d, 0x57, 0xf7,
	0x95, 0x2b, 0xd9, 0x95, 0xec, 0xef, 0x5d, 0x29, 0x5f, 0x74, 0xe5, 0xe3, 0xf7, 0xc2, 0x2a, 0xf1,
	0xf8, 0xe1, 0x51, 0xcd, 0xae, 0x53, 0x5f, 0xce, 0x93, 0xfc, 0xb7, 0xce, 0xdc, 0x06, 0xe4, 0x9d,
	0x16, 0x66, 0x22, 0x95, 0x29, 0x07, 0xe1, 0xa8, 0x83, 0x4b, 0x49, 0x07, 0x87, 0x8d, 0xb0, 0x96,
	0xc1, 0x62, 0xca, 0xb5, 0xf2, 0xef, 0xfd, 0x04, 0xd0, 0x13, 0xf1, 0x7d, 0x1c, 0xb6, 0xbd, 0x3a,
	0xbe, 0xb2, 0x7d, 0x6b, 0x00, 0xb0, 0x88, 0x62, 0xe0, 0xde, 0x54, 0xaf, 0x5b, 0xc8, 0x4b, 0xe2,
	0x9d, 0x6d, 0x27, 0x2f, 0x01, 0xff, 0xde, 0x3b, 0x7b, 0xd4, 0xbb, 0xc5, 0x34, 0xef, 0x64, 0xaf,
	0xd6, 0x12, 0x30, 0x46, 0x6f, 0x95, 0x73, 0x5f, 0x35, 0x30, 0x53, 0x65, 0xe4, 0x69, 0xcb, 0x45,
	0x1c, 0xef, 0x89, 0xcd, 0xd3, 0x77, 0x41, 0x1e, 0x1d, 0xf1, 0x43, 0x1a, 0x7a, 0xbc, 0x23, 0x6d,
	0x5b, 0xfb, 0xd9, 0x2d, 0x5c, 0xef, 0x20, 0xbf, 0x59, 0xb6, 0x54, 0xc8, 0x1a, 0x6f, 0xa5, 0xc2,
	0xe8, 0x8f, 0x40, 0x2e, 0xda, 0x67, 0xb9, 0x6e, 0xcb, 0x76, 0xea, 0x43, 0x65, 0x47, 0xa5, 0x2b,
	0xff, 0xf5, 0x0d, 0x72, 0x64, 0x4a, 0xf9, 0xa1, 0x90, 0xaa, 0xc8, 0xfa, 0x52, 0x07, 0xaf, 0xe1,
	0xab, 0xc4, 0xab, 0x31, 0xa4, 0xc0, 0x5a, 0x00, 0x73, 0x43, 0x57, 0xb1, 0xe0, 0x8d, 0x93, 0x2c,
	0xc8, 0x56, 0x19, 0xd1, 0x29, 0x98, 0x94, 0x2b, 0xc8, 0x51, 0x03, 0xeb, 0xf7, 0xc6, 0xf4, 0x95,
	0xb6, 0xb6, 0xc6, 0xe6, 0x5f, 0x80, 0xe3, 0xc2, 0xfa, 0x0b, 0x30, 0x93, 0x98, 0x5b, 0x51, 0xb4,
	0x38, 0x9e, 0x67, 0x78, 0xd4, 0x8d, 0x8d, 0xcb, 0x63, 0x55, 0xc9, 0x00, 0x4c, 0x0f, 0xbe, 0x6f,
	0x51, 0xf1, 0xee, 0x9f, 0x59, 0x64, 0x86, 0x51, 0xba, 0x34, 0x54, 0xd5, 0x7b, 0x0e, 0xae, 0x5d,
	0x18, 0xa4, 0x3b, 0xe3, 0x29, 0x92, 0x38, 0xc3, 0xbe, 0x1c, 0x2e, 0xae, 0x63, 0xfc, 0xff, 0xfa,
	0xfc, 0xb8, 0xa8, 0x55, 0xaa, 0x27, 0x3d, 0x53, 0x3b, 0xed, 0x99, 0xda, 0x8f, 0x9e, 0xa9, 0xbd,
	0x3b, 0x33, 0x33, 0xa7, 0x67, 0x66, 0xe6, 0xdb, 0x99, 0x99, 0x79, 0xb6, 0x99, 0xd8, 0xaa, 0x98,
	0x7a, 0xbd, 0x89, 0x6a, 0x0c, 0xa6, 0x8e, 0x8f, 0x58, 0xb3, 0x5a, 0x4e, 0xfc, 0xe2, 0x6c, 0xfe,
	0x0a, 0x00, 0x00, 0xff, 0xff, 0x26, 0x43, 0x66, 0xb9, 0x71, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// PoolRestake defines the operation that allows users to join a restaking
	// pool with a given amount of assets. The pool can then be used to provide
	// services with cryptoeconomic security.
	PoolRestake(ctx context.Context, in *MsgJoinRestakingPool, opts ...grpc.CallOption) (*MsgJoinRestakingPoolResponse, error)
	// OperatorRestake defines the operation that allows users to delegate their
	// assets to a specific operator.
	OperatorRestake(ctx context.Context, in *MsgDelegateOperator, opts ...grpc.CallOption) (*MsgDelegateOperatorResponse, error)
	// ServiceRestake defines the operation that allows users to delegate their
	// assets to a specific service.
	ServiceRestake(ctx context.Context, in *MsgDelegateService, opts ...grpc.CallOption) (*MsgDelegateServiceResponse, error)
	// UpdateParams defines a (governance) operation for updating the module
	// parameters.
	// The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) PoolRestake(ctx context.Context, in *MsgJoinRestakingPool, opts ...grpc.CallOption) (*MsgJoinRestakingPoolResponse, error) {
	out := new(MsgJoinRestakingPoolResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Msg/PoolRestake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OperatorRestake(ctx context.Context, in *MsgDelegateOperator, opts ...grpc.CallOption) (*MsgDelegateOperatorResponse, error) {
	out := new(MsgDelegateOperatorResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Msg/OperatorRestake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ServiceRestake(ctx context.Context, in *MsgDelegateService, opts ...grpc.CallOption) (*MsgDelegateServiceResponse, error) {
	out := new(MsgDelegateServiceResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Msg/ServiceRestake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.restaking.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// PoolRestake defines the operation that allows users to join a restaking
	// pool with a given amount of assets. The pool can then be used to provide
	// services with cryptoeconomic security.
	PoolRestake(context.Context, *MsgJoinRestakingPool) (*MsgJoinRestakingPoolResponse, error)
	// OperatorRestake defines the operation that allows users to delegate their
	// assets to a specific operator.
	OperatorRestake(context.Context, *MsgDelegateOperator) (*MsgDelegateOperatorResponse, error)
	// ServiceRestake defines the operation that allows users to delegate their
	// assets to a specific service.
	ServiceRestake(context.Context, *MsgDelegateService) (*MsgDelegateServiceResponse, error)
	// UpdateParams defines a (governance) operation for updating the module
	// parameters.
	// The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) PoolRestake(ctx context.Context, req *MsgJoinRestakingPool) (*MsgJoinRestakingPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolRestake not implemented")
}
func (*UnimplementedMsgServer) OperatorRestake(ctx context.Context, req *MsgDelegateOperator) (*MsgDelegateOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorRestake not implemented")
}
func (*UnimplementedMsgServer) ServiceRestake(ctx context.Context, req *MsgDelegateService) (*MsgDelegateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceRestake not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_PoolRestake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinRestakingPool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PoolRestake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Msg/PoolRestake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PoolRestake(ctx, req.(*MsgJoinRestakingPool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OperatorRestake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegateOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OperatorRestake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Msg/OperatorRestake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OperatorRestake(ctx, req.(*MsgDelegateOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ServiceRestake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegateService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ServiceRestake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Msg/ServiceRestake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ServiceRestake(ctx, req.(*MsgDelegateService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.restaking.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milkyway.restaking.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PoolRestake",
			Handler:    _Msg_PoolRestake_Handler,
		},
		{
			MethodName: "OperatorRestake",
			Handler:    _Msg_OperatorRestake_Handler,
		},
		{
			MethodName: "ServiceRestake",
			Handler:    _Msg_ServiceRestake_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milkyway/restaking/v1/messages.proto",
}

func (m *MsgJoinRestakingPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinRestakingPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinRestakingPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgJoinRestakingPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgJoinRestakingPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgJoinRestakingPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDelegateOperator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateOperator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateOperator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.OperatorID != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.OperatorID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegateOperatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateOperatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateOperatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDelegateService) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateService) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateService) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.ServiceID != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDelegateServiceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDelegateServiceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDelegateServiceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgJoinRestakingPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovMessages(uint64(l))
	return n
}

func (m *MsgJoinRestakingPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDelegateOperator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.OperatorID != 0 {
		n += 1 + sovMessages(uint64(m.OperatorID))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *MsgDelegateOperatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDelegateService) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.ServiceID != 0 {
		n += 1 + sovMessages(uint64(m.ServiceID))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *MsgDelegateServiceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovMessages(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgJoinRestakingPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinRestakingPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinRestakingPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgJoinRestakingPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgJoinRestakingPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgJoinRestakingPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateOperator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateOperator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateOperator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorID", wireType)
			}
			m.OperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateOperatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateOperatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateOperatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateService) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateService: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateService: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDelegateServiceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDelegateServiceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDelegateServiceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
