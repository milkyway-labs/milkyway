// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/restaking/v1/deprecated.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Deprecated: This struct has been deprecated in favor of the new
// ServiceParams struct.
// ServiceParams represent the params that have been set for an individual
// service.
//
// Deprecated: Do not use.
type LegacyServiceParams struct {
	// Deprecated: The information of this field has been moved to the x/services module.
	// SlashFraction defines the fraction of the delegation that will be slashed
	// in case of a misbehavior.
	SlashFraction cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=slash_fraction,json=slashFraction,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"slash_fraction"` // Deprecated: Do not use.
	// Deprecated: The information of this field has been moved to the new ServiceParams struct.
	// WhitelistedPoolsIDs defines the list of pool IDs that are providing
	// cryptoeconomic security to the service.
	WhitelistedPoolsIDs []uint32 `protobuf:"varint,2,rep,packed,name=whitelisted_pools_ids,json=whitelistedPoolsIds,proto3" json:"whitelisted_pools_ids,omitempty"` // Deprecated: Do not use.
	// Deprecated: The information of this field has been moved to the new ServiceParams struct.
	// WhitelistedOperatorsIDs defines the list of operator IDs that are allowed
	// to validate this service.
	WhitelistedOperatorsIDs []uint32 `protobuf:"varint,3,rep,packed,name=whitelisted_operators_ids,json=whitelistedOperatorsIds,proto3" json:"whitelisted_operators_ids,omitempty"` // Deprecated: Do not use.
}

func (m *LegacyServiceParams) Reset()         { *m = LegacyServiceParams{} }
func (m *LegacyServiceParams) String() string { return proto.CompactTextString(m) }
func (*LegacyServiceParams) ProtoMessage()    {}
func (*LegacyServiceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8709e0699bc45793, []int{0}
}
func (m *LegacyServiceParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LegacyServiceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LegacyServiceParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LegacyServiceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyServiceParams.Merge(m, src)
}
func (m *LegacyServiceParams) XXX_Size() int {
	return m.Size()
}
func (m *LegacyServiceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyServiceParams.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyServiceParams proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *LegacyServiceParams) GetWhitelistedPoolsIDs() []uint32 {
	if m != nil {
		return m.WhitelistedPoolsIDs
	}
	return nil
}

// Deprecated: Do not use.
func (m *LegacyServiceParams) GetWhitelistedOperatorsIDs() []uint32 {
	if m != nil {
		return m.WhitelistedOperatorsIDs
	}
	return nil
}

// Deprecated: This struct has been deprecated in favor of the new
// ServiceParamsRecord struct.
// LegacyServiceParamsRecord represents the params that have been set for an
// individual service.
//
// Deprecated: Do not use.
type LegacyServiceParamsRecord struct {
	// ServiceID is the ID of the service.
	ServiceID uint32 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"` // Deprecated: Do not use.
	// Params defines the parameters for the operators module.
	Params LegacyServiceParams `protobuf:"bytes,2,opt,name=params,proto3" json:"params"` // Deprecated: Do not use.
}

func (m *LegacyServiceParamsRecord) Reset()         { *m = LegacyServiceParamsRecord{} }
func (m *LegacyServiceParamsRecord) String() string { return proto.CompactTextString(m) }
func (*LegacyServiceParamsRecord) ProtoMessage()    {}
func (*LegacyServiceParamsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_8709e0699bc45793, []int{1}
}
func (m *LegacyServiceParamsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LegacyServiceParamsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LegacyServiceParamsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LegacyServiceParamsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyServiceParamsRecord.Merge(m, src)
}
func (m *LegacyServiceParamsRecord) XXX_Size() int {
	return m.Size()
}
func (m *LegacyServiceParamsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyServiceParamsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyServiceParamsRecord proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *LegacyServiceParamsRecord) GetServiceID() uint32 {
	if m != nil {
		return m.ServiceID
	}
	return 0
}

// Deprecated: Do not use.
func (m *LegacyServiceParamsRecord) GetParams() LegacyServiceParams {
	if m != nil {
		return m.Params
	}
	return LegacyServiceParams{}
}

func init() {
	proto.RegisterType((*LegacyServiceParams)(nil), "milkyway.restaking.v1.LegacyServiceParams")
	proto.RegisterType((*LegacyServiceParamsRecord)(nil), "milkyway.restaking.v1.LegacyServiceParamsRecord")
}

func init() {
	proto.RegisterFile("milkyway/restaking/v1/deprecated.proto", fileDescriptor_8709e0699bc45793)
}

var fileDescriptor_8709e0699bc45793 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x92, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xc7, 0x3b, 0x5d, 0x28, 0x74, 0xa4, 0x0a, 0xa9, 0xcb, 0xa6, 0x2b, 0xa6, 0x65, 0x41, 0x29,
	0x82, 0x33, 0xd4, 0xbd, 0x79, 0x0c, 0x45, 0xa8, 0xec, 0xe2, 0x12, 0x0f, 0xa2, 0x97, 0x30, 0x99,
	0x19, 0xd3, 0xa1, 0x49, 0x27, 0xcc, 0x1b, 0x5b, 0xfb, 0x2d, 0xf4, 0xec, 0x17, 0xda, 0xe3, 0x1e,
	0xc5, 0x43, 0x90, 0xf4, 0x8b, 0x48, 0x33, 0xe9, 0x5a, 0x96, 0xde, 0xf2, 0xe6, 0xff, 0x7b, 0xbf,
	0x09, 0x6f, 0x1e, 0x7e, 0x99, 0xab, 0x6c, 0xb1, 0x59, 0xb3, 0x0d, 0x35, 0x12, 0x2c, 0x5b, 0xa8,
	0x65, 0x4a, 0x57, 0x13, 0x2a, 0x64, 0x61, 0x24, 0x67, 0x56, 0x0a, 0x52, 0x18, 0x6d, 0xb5, 0x77,
	0xba, 0xe7, 0xc8, 0x3d, 0x47, 0x56, 0x93, 0xf3, 0xa7, 0xa9, 0x4e, 0x75, 0x4d, 0xd0, 0xdd, 0x97,
	0x83, 0xcf, 0x07, 0x5c, 0x43, 0xae, 0x21, 0x76, 0x81, 0x2b, 0x9a, 0x28, 0x70, 0x15, 0x4d, 0x18,
	0x48, 0xba, 0x9a, 0x24, 0xd2, 0xb2, 0x09, 0xe5, 0x5a, 0x2d, 0x5d, 0x7e, 0xf1, 0xb3, 0x8d, 0xfb,
	0x57, 0x32, 0x65, 0x7c, 0xf3, 0x51, 0x9a, 0x95, 0xe2, 0xf2, 0x86, 0x19, 0x96, 0x83, 0x77, 0x85,
	0x1f, 0x43, 0xc6, 0x60, 0x1e, 0x7f, 0x35, 0x8c, 0x5b, 0xa5, 0x97, 0x3e, 0x1a, 0xa1, 0x71, 0x37,
	0x7c, 0x71, 0x5b, 0x0e, 0x5b, 0x7f, 0xca, 0xe1, 0x33, 0xe7, 0x05, 0xb1, 0x20, 0x4a, 0xd3, 0x9c,
	0xd9, 0x39, 0x71, 0x9a, 0xa9, 0xe4, 0x3e, 0x8a, 0x7a, 0x75, 0xf3, 0xbb, 0xa6, 0xd7, 0xbb, 0xc6,
	0xa7, 0xeb, 0xb9, 0xb2, 0x32, 0x53, 0x60, 0xa5, 0x88, 0x0b, 0xad, 0x33, 0x88, 0x95, 0x00, 0xbf,
	0x3d, 0x3a, 0x19, 0xf7, 0xc2, 0x41, 0x55, 0x0e, 0xfb, 0x9f, 0xfe, 0x03, 0x37, 0xbb, 0x7c, 0x36,
	0x05, 0x1f, 0x45, 0xfd, 0xf5, 0xc3, 0x63, 0x01, 0xde, 0x67, 0x3c, 0x38, 0xd4, 0xe9, 0x42, 0x1a,
	0x66, 0xb5, 0x71, 0xca, 0x93, 0x5a, 0xf9, 0xbc, 0x2a, 0x87, 0x67, 0x07, 0xca, 0x0f, 0x7b, 0xc6,
	0x69, 0xcf, 0xd6, 0xc7, 0x22, 0x01, 0x6f, 0xdb, 0x3e, 0xba, 0xf8, 0x85, 0xf0, 0xe0, 0xc8, 0x4c,
	0x22, 0xc9, 0xb5, 0x11, 0x1e, 0xc1, 0x18, 0xdc, 0x71, 0xac, 0x44, 0x3d, 0x95, 0x5e, 0xf8, 0xa4,
	0x2a, 0x87, 0xdd, 0x06, 0x9e, 0x4d, 0x7d, 0x14, 0x75, 0x1b, 0x64, 0x26, 0xbc, 0xf7, 0xb8, 0x53,
	0xd4, 0xfd, 0x7e, 0x7b, 0x84, 0xc6, 0x8f, 0xde, 0xbc, 0x22, 0x47, 0x9f, 0x96, 0x1c, 0xb9, 0x31,
	0xec, 0xec, 0xa6, 0xed, 0xa3, 0xa8, 0x31, 0xec, 0xfe, 0x2e, 0xbc, 0xbe, 0xad, 0x02, 0x74, 0x57,
	0x05, 0xe8, 0x6f, 0x15, 0xa0, 0x1f, 0xdb, 0xa0, 0x75, 0xb7, 0x0d, 0x5a, 0xbf, 0xb7, 0x41, 0xeb,
	0xcb, 0x65, 0xaa, 0xec, 0xfc, 0x5b, 0x42, 0xb8, 0xce, 0xe9, 0xfe, 0x8e, 0xd7, 0x19, 0x4b, 0xe0,
	0xbe, 0xa2, 0xdf, 0x0f, 0xd6, 0xce, 0x6e, 0x0a, 0x09, 0x49, 0xa7, 0xde, 0x83, 0xcb, 0x7f, 0x01,
	0x00, 0x00, 0xff, 0xff, 0xaf, 0x2b, 0x2a, 0x2b, 0x99, 0x02, 0x00, 0x00,
}

func (m *LegacyServiceParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegacyServiceParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LegacyServiceParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhitelistedOperatorsIDs) > 0 {
		dAtA2 := make([]byte, len(m.WhitelistedOperatorsIDs)*10)
		var j1 int
		for _, num := range m.WhitelistedOperatorsIDs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintDeprecated(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WhitelistedPoolsIDs) > 0 {
		dAtA4 := make([]byte, len(m.WhitelistedPoolsIDs)*10)
		var j3 int
		for _, num := range m.WhitelistedPoolsIDs {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintDeprecated(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.SlashFraction.Size()
		i -= size
		if _, err := m.SlashFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintDeprecated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LegacyServiceParamsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegacyServiceParamsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LegacyServiceParamsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintDeprecated(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ServiceID != 0 {
		i = encodeVarintDeprecated(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintDeprecated(dAtA []byte, offset int, v uint64) int {
	offset -= sovDeprecated(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LegacyServiceParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SlashFraction.Size()
	n += 1 + l + sovDeprecated(uint64(l))
	if len(m.WhitelistedPoolsIDs) > 0 {
		l = 0
		for _, e := range m.WhitelistedPoolsIDs {
			l += sovDeprecated(uint64(e))
		}
		n += 1 + sovDeprecated(uint64(l)) + l
	}
	if len(m.WhitelistedOperatorsIDs) > 0 {
		l = 0
		for _, e := range m.WhitelistedOperatorsIDs {
			l += sovDeprecated(uint64(e))
		}
		n += 1 + sovDeprecated(uint64(l)) + l
	}
	return n
}

func (m *LegacyServiceParamsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceID != 0 {
		n += 1 + sovDeprecated(uint64(m.ServiceID))
	}
	l = m.Params.Size()
	n += 1 + l + sovDeprecated(uint64(l))
	return n
}

func sovDeprecated(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDeprecated(x uint64) (n int) {
	return sovDeprecated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LegacyServiceParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeprecated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegacyServiceParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegacyServiceParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDeprecated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WhitelistedPoolsIDs = append(m.WhitelistedPoolsIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDeprecated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDeprecated
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDeprecated
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WhitelistedPoolsIDs) == 0 {
					m.WhitelistedPoolsIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDeprecated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WhitelistedPoolsIDs = append(m.WhitelistedPoolsIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedPoolsIDs", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDeprecated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WhitelistedOperatorsIDs = append(m.WhitelistedOperatorsIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDeprecated
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthDeprecated
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthDeprecated
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WhitelistedOperatorsIDs) == 0 {
					m.WhitelistedOperatorsIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDeprecated
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WhitelistedOperatorsIDs = append(m.WhitelistedOperatorsIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedOperatorsIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDeprecated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeprecated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LegacyServiceParamsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDeprecated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegacyServiceParamsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegacyServiceParamsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDeprecated
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDeprecated
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDeprecated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDeprecated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDeprecated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDeprecated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDeprecated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDeprecated
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDeprecated
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDeprecated
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDeprecated        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDeprecated          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDeprecated = fmt.Errorf("proto: unexpected end of group")
)
