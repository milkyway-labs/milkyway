// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/restaking/legacy/models.proto

package v2

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LegacyOperatorParams represent previous format that we where using to store
// a operator params.
type LegacyOperatorParams struct {
	// CommissionRate defines the commission rate charged to delegators, as a
	// fraction.
	CommissionRate cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=commission_rate,json=commissionRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"commission_rate"`
	// JoinedServicesIDs defines the list of service IDs that the operator has
	// joined.
	JoinedServicesIDs []uint32 `protobuf:"varint,2,rep,packed,name=joined_services_ids,json=joinedServicesIds,proto3" json:"joined_services_ids,omitempty"`
}

func (m *LegacyOperatorParams) Reset()         { *m = LegacyOperatorParams{} }
func (m *LegacyOperatorParams) String() string { return proto.CompactTextString(m) }
func (*LegacyOperatorParams) ProtoMessage()    {}
func (*LegacyOperatorParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_43f21e7506fe6c2d, []int{0}
}
func (m *LegacyOperatorParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LegacyOperatorParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LegacyOperatorParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LegacyOperatorParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyOperatorParams.Merge(m, src)
}
func (m *LegacyOperatorParams) XXX_Size() int {
	return m.Size()
}
func (m *LegacyOperatorParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyOperatorParams.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyOperatorParams proto.InternalMessageInfo

func (m *LegacyOperatorParams) GetJoinedServicesIDs() []uint32 {
	if m != nil {
		return m.JoinedServicesIDs
	}
	return nil
}

// LegacyServiceParams represent the previous format that we where using to
// store the params that have been set for an individual service.
type LegacyServiceParams struct {
	// SlashFraction defines the fraction of the delegation that will be slashed
	// in case of a misbehavior.
	SlashFraction cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=slash_fraction,json=slashFraction,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"slash_fraction"`
	// WhitelistedPoolsIDs defines the list of pool IDs that are providing
	// cryptoeconomic security to the service.
	WhitelistedPoolsIDs []uint32 `protobuf:"varint,2,rep,packed,name=whitelisted_pools_ids,json=whitelistedPoolsIds,proto3" json:"whitelisted_pools_ids,omitempty"`
	// WhitelistedOperatorsIDs defines the list of operator IDs that are allowed
	// to validate this service.
	WhitelistedOperatorsIDs []uint32 `protobuf:"varint,3,rep,packed,name=whitelisted_operators_ids,json=whitelistedOperatorsIds,proto3" json:"whitelisted_operators_ids,omitempty"`
}

func (m *LegacyServiceParams) Reset()         { *m = LegacyServiceParams{} }
func (m *LegacyServiceParams) String() string { return proto.CompactTextString(m) }
func (*LegacyServiceParams) ProtoMessage()    {}
func (*LegacyServiceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_43f21e7506fe6c2d, []int{1}
}
func (m *LegacyServiceParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LegacyServiceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LegacyServiceParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LegacyServiceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LegacyServiceParams.Merge(m, src)
}
func (m *LegacyServiceParams) XXX_Size() int {
	return m.Size()
}
func (m *LegacyServiceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_LegacyServiceParams.DiscardUnknown(m)
}

var xxx_messageInfo_LegacyServiceParams proto.InternalMessageInfo

func (m *LegacyServiceParams) GetWhitelistedPoolsIDs() []uint32 {
	if m != nil {
		return m.WhitelistedPoolsIDs
	}
	return nil
}

func (m *LegacyServiceParams) GetWhitelistedOperatorsIDs() []uint32 {
	if m != nil {
		return m.WhitelistedOperatorsIDs
	}
	return nil
}

func init() {
	proto.RegisterType((*LegacyOperatorParams)(nil), "milkyway.restaking.legacy.LegacyOperatorParams")
	proto.RegisterType((*LegacyServiceParams)(nil), "milkyway.restaking.legacy.LegacyServiceParams")
}

func init() {
	proto.RegisterFile("milkyway/restaking/legacy/models.proto", fileDescriptor_43f21e7506fe6c2d)
}

var fileDescriptor_43f21e7506fe6c2d = []byte{
	// 442 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x6a, 0xdb, 0x40,
	0x10, 0xb6, 0x12, 0x28, 0x54, 0x90, 0x14, 0xcb, 0x09, 0x8e, 0x13, 0x90, 0x42, 0x0a, 0x25, 0x97,
	0x6a, 0x09, 0xbd, 0xf5, 0x68, 0xd2, 0x42, 0xd3, 0x40, 0x83, 0x5b, 0x08, 0xf4, 0x22, 0x56, 0xd2,
	0x44, 0xde, 0x58, 0xab, 0x11, 0x3b, 0x9b, 0xb8, 0x7e, 0x82, 0x5e, 0xfb, 0x1e, 0x7d, 0x91, 0x1c,
	0x73, 0x2c, 0x3d, 0x88, 0x22, 0xbf, 0x48, 0xf1, 0xee, 0x3a, 0x76, 0x7f, 0x2e, 0xb9, 0x08, 0xcd,
	0xf7, 0xb7, 0x1f, 0xbb, 0xe3, 0xbf, 0x90, 0xa2, 0x9c, 0xcc, 0xa6, 0x7c, 0xc6, 0x14, 0x90, 0xe6,
	0x13, 0x51, 0x15, 0xac, 0x84, 0x82, 0x67, 0x33, 0x26, 0x31, 0x87, 0x92, 0xe2, 0x5a, 0xa1, 0xc6,
	0x60, 0xb0, 0xd4, 0xc5, 0x0f, 0xba, 0xd8, 0xea, 0xf6, 0x77, 0x0a, 0x2c, 0xd0, 0xa8, 0xd8, 0xe2,
	0xcf, 0x1a, 0xf6, 0xa3, 0x02, 0xb1, 0x28, 0x81, 0x99, 0x29, 0xbd, 0xb9, 0x62, 0x5a, 0xc8, 0x85,
	0x53, 0xd6, 0x4e, 0xd0, 0xe5, 0x52, 0x54, 0xc8, 0xcc, 0xd7, 0x41, 0x83, 0x0c, 0x49, 0x22, 0x25,
	0x36, 0xcc, 0x0e, 0x8e, 0x0a, 0xed, 0xc4, 0x52, 0x4e, 0xc0, 0x6e, 0x4f, 0x52, 0xd0, 0xfc, 0x84,
	0x65, 0x28, 0x2a, 0xcb, 0x1f, 0x7d, 0xf7, 0xfc, 0x9d, 0x73, 0xd3, 0xe7, 0x43, 0x0d, 0x8a, 0x6b,
	0x54, 0x17, 0x5c, 0x71, 0x49, 0xc1, 0xb9, 0xff, 0x2c, 0x43, 0x29, 0x05, 0x91, 0xc0, 0x2a, 0x51,
	0x5c, 0xc3, 0x9e, 0x77, 0xe8, 0x1d, 0x3f, 0x1d, 0x3e, 0xbf, 0x6b, 0xa2, 0xce, 0xcf, 0x26, 0x3a,
	0xb0, 0xc9, 0x94, 0x4f, 0x62, 0x81, 0x4c, 0x72, 0x3d, 0x8e, 0x6d, 0xd0, 0x29, 0x64, 0xa3, 0xed,
	0x95, 0x77, 0xc4, 0x35, 0x04, 0x6f, 0xfc, 0xde, 0x35, 0x8a, 0x0a, 0xf2, 0x84, 0x40, 0xdd, 0x8a,
	0x0c, 0x28, 0x11, 0x39, 0xed, 0x6d, 0x1c, 0x6e, 0x1e, 0x6f, 0x0d, 0x77, 0xdb, 0x26, 0xea, 0x9e,
	0x19, 0xfa, 0xa3, 0x63, 0xdf, 0x9d, 0xd2, 0xa8, 0x7b, 0xfd, 0x27, 0x94, 0xd3, 0xd1, 0xd7, 0x0d,
	0xbf, 0x67, 0x0f, 0x71, 0xa8, 0x2b, 0x7b, 0xe6, 0x6f, 0x53, 0xc9, 0x69, 0x9c, 0x5c, 0x29, 0x9e,
	0x69, 0x81, 0xd5, 0x63, 0xba, 0x6e, 0x19, 0xeb, 0x5b, 0xe7, 0x0c, 0xde, 0xfb, 0xbb, 0xd3, 0xb1,
	0xd0, 0x50, 0x0a, 0xd2, 0x90, 0x27, 0x35, 0x62, 0xb9, 0x5e, 0xb6, 0xdf, 0x36, 0x51, 0xef, 0x72,
	0x25, 0xb8, 0x58, 0xf0, 0x8b, 0xba, 0xbd, 0xe9, 0xdf, 0x60, 0x4e, 0xc1, 0xa5, 0x3f, 0x58, 0x0f,
	0x43, 0x77, 0xc7, 0x36, 0x70, 0xd3, 0x04, 0x1e, 0xb4, 0x4d, 0xd4, 0x5f, 0x0b, 0x5c, 0xbe, 0x83,
	0x09, 0xed, 0x4f, 0xff, 0x47, 0xe4, 0x34, 0xfc, 0x74, 0xd7, 0x86, 0xde, 0x7d, 0x1b, 0x7a, 0xbf,
	0xda, 0xd0, 0xfb, 0x36, 0x0f, 0x3b, 0xf7, 0xf3, 0xb0, 0xf3, 0x63, 0x1e, 0x76, 0x3e, 0xbf, 0x2e,
	0x84, 0x1e, 0xdf, 0xa4, 0x71, 0x86, 0x92, 0x2d, 0x97, 0xef, 0x65, 0xc9, 0x53, 0x7a, 0x98, 0xd8,
	0x97, 0x7f, 0x97, 0x56, 0xcf, 0x6a, 0xa0, 0xf4, 0x89, 0x59, 0x8a, 0x57, 0xbf, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xda, 0xba, 0x22, 0x64, 0xde, 0x02, 0x00, 0x00,
}

func (m *LegacyOperatorParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegacyOperatorParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LegacyOperatorParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.JoinedServicesIDs) > 0 {
		dAtA2 := make([]byte, len(m.JoinedServicesIDs)*10)
		var j1 int
		for _, num := range m.JoinedServicesIDs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintModels(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.CommissionRate.Size()
		i -= size
		if _, err := m.CommissionRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LegacyServiceParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LegacyServiceParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LegacyServiceParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WhitelistedOperatorsIDs) > 0 {
		dAtA4 := make([]byte, len(m.WhitelistedOperatorsIDs)*10)
		var j3 int
		for _, num := range m.WhitelistedOperatorsIDs {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintModels(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.WhitelistedPoolsIDs) > 0 {
		dAtA6 := make([]byte, len(m.WhitelistedPoolsIDs)*10)
		var j5 int
		for _, num := range m.WhitelistedPoolsIDs {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintModels(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x12
	}
	{
		size := m.SlashFraction.Size()
		i -= size
		if _, err := m.SlashFraction.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LegacyOperatorParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.CommissionRate.Size()
	n += 1 + l + sovModels(uint64(l))
	if len(m.JoinedServicesIDs) > 0 {
		l = 0
		for _, e := range m.JoinedServicesIDs {
			l += sovModels(uint64(e))
		}
		n += 1 + sovModels(uint64(l)) + l
	}
	return n
}

func (m *LegacyServiceParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SlashFraction.Size()
	n += 1 + l + sovModels(uint64(l))
	if len(m.WhitelistedPoolsIDs) > 0 {
		l = 0
		for _, e := range m.WhitelistedPoolsIDs {
			l += sovModels(uint64(e))
		}
		n += 1 + sovModels(uint64(l)) + l
	}
	if len(m.WhitelistedOperatorsIDs) > 0 {
		l = 0
		for _, e := range m.WhitelistedOperatorsIDs {
			l += sovModels(uint64(e))
		}
		n += 1 + sovModels(uint64(l)) + l
	}
	return n
}

func sovModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LegacyOperatorParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegacyOperatorParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegacyOperatorParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommissionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommissionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.JoinedServicesIDs = append(m.JoinedServicesIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.JoinedServicesIDs) == 0 {
					m.JoinedServicesIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.JoinedServicesIDs = append(m.JoinedServicesIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinedServicesIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LegacyServiceParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LegacyServiceParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LegacyServiceParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashFraction", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashFraction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WhitelistedPoolsIDs = append(m.WhitelistedPoolsIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WhitelistedPoolsIDs) == 0 {
					m.WhitelistedPoolsIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WhitelistedPoolsIDs = append(m.WhitelistedPoolsIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedPoolsIDs", wireType)
			}
		case 3:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.WhitelistedOperatorsIDs = append(m.WhitelistedOperatorsIDs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowModels
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthModels
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthModels
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.WhitelistedOperatorsIDs) == 0 {
					m.WhitelistedOperatorsIDs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowModels
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.WhitelistedOperatorsIDs = append(m.WhitelistedOperatorsIDs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field WhitelistedOperatorsIDs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModels = fmt.Errorf("proto: unexpected end of group")
)
