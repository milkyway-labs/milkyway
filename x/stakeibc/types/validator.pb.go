// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/stakeibc/validator.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Validator struct {
	Name                        string                      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Address                     string                      `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Weight                      uint64                      `protobuf:"varint,6,opt,name=weight,proto3" json:"weight,omitempty"`
	Delegation                  cosmossdk_io_math.Int       `protobuf:"bytes,5,opt,name=delegation,proto3,customtype=cosmossdk.io/math.Int" json:"delegation"`
	SlashQueryProgressTracker   cosmossdk_io_math.Int       `protobuf:"bytes,9,opt,name=slash_query_progress_tracker,json=slashQueryProgressTracker,proto3,customtype=cosmossdk.io/math.Int" json:"slash_query_progress_tracker"`
	SlashQueryCheckpoint        cosmossdk_io_math.Int       `protobuf:"bytes,12,opt,name=slash_query_checkpoint,json=slashQueryCheckpoint,proto3,customtype=cosmossdk.io/math.Int" json:"slash_query_checkpoint"`
	SharesToTokensRate          cosmossdk_io_math.LegacyDec `protobuf:"bytes,10,opt,name=shares_to_tokens_rate,json=sharesToTokensRate,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"shares_to_tokens_rate"`
	DelegationChangesInProgress int64                       `protobuf:"varint,11,opt,name=delegation_changes_in_progress,json=delegationChangesInProgress,proto3" json:"delegation_changes_in_progress,omitempty"`
	SlashQueryInProgress        bool                        `protobuf:"varint,13,opt,name=slash_query_in_progress,json=slashQueryInProgress,proto3" json:"slash_query_in_progress,omitempty"`
}

func (m *Validator) Reset()         { *m = Validator{} }
func (m *Validator) String() string { return proto.CompactTextString(m) }
func (*Validator) ProtoMessage()    {}
func (*Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_5d2f32e16bd6ab8f, []int{0}
}
func (m *Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Validator.Merge(m, src)
}
func (m *Validator) XXX_Size() int {
	return m.Size()
}
func (m *Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Validator proto.InternalMessageInfo

func (m *Validator) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Validator) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Validator) GetWeight() uint64 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func (m *Validator) GetDelegationChangesInProgress() int64 {
	if m != nil {
		return m.DelegationChangesInProgress
	}
	return 0
}

func (m *Validator) GetSlashQueryInProgress() bool {
	if m != nil {
		return m.SlashQueryInProgress
	}
	return false
}

func init() {
	proto.RegisterType((*Validator)(nil), "stride.stakeibc.Validator")
}

func init() { proto.RegisterFile("stride/stakeibc/validator.proto", fileDescriptor_5d2f32e16bd6ab8f) }

var fileDescriptor_5d2f32e16bd6ab8f = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x63, 0xea, 0xa6, 0xce, 0x02, 0x22, 0x5a, 0xa5, 0xc5, 0x6d, 0xc1, 0x89, 0x38, 0xe5,
	0x12, 0x5b, 0x80, 0x38, 0x72, 0xa0, 0xe9, 0x81, 0x46, 0x1c, 0xc0, 0x8d, 0x38, 0x70, 0xc0, 0xda,
	0xac, 0x47, 0xf6, 0xca, 0x7f, 0x36, 0xec, 0x6e, 0x29, 0x7e, 0x0b, 0x1e, 0xa6, 0x0f, 0xd1, 0x63,
	0xd5, 0x13, 0x70, 0xa8, 0x50, 0xf2, 0x22, 0xc8, 0x5e, 0xa7, 0xb6, 0xc4, 0x25, 0xb7, 0x9d, 0x99,
	0xef, 0xfb, 0xad, 0xe6, 0xd3, 0xa0, 0xa1, 0x54, 0x82, 0x85, 0xe0, 0x49, 0x45, 0x12, 0x60, 0x0b,
	0xea, 0x7d, 0x27, 0x29, 0x0b, 0x89, 0xe2, 0xc2, 0x5d, 0x0a, 0xae, 0x38, 0x7e, 0xa2, 0x05, 0xee,
	0x46, 0x70, 0x74, 0x48, 0xb9, 0xcc, 0xb8, 0x0c, 0xaa, 0xb1, 0xa7, 0x0b, 0xad, 0x3d, 0x1a, 0x44,
	0x3c, 0xe2, 0xba, 0x5f, 0xbe, 0x74, 0xf7, 0xc5, 0x6f, 0x13, 0xf5, 0x3e, 0x6f, 0xa8, 0x18, 0x23,
	0x33, 0x27, 0x19, 0xd8, 0xc6, 0xc8, 0x18, 0xf7, 0xfc, 0xea, 0x8d, 0x5f, 0xa1, 0x3d, 0x12, 0x86,
	0x02, 0xa4, 0xb4, 0x1f, 0x94, 0xed, 0x13, 0xfb, 0xf6, 0x6a, 0x32, 0xa8, 0xd1, 0xef, 0xf4, 0xe4,
	0x5c, 0x09, 0x96, 0x47, 0xfe, 0x46, 0x88, 0x0f, 0x50, 0xf7, 0x12, 0x58, 0x14, 0x2b, 0xbb, 0x3b,
	0x32, 0xc6, 0xa6, 0x5f, 0x57, 0xf8, 0x2d, 0x42, 0x21, 0xa4, 0x10, 0x11, 0xc5, 0x78, 0x6e, 0xef,
	0x56, 0xb8, 0xe7, 0xd7, 0x77, 0xc3, 0xce, 0x9f, 0xbb, 0xe1, 0xbe, 0x46, 0xca, 0x30, 0x71, 0x19,
	0xf7, 0x32, 0xa2, 0x62, 0xf7, 0x2c, 0x57, 0x7e, 0xcb, 0x80, 0xbf, 0xa2, 0x67, 0x32, 0x25, 0x32,
	0x0e, 0xbe, 0x5d, 0x80, 0x28, 0xca, 0x25, 0xa3, 0xf2, 0xbb, 0x40, 0x09, 0x42, 0x13, 0x10, 0x76,
	0x6f, 0x1b, 0xe0, 0x61, 0x85, 0xf8, 0x54, 0x12, 0x3e, 0xd6, 0x80, 0xb9, 0xf6, 0xe3, 0x73, 0x74,
	0xd0, 0xe6, 0xd3, 0x18, 0x68, 0xb2, 0xe4, 0x2c, 0x57, 0xf6, 0xa3, 0x6d, 0xc8, 0x83, 0x86, 0x3c,
	0xbd, 0xb7, 0xe2, 0x10, 0xed, 0xcb, 0x98, 0x08, 0x90, 0x81, 0xe2, 0x81, 0xe2, 0x09, 0xe4, 0x32,
	0x10, 0x44, 0x81, 0x8d, 0x2a, 0xe6, 0xcb, 0x9a, 0x79, 0xfc, 0x3f, 0xf3, 0x03, 0x44, 0x84, 0x16,
	0xa7, 0x40, 0x6f, 0xaf, 0x26, 0xa8, 0x0e, 0xfc, 0x14, 0xa8, 0x8f, 0x35, 0x6f, 0xce, 0xe7, 0x15,
	0xcd, 0x27, 0x0a, 0xf0, 0x14, 0x39, 0x4d, 0x50, 0x01, 0x8d, 0x49, 0x1e, 0x81, 0x0c, 0x58, 0x7e,
	0x1f, 0x92, 0xfd, 0x70, 0x64, 0x8c, 0x77, 0xfc, 0xe3, 0x46, 0x35, 0xd5, 0xa2, 0xb3, 0x7c, 0x13,
	0x03, 0x7e, 0x83, 0x9e, 0xb6, 0xf7, 0x6f, 0xbb, 0x1f, 0x8f, 0x8c, 0xb1, 0xd5, 0xde, 0xb0, 0xb1,
	0xcd, 0x4c, 0x6b, 0xa7, 0x6f, 0xce, 0x4c, 0xcb, 0xec, 0xef, 0xce, 0x4c, 0x6b, 0xaf, 0x6f, 0xcd,
	0x4c, 0xcb, 0xea, 0xf7, 0x4e, 0xde, 0x5f, 0xaf, 0x1c, 0xe3, 0x66, 0xe5, 0x18, 0x7f, 0x57, 0x8e,
	0xf1, 0x73, 0xed, 0x74, 0x6e, 0xd6, 0x4e, 0xe7, 0xd7, 0xda, 0xe9, 0x7c, 0x71, 0x23, 0xa6, 0xe2,
	0x8b, 0x85, 0x4b, 0x79, 0xe6, 0x65, 0x2c, 0x4d, 0x8a, 0x4b, 0x52, 0x4c, 0x52, 0xb2, 0x90, 0x55,
	0xe5, 0xfd, 0x68, 0x2e, 0x5e, 0x15, 0x4b, 0x90, 0x8b, 0x6e, 0x75, 0xac, 0xaf, 0xff, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xde, 0x3d, 0xdf, 0x80, 0x11, 0x03, 0x00, 0x00,
}

func (m *Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SlashQueryInProgress {
		i--
		if m.SlashQueryInProgress {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	{
		size := m.SlashQueryCheckpoint.Size()
		i -= size
		if _, err := m.SlashQueryCheckpoint.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if m.DelegationChangesInProgress != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.DelegationChangesInProgress))
		i--
		dAtA[i] = 0x58
	}
	{
		size := m.SharesToTokensRate.Size()
		i -= size
		if _, err := m.SharesToTokensRate.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size := m.SlashQueryProgressTracker.Size()
		i -= size
		if _, err := m.SlashQueryProgressTracker.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	if m.Weight != 0 {
		i = encodeVarintValidator(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.Delegation.Size()
		i -= size
		if _, err := m.Delegation.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintValidator(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintValidator(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintValidator(dAtA []byte, offset int, v uint64) int {
	offset -= sovValidator(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovValidator(uint64(l))
	}
	l = m.Delegation.Size()
	n += 1 + l + sovValidator(uint64(l))
	if m.Weight != 0 {
		n += 1 + sovValidator(uint64(m.Weight))
	}
	l = m.SlashQueryProgressTracker.Size()
	n += 1 + l + sovValidator(uint64(l))
	l = m.SharesToTokensRate.Size()
	n += 1 + l + sovValidator(uint64(l))
	if m.DelegationChangesInProgress != 0 {
		n += 1 + sovValidator(uint64(m.DelegationChangesInProgress))
	}
	l = m.SlashQueryCheckpoint.Size()
	n += 1 + l + sovValidator(uint64(l))
	if m.SlashQueryInProgress {
		n += 2
	}
	return n
}

func sovValidator(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozValidator(x uint64) (n int) {
	return sovValidator(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Delegation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashQueryProgressTracker", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashQueryProgressTracker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SharesToTokensRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SharesToTokensRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationChangesInProgress", wireType)
			}
			m.DelegationChangesInProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationChangesInProgress |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashQueryCheckpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthValidator
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthValidator
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SlashQueryCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashQueryInProgress", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SlashQueryInProgress = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipValidator(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthValidator
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipValidator(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowValidator
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowValidator
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthValidator
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupValidator
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthValidator
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthValidator        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowValidator          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupValidator = fmt.Errorf("proto: unexpected end of group")
)
