// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/avs/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterAVSResponse defines the message structure for the RegisterAVS
// gRPC service method. It allows an account to register a new AVS that later on
// operators can opt to validate. It requires a sender address as well as the
// details of the AVS to be register.
type MsgRegisterAVS struct {
	// Sender is the address of the user registering the AVS
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Name is the name of the AVS
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
}

func (m *MsgRegisterAVS) Reset()         { *m = MsgRegisterAVS{} }
func (m *MsgRegisterAVS) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAVS) ProtoMessage()    {}
func (*MsgRegisterAVS) Descriptor() ([]byte, []int) {
	return fileDescriptor_01757aa274ae4cad, []int{0}
}
func (m *MsgRegisterAVS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAVS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAVS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAVS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAVS.Merge(m, src)
}
func (m *MsgRegisterAVS) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAVS) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAVS.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAVS proto.InternalMessageInfo

func (m *MsgRegisterAVS) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRegisterAVS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

// MsgRegisterAVSResponse is the return value of MsgRegisterAVS.
// It returns the newly created AVS ID.
type MsgRegisterAVSResponse struct {
	// NewAVSID is the ID of the newly registered AVS
	NewAVSID uint64 `protobuf:"varint,1,opt,name=new_avs_id,json=newAvsId,proto3" json:"new_avs_id,omitempty"`
}

func (m *MsgRegisterAVSResponse) Reset()         { *m = MsgRegisterAVSResponse{} }
func (m *MsgRegisterAVSResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAVSResponse) ProtoMessage()    {}
func (*MsgRegisterAVSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01757aa274ae4cad, []int{1}
}
func (m *MsgRegisterAVSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAVSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAVSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAVSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAVSResponse.Merge(m, src)
}
func (m *MsgRegisterAVSResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAVSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAVSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAVSResponse proto.InternalMessageInfo

func (m *MsgRegisterAVSResponse) GetNewAVSID() uint64 {
	if m != nil {
		return m.NewAVSID
	}
	return 0
}

// MsgDeregisterAVS defines the message structure for the DeregisterAVS gRPC
// service method. It allows the AVS owner to deregister their AVS so that
// operators know that they can safely stop validating it.
type MsgDeregisterAVS struct {
	// Sender is the address of the user deregistering the AVS
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// AVSID is the ID of the AVS to be deregistered
	AVSID uint64 `protobuf:"varint,2,opt,name=avs_id,json=avsId,proto3" json:"avs_id,omitempty"`
}

func (m *MsgDeregisterAVS) Reset()         { *m = MsgDeregisterAVS{} }
func (m *MsgDeregisterAVS) String() string { return proto.CompactTextString(m) }
func (*MsgDeregisterAVS) ProtoMessage()    {}
func (*MsgDeregisterAVS) Descriptor() ([]byte, []int) {
	return fileDescriptor_01757aa274ae4cad, []int{2}
}
func (m *MsgDeregisterAVS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeregisterAVS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeregisterAVS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeregisterAVS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeregisterAVS.Merge(m, src)
}
func (m *MsgDeregisterAVS) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeregisterAVS) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeregisterAVS.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeregisterAVS proto.InternalMessageInfo

func (m *MsgDeregisterAVS) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgDeregisterAVS) GetAVSID() uint64 {
	if m != nil {
		return m.AVSID
	}
	return 0
}

// MsgDeregisterAVSResponse is the return value of MsgDeregisterAVS.
type MsgDeregisterAVSResponse struct {
}

func (m *MsgDeregisterAVSResponse) Reset()         { *m = MsgDeregisterAVSResponse{} }
func (m *MsgDeregisterAVSResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeregisterAVSResponse) ProtoMessage()    {}
func (*MsgDeregisterAVSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01757aa274ae4cad, []int{3}
}
func (m *MsgDeregisterAVSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeregisterAVSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeregisterAVSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeregisterAVSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeregisterAVSResponse.Merge(m, src)
}
func (m *MsgDeregisterAVSResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeregisterAVSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeregisterAVSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeregisterAVSResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterAVS)(nil), "milkyway.avs.v1.MsgRegisterAVS")
	proto.RegisterType((*MsgRegisterAVSResponse)(nil), "milkyway.avs.v1.MsgRegisterAVSResponse")
	proto.RegisterType((*MsgDeregisterAVS)(nil), "milkyway.avs.v1.MsgDeregisterAVS")
	proto.RegisterType((*MsgDeregisterAVSResponse)(nil), "milkyway.avs.v1.MsgDeregisterAVSResponse")
}

func init() { proto.RegisterFile("milkyway/avs/v1/tx.proto", fileDescriptor_01757aa274ae4cad) }

var fileDescriptor_01757aa274ae4cad = []byte{
	// 477 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0x41, 0x8b, 0xd3, 0x40,
	0x14, 0xde, 0x59, 0xb7, 0x65, 0x77, 0x56, 0x5d, 0x0d, 0x45, 0x63, 0x90, 0x74, 0x8d, 0x82, 0x5a,
	0x68, 0xc6, 0xea, 0xad, 0xb7, 0x96, 0x82, 0xec, 0xa1, 0x1e, 0x52, 0x58, 0x41, 0x90, 0x32, 0x69,
	0x86, 0x31, 0x6c, 0x67, 0xa6, 0xe4, 0xc5, 0x74, 0x7b, 0x13, 0x8f, 0xea, 0xc1, 0x9f, 0xd2, 0x83,
	0x3f, 0xc1, 0x83, 0xc7, 0xc5, 0x93, 0xa7, 0x22, 0xe9, 0xa1, 0x77, 0x7f, 0x81, 0x24, 0x99, 0x16,
	0x53, 0x85, 0x3d, 0x78, 0x09, 0xf9, 0xde, 0xf7, 0xcd, 0x7c, 0xef, 0x7b, 0xf3, 0xb0, 0x29, 0xc2,
	0xf1, 0xd9, 0x6c, 0x4a, 0x67, 0x84, 0x26, 0x40, 0x92, 0x16, 0x89, 0xcf, 0xdd, 0x49, 0xa4, 0x62,
	0x65, 0x1c, 0xad, 0x19, 0x97, 0x26, 0xe0, 0x26, 0x2d, 0xeb, 0x26, 0x15, 0xa1, 0x54, 0x24, 0xff,
	0x16, 0x1a, 0xeb, 0xce, 0x48, 0x81, 0x50, 0x30, 0xcc, 0x11, 0x29, 0x80, 0xa6, 0xec, 0x02, 0x11,
	0x9f, 0x02, 0x23, 0x49, 0xcb, 0x67, 0x31, 0x6d, 0x91, 0x91, 0x0a, 0xe5, 0x5f, 0xbc, 0x3c, 0xdb,
	0xf0, 0x19, 0xd0, 0xfc, 0x6d, 0xcd, 0x0b, 0xe0, 0x59, 0x5b, 0x02, 0xb8, 0x26, 0x6a, 0x5c, 0x71,
	0x55, 0x18, 0x66, 0x7f, 0xba, 0x7a, 0x77, 0x3b, 0xc7, 0x84, 0x46, 0x54, 0xe8, 0x66, 0x9c, 0x8f,
	0x08, 0x5f, 0xef, 0x03, 0xf7, 0x18, 0x0f, 0x21, 0x66, 0x51, 0xe7, 0x74, 0x60, 0x3c, 0xc1, 0x55,
	0x60, 0x32, 0x60, 0x91, 0x89, 0x8e, 0xd1, 0xa3, 0x83, 0xae, 0xf9, 0xfd, 0x4b, 0xb3, 0xa6, 0x13,
	0x74, 0x82, 0x20, 0x62, 0x00, 0x83, 0x38, 0x0a, 0x25, 0xf7, 0xb4, 0xce, 0xb8, 0x8f, 0xf7, 0x24,
	0x15, 0xcc, 0xdc, 0xcd, 0xf5, 0x47, 0xbf, 0x16, 0xf5, 0xc3, 0x19, 0x15, 0xe3, 0xb6, 0x93, 0x55,
	0x1d, 0x2f, 0x27, 0xdb, 0xce, 0xfb, 0xd5, 0xbc, 0xa1, 0x4f, 0x7c, 0x58, 0xcd, 0x1b, 0x46, 0xd6,
	0x4e, 0xd9, 0xda, 0xe9, 0xe1, 0x5b, 0xe5, 0x8a, 0xc7, 0x60, 0xa2, 0x24, 0x30, 0xa3, 0x81, 0xb1,
	0x64, 0xd3, 0x21, 0x4d, 0x60, 0x18, 0x06, 0x79, 0x63, 0x7b, 0xdd, 0xab, 0xe9, 0xa2, 0xbe, 0xff,
	0x82, 0x4d, 0x3b, 0xa7, 0x83, 0x93, 0x9e, 0xb7, 0x2f, 0xd9, 0xb4, 0x93, 0xc0, 0x49, 0xe0, 0x7c,
	0x42, 0xf8, 0x46, 0x1f, 0x78, 0x8f, 0x45, 0xff, 0x95, 0xea, 0x18, 0x57, 0xb5, 0xdd, 0x6e, 0x6e,
	0x77, 0x90, 0x2e, 0xea, 0x95, 0xc2, 0xab, 0x42, 0x33, 0xa3, 0xf6, 0x83, 0xad, 0x48, 0x35, 0x1d,
	0xa9, 0xe4, 0xec, 0x58, 0xd8, 0xdc, 0xae, 0xad, 0x63, 0x3d, 0xfd, 0x8a, 0xf0, 0x95, 0x3e, 0x70,
	0xe3, 0x25, 0x3e, 0xfc, 0xf3, 0x09, 0xea, 0xee, 0xd6, 0x8a, 0xb9, 0xe5, 0xb1, 0x58, 0x0f, 0x2f,
	0x11, 0x6c, 0xe6, 0xf6, 0x1a, 0x5f, 0x2b, 0xcf, 0xe1, 0xde, 0xbf, 0x4e, 0x96, 0x24, 0xd6, 0xe3,
	0x4b, 0x25, 0xeb, 0xeb, 0xad, 0xca, 0xbb, 0xd5, 0xbc, 0x81, 0xba, 0xcf, 0xbf, 0xa5, 0x36, 0xba,
	0x48, 0x6d, 0xf4, 0x33, 0xb5, 0xd1, 0xe7, 0xa5, 0xbd, 0x73, 0xb1, 0xb4, 0x77, 0x7e, 0x2c, 0xed,
	0x9d, 0x57, 0x4d, 0x1e, 0xc6, 0x6f, 0xde, 0xfa, 0xee, 0x48, 0x09, 0xb2, 0xbe, 0xb5, 0x39, 0xa6,
	0x3e, 0x6c, 0x10, 0x39, 0xcf, 0x17, 0x33, 0x9e, 0x4d, 0x18, 0xf8, 0xd5, 0x7c, 0x2b, 0x9f, 0xfd,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x84, 0x9e, 0x10, 0xaf, 0x7d, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RegisterAVS(ctx context.Context, in *MsgRegisterAVS, opts ...grpc.CallOption) (*MsgRegisterAVSResponse, error)
	DeregisterAVS(ctx context.Context, in *MsgDeregisterAVS, opts ...grpc.CallOption) (*MsgDeregisterAVSResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterAVS(ctx context.Context, in *MsgRegisterAVS, opts ...grpc.CallOption) (*MsgRegisterAVSResponse, error) {
	out := new(MsgRegisterAVSResponse)
	err := c.cc.Invoke(ctx, "/milkyway.avs.v1.Msg/RegisterAVS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeregisterAVS(ctx context.Context, in *MsgDeregisterAVS, opts ...grpc.CallOption) (*MsgDeregisterAVSResponse, error) {
	out := new(MsgDeregisterAVSResponse)
	err := c.cc.Invoke(ctx, "/milkyway.avs.v1.Msg/DeregisterAVS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RegisterAVS(context.Context, *MsgRegisterAVS) (*MsgRegisterAVSResponse, error)
	DeregisterAVS(context.Context, *MsgDeregisterAVS) (*MsgDeregisterAVSResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterAVS(ctx context.Context, req *MsgRegisterAVS) (*MsgRegisterAVSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAVS not implemented")
}
func (*UnimplementedMsgServer) DeregisterAVS(ctx context.Context, req *MsgDeregisterAVS) (*MsgDeregisterAVSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterAVS not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterAVS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAVS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAVS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.avs.v1.Msg/RegisterAVS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAVS(ctx, req.(*MsgRegisterAVS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeregisterAVS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeregisterAVS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeregisterAVS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.avs.v1.Msg/DeregisterAVS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeregisterAVS(ctx, req.(*MsgDeregisterAVS))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milkyway.avs.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAVS",
			Handler:    _Msg_RegisterAVS_Handler,
		},
		{
			MethodName: "DeregisterAVS",
			Handler:    _Msg_DeregisterAVS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milkyway/avs/v1/tx.proto",
}

func (m *MsgRegisterAVS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAVS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAVS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAVSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAVSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAVSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewAVSID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewAVSID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeregisterAVS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeregisterAVS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeregisterAVS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AVSID != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AVSID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeregisterAVSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeregisterAVSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeregisterAVSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterAVS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterAVSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewAVSID != 0 {
		n += 1 + sovTx(uint64(m.NewAVSID))
	}
	return n
}

func (m *MsgDeregisterAVS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AVSID != 0 {
		n += 1 + sovTx(uint64(m.AVSID))
	}
	return n
}

func (m *MsgDeregisterAVSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterAVS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAVS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAVS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAVSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAVSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAVSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAVSID", wireType)
			}
			m.NewAVSID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewAVSID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeregisterAVS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeregisterAVS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeregisterAVS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AVSID", wireType)
			}
			m.AVSID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AVSID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeregisterAVSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeregisterAVSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeregisterAVSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
