// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/avs/v1/messages.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/cosmos-sdk/x/bank/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRegisterAVSResponse defines the message structure for the RegisterAVS
// gRPC service method. It allows an account to register a new AVS that later on
// operators can opt to validate. It requires a sender address as well as the
// details of the AVS to be register.
type MsgRegisterAVS struct {
	// Sender is the address of the user registering the AVS
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// Name is the name of the AVS
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	// Description is the description of the AVS (optional)
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	// Website is the website of the AVS (optional)
	Website string `protobuf:"bytes,4,opt,name=website,proto3" json:"website,omitempty" yaml:"website"`
	// PictureURL is the URL of the AVS picture (optional)
	PictureUrl string `protobuf:"bytes,5,opt,name=picture_url,json=pictureUrl,proto3" json:"picture_url,omitempty" yaml:"picture_url"`
}

func (m *MsgRegisterAVS) Reset()         { *m = MsgRegisterAVS{} }
func (m *MsgRegisterAVS) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAVS) ProtoMessage()    {}
func (*MsgRegisterAVS) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee6728b943d8fd23, []int{0}
}
func (m *MsgRegisterAVS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAVS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAVS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAVS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAVS.Merge(m, src)
}
func (m *MsgRegisterAVS) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAVS) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAVS.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAVS proto.InternalMessageInfo

func (m *MsgRegisterAVS) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgRegisterAVS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgRegisterAVS) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgRegisterAVS) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *MsgRegisterAVS) GetPictureUrl() string {
	if m != nil {
		return m.PictureUrl
	}
	return ""
}

// MsgRegisterAVSResponse is the return value of MsgRegisterAVS.
// It returns the newly created AVS ID.
type MsgRegisterAVSResponse struct {
	// NewAVSID is the ID of the newly registered AVS
	NewAVSID uint32 `protobuf:"varint,1,opt,name=new_avs_id,json=newAvsId,proto3" json:"new_avs_id,omitempty"`
}

func (m *MsgRegisterAVSResponse) Reset()         { *m = MsgRegisterAVSResponse{} }
func (m *MsgRegisterAVSResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterAVSResponse) ProtoMessage()    {}
func (*MsgRegisterAVSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee6728b943d8fd23, []int{1}
}
func (m *MsgRegisterAVSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterAVSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterAVSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterAVSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterAVSResponse.Merge(m, src)
}
func (m *MsgRegisterAVSResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterAVSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterAVSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterAVSResponse proto.InternalMessageInfo

func (m *MsgRegisterAVSResponse) GetNewAVSID() uint32 {
	if m != nil {
		return m.NewAVSID
	}
	return 0
}

// MsgUpdateAVS defines the message structure for the UpdateAVS gRPC
// service method. It allows the AVS owner to update the details of
// an existing AVS.
type MsgUpdateAVS struct {
	// Sender is the address of the user deregistering the AVS
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// ID represents the ID of the AVS to be updated
	ID uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// Name is the new name of the AVS (optional).
	// If it shouldn't be changed, use [do-not-modify] instead.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	// Description is the new description of the AVS (optional)
	// If it shouldn't be changed, use [do-not-modify] instead.
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" yaml:"description"`
	// Website is the new website of the AVS (optional)
	// If it shouldn't be changed, use [do-not-modify] instead.
	Website string `protobuf:"bytes,5,opt,name=website,proto3" json:"website,omitempty" yaml:"website"`
	// PictureURL is the new URL of the AVS picture (optional)
	// If it shouldn't be changed, use [do-not-modify] instead.
	PictureUrl string `protobuf:"bytes,6,opt,name=picture_url,json=pictureUrl,proto3" json:"picture_url,omitempty" yaml:"picture_url"`
}

func (m *MsgUpdateAVS) Reset()         { *m = MsgUpdateAVS{} }
func (m *MsgUpdateAVS) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAVS) ProtoMessage()    {}
func (*MsgUpdateAVS) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee6728b943d8fd23, []int{2}
}
func (m *MsgUpdateAVS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAVS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAVS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAVS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAVS.Merge(m, src)
}
func (m *MsgUpdateAVS) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAVS) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAVS.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAVS proto.InternalMessageInfo

func (m *MsgUpdateAVS) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUpdateAVS) GetID() uint64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *MsgUpdateAVS) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MsgUpdateAVS) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgUpdateAVS) GetWebsite() string {
	if m != nil {
		return m.Website
	}
	return ""
}

func (m *MsgUpdateAVS) GetPictureUrl() string {
	if m != nil {
		return m.PictureUrl
	}
	return ""
}

// MsgUpdateAVSResponse is the return value of MsgUpdateAVS.
type MsgUpdateAVSResponse struct {
}

func (m *MsgUpdateAVSResponse) Reset()         { *m = MsgUpdateAVSResponse{} }
func (m *MsgUpdateAVSResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAVSResponse) ProtoMessage()    {}
func (*MsgUpdateAVSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee6728b943d8fd23, []int{3}
}
func (m *MsgUpdateAVSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAVSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAVSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAVSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAVSResponse.Merge(m, src)
}
func (m *MsgUpdateAVSResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAVSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAVSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAVSResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterAVS)(nil), "milkyway.avs.v1.MsgRegisterAVS")
	proto.RegisterType((*MsgRegisterAVSResponse)(nil), "milkyway.avs.v1.MsgRegisterAVSResponse")
	proto.RegisterType((*MsgUpdateAVS)(nil), "milkyway.avs.v1.MsgUpdateAVS")
	proto.RegisterType((*MsgUpdateAVSResponse)(nil), "milkyway.avs.v1.MsgUpdateAVSResponse")
}

func init() { proto.RegisterFile("milkyway/avs/v1/messages.proto", fileDescriptor_ee6728b943d8fd23) }

var fileDescriptor_ee6728b943d8fd23 = []byte{
	// 575 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0x4d, 0x8f, 0xd2, 0x40,
	0x1c, 0xc6, 0x69, 0x79, 0x71, 0x77, 0x58, 0x77, 0x63, 0x83, 0x6c, 0x25, 0xda, 0x9a, 0x9a, 0xcd,
	0x1a, 0x22, 0xad, 0xe8, 0x41, 0xb3, 0x37, 0x08, 0x89, 0xe1, 0x80, 0x89, 0x25, 0xbb, 0x26, 0x5e,
	0xc8, 0x94, 0x4e, 0xea, 0x64, 0xe9, 0x4b, 0xfa, 0x2f, 0x45, 0x6e, 0xc6, 0xa3, 0x27, 0x3f, 0x0a,
	0x26, 0x1e, 0xfc, 0x02, 0x26, 0x1e, 0x37, 0x9e, 0x3c, 0x11, 0x03, 0x07, 0xee, 0x7c, 0x02, 0x43,
	0x3b, 0xd4, 0x82, 0x46, 0xdd, 0xbd, 0x10, 0x9e, 0xf9, 0x3d, 0xf3, 0xf6, 0x3c, 0x1d, 0x24, 0xd9,
	0x74, 0x70, 0x3e, 0x1e, 0xe1, 0xb1, 0x86, 0x43, 0xd0, 0xc2, 0xba, 0x66, 0x13, 0x00, 0x6c, 0x11,
	0x50, 0x3d, 0xdf, 0x0d, 0x5c, 0xe1, 0x60, 0xcd, 0x55, 0x1c, 0x82, 0x1a, 0xd6, 0x2b, 0x37, 0xb0,
	0x4d, 0x1d, 0x57, 0x8b, 0x7e, 0x63, 0x4f, 0xe5, 0x56, 0xdf, 0x05, 0xdb, 0x85, 0x5e, 0xa4, 0xb4,
	0x58, 0x30, 0x24, 0xc5, 0x4a, 0x33, 0x30, 0x10, 0x2d, 0xac, 0x1b, 0x24, 0xc0, 0x75, 0xad, 0xef,
	0x52, 0xe7, 0x37, 0xee, 0x9c, 0x27, 0x7c, 0x25, 0x18, 0x3f, 0x64, 0xdc, 0x06, 0x2b, 0x3a, 0x1c,
	0x58, 0x0c, 0x94, 0x2c, 0xd7, 0x72, 0xe3, 0x0d, 0x57, 0xff, 0xd8, 0xe8, 0xed, 0xed, 0xdb, 0x78,
	0xd8, 0xc7, 0x36, 0x3b, 0x8c, 0xf2, 0x91, 0x47, 0xfb, 0x1d, 0xb0, 0x74, 0x62, 0x51, 0x08, 0x88,
	0xdf, 0x38, 0xeb, 0x0a, 0x0f, 0x51, 0x01, 0x88, 0x63, 0x12, 0x5f, 0xe4, 0xee, 0x72, 0xf7, 0x77,
	0x9b, 0xe2, 0xb7, 0x4f, 0xb5, 0x12, 0xbb, 0x41, 0xc3, 0x34, 0x7d, 0x02, 0xd0, 0x0d, 0x7c, 0xea,
	0x58, 0x3a, 0xf3, 0x09, 0xf7, 0x50, 0xce, 0xc1, 0x36, 0x11, 0xf9, 0xc8, 0x7f, 0xb0, 0x9c, 0xca,
	0xc5, 0x31, 0xb6, 0x07, 0x27, 0xca, 0x6a, 0x54, 0xd1, 0x23, 0x28, 0x3c, 0x45, 0x45, 0x93, 0x40,
	0xdf, 0xa7, 0x5e, 0x40, 0x5d, 0x47, 0xcc, 0x46, 0xde, 0xf2, 0x72, 0x2a, 0x0b, 0xb1, 0x37, 0x05,
	0x15, 0x3d, 0x6d, 0x15, 0x1e, 0xa0, 0x6b, 0x23, 0x62, 0x00, 0x0d, 0x88, 0x98, 0x8b, 0x66, 0x09,
	0xcb, 0xa9, 0xbc, 0x1f, 0xcf, 0x62, 0x40, 0xd1, 0xd7, 0x16, 0xe1, 0x09, 0x2a, 0x7a, 0xb4, 0x1f,
	0x0c, 0x7d, 0xd2, 0x1b, 0xfa, 0x03, 0x31, 0xbf, 0xbd, 0x4f, 0x0a, 0x2a, 0x3a, 0x62, 0xea, 0xd4,
	0x1f, 0x9c, 0x1c, 0xbf, 0x5b, 0x4c, 0xaa, 0xec, 0x4a, 0xef, 0x17, 0x93, 0xea, 0x61, 0x12, 0xdc,
	0x66, 0x40, 0x4a, 0x0b, 0x95, 0x37, 0x47, 0x74, 0x02, 0x9e, 0xeb, 0x00, 0x11, 0xaa, 0x08, 0x39,
	0x64, 0xd4, 0xc3, 0x21, 0xf4, 0xa8, 0x19, 0xc5, 0x77, 0xbd, 0xb9, 0x37, 0x9b, 0xca, 0x3b, 0xcf,
	0xc9, 0xa8, 0x71, 0xd6, 0x6d, 0xb7, 0xf4, 0x1d, 0x87, 0x8c, 0x1a, 0x21, 0xb4, 0x4d, 0xe5, 0x0b,
	0x8f, 0xf6, 0x3a, 0x60, 0x9d, 0x7a, 0x26, 0x0e, 0xc8, 0xd5, 0x72, 0x2f, 0x23, 0x9e, 0x9a, 0x51,
	0xea, 0xb9, 0x66, 0x61, 0x36, 0x95, 0xf9, 0x76, 0x4b, 0xe7, 0xa9, 0x99, 0xf4, 0x91, 0xbd, 0x44,
	0x1f, 0xb9, 0x2b, 0xf5, 0x91, 0xbf, 0x74, 0x1f, 0x85, 0xff, 0xee, 0xe3, 0x68, 0xab, 0x8f, 0x9b,
	0xe9, 0x3e, 0x92, 0xd8, 0x94, 0x32, 0x2a, 0xa5, 0xf5, 0xba, 0x8b, 0x47, 0x9f, 0x39, 0x94, 0xed,
	0x80, 0x25, 0xbc, 0x44, 0xc5, 0xf4, 0xd7, 0x2d, 0xab, 0x5b, 0xaf, 0x57, 0xdd, 0xec, 0xb2, 0x72,
	0xfc, 0x0f, 0x43, 0x52, 0xf6, 0x0b, 0xb4, 0xfb, 0xab, 0xbc, 0x3b, 0x7f, 0x9a, 0x95, 0xe0, 0xca,
	0xd1, 0x5f, 0xf1, 0x7a, 0xc9, 0x4a, 0xfe, 0xed, 0x62, 0x52, 0xe5, 0x9a, 0xcf, 0xbe, 0xce, 0x24,
	0xee, 0x62, 0x26, 0x71, 0x3f, 0x66, 0x12, 0xf7, 0x61, 0x2e, 0x65, 0x2e, 0xe6, 0x52, 0xe6, 0xfb,
	0x5c, 0xca, 0xbc, 0xaa, 0x59, 0x34, 0x78, 0x3d, 0x34, 0xd4, 0xbe, 0x6b, 0x6b, 0xeb, 0x15, 0x6b,
	0x03, 0x6c, 0x40, 0xa2, 0xb4, 0x37, 0xd1, 0x3b, 0x0f, 0xc6, 0x1e, 0x01, 0xa3, 0x10, 0x3d, 0xf2,
	0xc7, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x33, 0x58, 0xed, 0x65, 0xd2, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RegisterAVS(ctx context.Context, in *MsgRegisterAVS, opts ...grpc.CallOption) (*MsgRegisterAVSResponse, error)
	UpdateAVS(ctx context.Context, in *MsgUpdateAVS, opts ...grpc.CallOption) (*MsgUpdateAVSResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterAVS(ctx context.Context, in *MsgRegisterAVS, opts ...grpc.CallOption) (*MsgRegisterAVSResponse, error) {
	out := new(MsgRegisterAVSResponse)
	err := c.cc.Invoke(ctx, "/milkyway.avs.v1.Msg/RegisterAVS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAVS(ctx context.Context, in *MsgUpdateAVS, opts ...grpc.CallOption) (*MsgUpdateAVSResponse, error) {
	out := new(MsgUpdateAVSResponse)
	err := c.cc.Invoke(ctx, "/milkyway.avs.v1.Msg/UpdateAVS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RegisterAVS(context.Context, *MsgRegisterAVS) (*MsgRegisterAVSResponse, error)
	UpdateAVS(context.Context, *MsgUpdateAVS) (*MsgUpdateAVSResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterAVS(ctx context.Context, req *MsgRegisterAVS) (*MsgRegisterAVSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterAVS not implemented")
}
func (*UnimplementedMsgServer) UpdateAVS(ctx context.Context, req *MsgUpdateAVS) (*MsgUpdateAVSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAVS not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterAVS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterAVS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterAVS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.avs.v1.Msg/RegisterAVS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterAVS(ctx, req.(*MsgRegisterAVS))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAVS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAVS)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAVS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.avs.v1.Msg/UpdateAVS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAVS(ctx, req.(*MsgUpdateAVS))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milkyway.avs.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterAVS",
			Handler:    _Msg_RegisterAVS_Handler,
		},
		{
			MethodName: "UpdateAVS",
			Handler:    _Msg_UpdateAVS_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milkyway/avs/v1/messages.proto",
}

func (m *MsgRegisterAVS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAVS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAVS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PictureUrl) > 0 {
		i -= len(m.PictureUrl)
		copy(dAtA[i:], m.PictureUrl)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.PictureUrl)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterAVSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterAVSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterAVSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewAVSID != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.NewAVSID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAVS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAVS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAVS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PictureUrl) > 0 {
		i -= len(m.PictureUrl)
		copy(dAtA[i:], m.PictureUrl)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.PictureUrl)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Website) > 0 {
		i -= len(m.Website)
		copy(dAtA[i:], m.Website)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Website)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ID != 0 {
		i = encodeVarintMessages(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAVSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAVSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAVSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterAVS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.PictureUrl)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgRegisterAVSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NewAVSID != 0 {
		n += 1 + sovMessages(uint64(m.NewAVSID))
	}
	return n
}

func (m *MsgUpdateAVS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if m.ID != 0 {
		n += 1 + sovMessages(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Website)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.PictureUrl)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	return n
}

func (m *MsgUpdateAVSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterAVS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAVS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAVS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PictureUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PictureUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterAVSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterAVSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterAVSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAVSID", wireType)
			}
			m.NewAVSID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewAVSID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAVS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAVS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAVS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Website", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Website = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PictureUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PictureUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAVSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAVSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAVSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
