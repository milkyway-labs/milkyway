// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/rewards/v1/models.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types2 "github.com/milkyway-labs/milkyway/x/restaking/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RewardsPlan struct {
	// ID is the unique identifier of the plan
	ID uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Description is the description of the plan
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	ServiceID   uint32 `protobuf:"varint,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// Amount is the amount of rewards to be distributed.
	AmountPerDay github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount_per_day,json=amountPerDay,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount_per_day"`
	// StartTime is the starting time of the plan
	StartTime time.Time `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// EndTime is the ending time of the plan
	EndTime               time.Time             `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	RewardsPool           string                `protobuf:"bytes,7,opt,name=rewards_pool,json=rewardsPool,proto3" json:"rewards_pool,omitempty"`
	PoolsDistribution     PoolsDistribution     `protobuf:"bytes,8,opt,name=pools_distribution,json=poolsDistribution,proto3" json:"pools_distribution"`
	OperatorsDistribution OperatorsDistribution `protobuf:"bytes,9,opt,name=operators_distribution,json=operatorsDistribution,proto3" json:"operators_distribution"`
	UsersDistribution     UsersDistribution     `protobuf:"bytes,10,opt,name=users_distribution,json=usersDistribution,proto3" json:"users_distribution"`
}

func (m *RewardsPlan) Reset()         { *m = RewardsPlan{} }
func (m *RewardsPlan) String() string { return proto.CompactTextString(m) }
func (*RewardsPlan) ProtoMessage()    {}
func (*RewardsPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{0}
}
func (m *RewardsPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsPlan.Merge(m, src)
}
func (m *RewardsPlan) XXX_Size() int {
	return m.Size()
}
func (m *RewardsPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsPlan.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsPlan proto.InternalMessageInfo

type PoolsDistribution struct {
	Weight uint32      `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Type   *types1.Any `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *PoolsDistribution) Reset()         { *m = PoolsDistribution{} }
func (m *PoolsDistribution) String() string { return proto.CompactTextString(m) }
func (*PoolsDistribution) ProtoMessage()    {}
func (*PoolsDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{1}
}
func (m *PoolsDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolsDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolsDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolsDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolsDistribution.Merge(m, src)
}
func (m *PoolsDistribution) XXX_Size() int {
	return m.Size()
}
func (m *PoolsDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolsDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_PoolsDistribution proto.InternalMessageInfo

type PoolsDistributionTypeBasic struct {
}

func (m *PoolsDistributionTypeBasic) Reset()         { *m = PoolsDistributionTypeBasic{} }
func (m *PoolsDistributionTypeBasic) String() string { return proto.CompactTextString(m) }
func (*PoolsDistributionTypeBasic) ProtoMessage()    {}
func (*PoolsDistributionTypeBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{2}
}
func (m *PoolsDistributionTypeBasic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolsDistributionTypeBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolsDistributionTypeBasic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolsDistributionTypeBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolsDistributionTypeBasic.Merge(m, src)
}
func (m *PoolsDistributionTypeBasic) XXX_Size() int {
	return m.Size()
}
func (m *PoolsDistributionTypeBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolsDistributionTypeBasic.DiscardUnknown(m)
}

var xxx_messageInfo_PoolsDistributionTypeBasic proto.InternalMessageInfo

type PoolsDistributionTypeWeighted struct {
	Weights []PoolDistributionWeight `protobuf:"bytes,1,rep,name=weights,proto3" json:"weights"`
}

func (m *PoolsDistributionTypeWeighted) Reset()         { *m = PoolsDistributionTypeWeighted{} }
func (m *PoolsDistributionTypeWeighted) String() string { return proto.CompactTextString(m) }
func (*PoolsDistributionTypeWeighted) ProtoMessage()    {}
func (*PoolsDistributionTypeWeighted) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{3}
}
func (m *PoolsDistributionTypeWeighted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolsDistributionTypeWeighted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolsDistributionTypeWeighted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolsDistributionTypeWeighted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolsDistributionTypeWeighted.Merge(m, src)
}
func (m *PoolsDistributionTypeWeighted) XXX_Size() int {
	return m.Size()
}
func (m *PoolsDistributionTypeWeighted) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolsDistributionTypeWeighted.DiscardUnknown(m)
}

var xxx_messageInfo_PoolsDistributionTypeWeighted proto.InternalMessageInfo

type PoolDistributionWeight struct {
	PoolID uint32 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	Weight uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *PoolDistributionWeight) Reset()         { *m = PoolDistributionWeight{} }
func (m *PoolDistributionWeight) String() string { return proto.CompactTextString(m) }
func (*PoolDistributionWeight) ProtoMessage()    {}
func (*PoolDistributionWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{4}
}
func (m *PoolDistributionWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolDistributionWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolDistributionWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolDistributionWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolDistributionWeight.Merge(m, src)
}
func (m *PoolDistributionWeight) XXX_Size() int {
	return m.Size()
}
func (m *PoolDistributionWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolDistributionWeight.DiscardUnknown(m)
}

var xxx_messageInfo_PoolDistributionWeight proto.InternalMessageInfo

type PoolsDistributionTypeEgalitarian struct {
}

func (m *PoolsDistributionTypeEgalitarian) Reset()         { *m = PoolsDistributionTypeEgalitarian{} }
func (m *PoolsDistributionTypeEgalitarian) String() string { return proto.CompactTextString(m) }
func (*PoolsDistributionTypeEgalitarian) ProtoMessage()    {}
func (*PoolsDistributionTypeEgalitarian) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{5}
}
func (m *PoolsDistributionTypeEgalitarian) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolsDistributionTypeEgalitarian) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolsDistributionTypeEgalitarian.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolsDistributionTypeEgalitarian) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolsDistributionTypeEgalitarian.Merge(m, src)
}
func (m *PoolsDistributionTypeEgalitarian) XXX_Size() int {
	return m.Size()
}
func (m *PoolsDistributionTypeEgalitarian) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolsDistributionTypeEgalitarian.DiscardUnknown(m)
}

var xxx_messageInfo_PoolsDistributionTypeEgalitarian proto.InternalMessageInfo

type OperatorsDistribution struct {
	Weight uint32      `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Type   *types1.Any `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *OperatorsDistribution) Reset()         { *m = OperatorsDistribution{} }
func (m *OperatorsDistribution) String() string { return proto.CompactTextString(m) }
func (*OperatorsDistribution) ProtoMessage()    {}
func (*OperatorsDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{6}
}
func (m *OperatorsDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorsDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorsDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorsDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorsDistribution.Merge(m, src)
}
func (m *OperatorsDistribution) XXX_Size() int {
	return m.Size()
}
func (m *OperatorsDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorsDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorsDistribution proto.InternalMessageInfo

type OperatorsDistributionTypeBasic struct {
}

func (m *OperatorsDistributionTypeBasic) Reset()         { *m = OperatorsDistributionTypeBasic{} }
func (m *OperatorsDistributionTypeBasic) String() string { return proto.CompactTextString(m) }
func (*OperatorsDistributionTypeBasic) ProtoMessage()    {}
func (*OperatorsDistributionTypeBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{7}
}
func (m *OperatorsDistributionTypeBasic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorsDistributionTypeBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorsDistributionTypeBasic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorsDistributionTypeBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorsDistributionTypeBasic.Merge(m, src)
}
func (m *OperatorsDistributionTypeBasic) XXX_Size() int {
	return m.Size()
}
func (m *OperatorsDistributionTypeBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorsDistributionTypeBasic.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorsDistributionTypeBasic proto.InternalMessageInfo

type OperatorsDistributionTypeWeighted struct {
	Weights []OperatorDistributionWeight `protobuf:"bytes,1,rep,name=weights,proto3" json:"weights"`
}

func (m *OperatorsDistributionTypeWeighted) Reset()         { *m = OperatorsDistributionTypeWeighted{} }
func (m *OperatorsDistributionTypeWeighted) String() string { return proto.CompactTextString(m) }
func (*OperatorsDistributionTypeWeighted) ProtoMessage()    {}
func (*OperatorsDistributionTypeWeighted) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{8}
}
func (m *OperatorsDistributionTypeWeighted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorsDistributionTypeWeighted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorsDistributionTypeWeighted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorsDistributionTypeWeighted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorsDistributionTypeWeighted.Merge(m, src)
}
func (m *OperatorsDistributionTypeWeighted) XXX_Size() int {
	return m.Size()
}
func (m *OperatorsDistributionTypeWeighted) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorsDistributionTypeWeighted.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorsDistributionTypeWeighted proto.InternalMessageInfo

type OperatorDistributionWeight struct {
	OperatorID uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	Weight     uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *OperatorDistributionWeight) Reset()         { *m = OperatorDistributionWeight{} }
func (m *OperatorDistributionWeight) String() string { return proto.CompactTextString(m) }
func (*OperatorDistributionWeight) ProtoMessage()    {}
func (*OperatorDistributionWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{9}
}
func (m *OperatorDistributionWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorDistributionWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorDistributionWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorDistributionWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorDistributionWeight.Merge(m, src)
}
func (m *OperatorDistributionWeight) XXX_Size() int {
	return m.Size()
}
func (m *OperatorDistributionWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorDistributionWeight.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorDistributionWeight proto.InternalMessageInfo

type OperatorsDistributionTypeEgalitarian struct {
}

func (m *OperatorsDistributionTypeEgalitarian) Reset()         { *m = OperatorsDistributionTypeEgalitarian{} }
func (m *OperatorsDistributionTypeEgalitarian) String() string { return proto.CompactTextString(m) }
func (*OperatorsDistributionTypeEgalitarian) ProtoMessage()    {}
func (*OperatorsDistributionTypeEgalitarian) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{10}
}
func (m *OperatorsDistributionTypeEgalitarian) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorsDistributionTypeEgalitarian) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorsDistributionTypeEgalitarian.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorsDistributionTypeEgalitarian) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorsDistributionTypeEgalitarian.Merge(m, src)
}
func (m *OperatorsDistributionTypeEgalitarian) XXX_Size() int {
	return m.Size()
}
func (m *OperatorsDistributionTypeEgalitarian) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorsDistributionTypeEgalitarian.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorsDistributionTypeEgalitarian proto.InternalMessageInfo

type UsersDistribution struct {
	Weight uint32      `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	Type   *types1.Any `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *UsersDistribution) Reset()         { *m = UsersDistribution{} }
func (m *UsersDistribution) String() string { return proto.CompactTextString(m) }
func (*UsersDistribution) ProtoMessage()    {}
func (*UsersDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{11}
}
func (m *UsersDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsersDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsersDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsersDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersDistribution.Merge(m, src)
}
func (m *UsersDistribution) XXX_Size() int {
	return m.Size()
}
func (m *UsersDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_UsersDistribution proto.InternalMessageInfo

type UsersDistributionTypeBasic struct {
}

func (m *UsersDistributionTypeBasic) Reset()         { *m = UsersDistributionTypeBasic{} }
func (m *UsersDistributionTypeBasic) String() string { return proto.CompactTextString(m) }
func (*UsersDistributionTypeBasic) ProtoMessage()    {}
func (*UsersDistributionTypeBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{12}
}
func (m *UsersDistributionTypeBasic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsersDistributionTypeBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsersDistributionTypeBasic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsersDistributionTypeBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersDistributionTypeBasic.Merge(m, src)
}
func (m *UsersDistributionTypeBasic) XXX_Size() int {
	return m.Size()
}
func (m *UsersDistributionTypeBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersDistributionTypeBasic.DiscardUnknown(m)
}

var xxx_messageInfo_UsersDistributionTypeBasic proto.InternalMessageInfo

type HistoricalRewards struct {
	CumulativeRewardRatios DecPools `protobuf:"bytes,1,rep,name=cumulative_reward_ratios,json=cumulativeRewardRatios,proto3,castrepeated=DecPools" json:"cumulative_reward_ratios" yaml:"cumulative_reward_ratios"`
	ReferenceCount         uint32   `protobuf:"varint,2,opt,name=reference_count,json=referenceCount,proto3" json:"reference_count,omitempty" yaml:"reference_count"`
}

func (m *HistoricalRewards) Reset()         { *m = HistoricalRewards{} }
func (m *HistoricalRewards) String() string { return proto.CompactTextString(m) }
func (*HistoricalRewards) ProtoMessage()    {}
func (*HistoricalRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{13}
}
func (m *HistoricalRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalRewards.Merge(m, src)
}
func (m *HistoricalRewards) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalRewards.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalRewards proto.InternalMessageInfo

type CurrentRewards struct {
	Rewards DecPools `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=DecPools" json:"rewards" yaml:"rewards"`
	Period  uint64   `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
}

func (m *CurrentRewards) Reset()         { *m = CurrentRewards{} }
func (m *CurrentRewards) String() string { return proto.CompactTextString(m) }
func (*CurrentRewards) ProtoMessage()    {}
func (*CurrentRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{14}
}
func (m *CurrentRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentRewards.Merge(m, src)
}
func (m *CurrentRewards) XXX_Size() int {
	return m.Size()
}
func (m *CurrentRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentRewards.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentRewards proto.InternalMessageInfo

type OutstandingRewards struct {
	Rewards DecPools `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=DecPools" json:"rewards" yaml:"rewards"`
}

func (m *OutstandingRewards) Reset()         { *m = OutstandingRewards{} }
func (m *OutstandingRewards) String() string { return proto.CompactTextString(m) }
func (*OutstandingRewards) ProtoMessage()    {}
func (*OutstandingRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{15}
}
func (m *OutstandingRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutstandingRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutstandingRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutstandingRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutstandingRewards.Merge(m, src)
}
func (m *OutstandingRewards) XXX_Size() int {
	return m.Size()
}
func (m *OutstandingRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_OutstandingRewards.DiscardUnknown(m)
}

var xxx_messageInfo_OutstandingRewards proto.InternalMessageInfo

type AccumulatedCommission struct {
	Commissions DecPools `protobuf:"bytes,1,rep,name=commissions,proto3,castrepeated=DecPools" json:"commissions"`
}

func (m *AccumulatedCommission) Reset()         { *m = AccumulatedCommission{} }
func (m *AccumulatedCommission) String() string { return proto.CompactTextString(m) }
func (*AccumulatedCommission) ProtoMessage()    {}
func (*AccumulatedCommission) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{16}
}
func (m *AccumulatedCommission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccumulatedCommission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccumulatedCommission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccumulatedCommission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccumulatedCommission.Merge(m, src)
}
func (m *AccumulatedCommission) XXX_Size() int {
	return m.Size()
}
func (m *AccumulatedCommission) XXX_DiscardUnknown() {
	xxx_messageInfo_AccumulatedCommission.DiscardUnknown(m)
}

var xxx_messageInfo_AccumulatedCommission proto.InternalMessageInfo

type DelegatorStartingInfo struct {
	PreviousPeriod uint64                                      `protobuf:"varint,1,opt,name=previous_period,json=previousPeriod,proto3" json:"previous_period,omitempty" yaml:"previous_period"`
	Stakes         github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=stakes,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"stakes" yaml:"stakes"`
	Height         uint64                                      `protobuf:"varint,3,opt,name=height,proto3" json:"creation_height" yaml:"creation_height"`
}

func (m *DelegatorStartingInfo) Reset()         { *m = DelegatorStartingInfo{} }
func (m *DelegatorStartingInfo) String() string { return proto.CompactTextString(m) }
func (*DelegatorStartingInfo) ProtoMessage()    {}
func (*DelegatorStartingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{17}
}
func (m *DelegatorStartingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorStartingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorStartingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorStartingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorStartingInfo.Merge(m, src)
}
func (m *DelegatorStartingInfo) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorStartingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorStartingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorStartingInfo proto.InternalMessageInfo

type DelegationDelegatorReward struct {
	DelegationType     types2.DelegationType `protobuf:"varint,1,opt,name=delegation_type,json=delegationType,proto3,enum=milkyway.restaking.v1.DelegationType" json:"delegation_type,omitempty"`
	DelegationTargetID uint32                `protobuf:"varint,2,opt,name=delegation_target_id,json=delegationTargetId,proto3" json:"delegation_target_id,omitempty"`
	Reward             DecPools              `protobuf:"bytes,3,rep,name=reward,proto3,castrepeated=DecPools" json:"reward"`
}

func (m *DelegationDelegatorReward) Reset()         { *m = DelegationDelegatorReward{} }
func (m *DelegationDelegatorReward) String() string { return proto.CompactTextString(m) }
func (*DelegationDelegatorReward) ProtoMessage()    {}
func (*DelegationDelegatorReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{18}
}
func (m *DelegationDelegatorReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationDelegatorReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationDelegatorReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationDelegatorReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationDelegatorReward.Merge(m, src)
}
func (m *DelegationDelegatorReward) XXX_Size() int {
	return m.Size()
}
func (m *DelegationDelegatorReward) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationDelegatorReward.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationDelegatorReward proto.InternalMessageInfo

// Pool is a Coins wrapper with denom.
type Pool struct {
	Denom string                                   `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins" yaml:"coins"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{19}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

// DecPool is a DecCoins wrapper with denom.
type DecPool struct {
	Denom    string                                      `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	DecCoins github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=dec_coins,json=decCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"dec_coins" yaml:"dec_coins"`
}

func (m *DecPool) Reset()         { *m = DecPool{} }
func (m *DecPool) String() string { return proto.CompactTextString(m) }
func (*DecPool) ProtoMessage()    {}
func (*DecPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{20}
}
func (m *DecPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecPool.Merge(m, src)
}
func (m *DecPool) XXX_Size() int {
	return m.Size()
}
func (m *DecPool) XXX_DiscardUnknown() {
	xxx_messageInfo_DecPool.DiscardUnknown(m)
}

var xxx_messageInfo_DecPool proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RewardsPlan)(nil), "milkyway.rewards.v1.RewardsPlan")
	proto.RegisterType((*PoolsDistribution)(nil), "milkyway.rewards.v1.PoolsDistribution")
	proto.RegisterType((*PoolsDistributionTypeBasic)(nil), "milkyway.rewards.v1.PoolsDistributionTypeBasic")
	proto.RegisterType((*PoolsDistributionTypeWeighted)(nil), "milkyway.rewards.v1.PoolsDistributionTypeWeighted")
	proto.RegisterType((*PoolDistributionWeight)(nil), "milkyway.rewards.v1.PoolDistributionWeight")
	proto.RegisterType((*PoolsDistributionTypeEgalitarian)(nil), "milkyway.rewards.v1.PoolsDistributionTypeEgalitarian")
	proto.RegisterType((*OperatorsDistribution)(nil), "milkyway.rewards.v1.OperatorsDistribution")
	proto.RegisterType((*OperatorsDistributionTypeBasic)(nil), "milkyway.rewards.v1.OperatorsDistributionTypeBasic")
	proto.RegisterType((*OperatorsDistributionTypeWeighted)(nil), "milkyway.rewards.v1.OperatorsDistributionTypeWeighted")
	proto.RegisterType((*OperatorDistributionWeight)(nil), "milkyway.rewards.v1.OperatorDistributionWeight")
	proto.RegisterType((*OperatorsDistributionTypeEgalitarian)(nil), "milkyway.rewards.v1.OperatorsDistributionTypeEgalitarian")
	proto.RegisterType((*UsersDistribution)(nil), "milkyway.rewards.v1.UsersDistribution")
	proto.RegisterType((*UsersDistributionTypeBasic)(nil), "milkyway.rewards.v1.UsersDistributionTypeBasic")
	proto.RegisterType((*HistoricalRewards)(nil), "milkyway.rewards.v1.HistoricalRewards")
	proto.RegisterType((*CurrentRewards)(nil), "milkyway.rewards.v1.CurrentRewards")
	proto.RegisterType((*OutstandingRewards)(nil), "milkyway.rewards.v1.OutstandingRewards")
	proto.RegisterType((*AccumulatedCommission)(nil), "milkyway.rewards.v1.AccumulatedCommission")
	proto.RegisterType((*DelegatorStartingInfo)(nil), "milkyway.rewards.v1.DelegatorStartingInfo")
	proto.RegisterType((*DelegationDelegatorReward)(nil), "milkyway.rewards.v1.DelegationDelegatorReward")
	proto.RegisterType((*Pool)(nil), "milkyway.rewards.v1.Pool")
	proto.RegisterType((*DecPool)(nil), "milkyway.rewards.v1.DecPool")
}

func init() { proto.RegisterFile("milkyway/rewards/v1/models.proto", fileDescriptor_fcf66d1f3415f5b6) }

var fileDescriptor_fcf66d1f3415f5b6 = []byte{
	// 1338 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x57, 0xcf, 0x6f, 0x13, 0xc7,
	0x17, 0xcf, 0x3a, 0x89, 0x13, 0x3f, 0x13, 0x43, 0xf6, 0x9b, 0x58, 0x26, 0xfa, 0xd6, 0xeb, 0x6e,
	0x5b, 0x94, 0x42, 0xed, 0x6d, 0xc2, 0x8d, 0x1e, 0x5a, 0x36, 0x46, 0xc5, 0x42, 0x6a, 0xd2, 0x0d,
	0x08, 0x15, 0x0e, 0xab, 0xf5, 0xee, 0xb0, 0x8c, 0xf0, 0xee, 0x98, 0x9d, 0x75, 0xa8, 0x7b, 0x44,
	0xdc, 0xda, 0x03, 0xf7, 0x1e, 0xaa, 0x9e, 0x5a, 0x71, 0xea, 0x01, 0xf5, 0x6f, 0x40, 0x1c, 0x2a,
	0xd4, 0x53, 0x4f, 0xa6, 0x35, 0x52, 0x2b, 0xf5, 0xc8, 0x5f, 0x50, 0xcd, 0x8f, 0x35, 0x8b, 0xb3,
	0x0e, 0x76, 0x24, 0x2e, 0x89, 0x67, 0xde, 0x7b, 0x9f, 0xf7, 0xeb, 0x33, 0xb3, 0x6f, 0xa0, 0x16,
	0xe0, 0xce, 0x9d, 0xfe, 0x3d, 0xa7, 0x6f, 0x44, 0xe8, 0x9e, 0x13, 0x79, 0xd4, 0x38, 0xd8, 0x32,
	0x02, 0xe2, 0xa1, 0x0e, 0x6d, 0x74, 0x23, 0x12, 0x13, 0xf5, 0x7f, 0x89, 0x46, 0x43, 0x6a, 0x34,
	0x0e, 0xb6, 0x36, 0x56, 0x9d, 0x00, 0x87, 0xc4, 0xe0, 0x7f, 0x85, 0xde, 0xc6, 0x69, 0x97, 0xd0,
	0x80, 0x50, 0x9b, 0xaf, 0x0c, 0xb1, 0x90, 0xa2, 0xaa, 0x58, 0x19, 0x6d, 0x87, 0x22, 0xe3, 0x60,
	0xab, 0x8d, 0x62, 0x67, 0xcb, 0x70, 0x09, 0x0e, 0xa5, 0x5c, 0xf3, 0x09, 0xf1, 0x3b, 0xc8, 0xe0,
	0xab, 0x76, 0xef, 0x96, 0x11, 0xe3, 0x00, 0xd1, 0xd8, 0x09, 0xba, 0x09, 0xf6, 0xb8, 0x82, 0x13,
	0xf6, 0xa5, 0x68, 0xcd, 0x27, 0x3e, 0x11, 0x3e, 0xd9, 0x2f, 0xb9, 0xab, 0xa7, 0xd2, 0xa2, 0xb1,
	0x73, 0x07, 0x87, 0xfe, 0x78, 0x62, 0xfa, 0x6f, 0x8b, 0x50, 0xb4, 0x44, 0x4a, 0x7b, 0x1d, 0x27,
	0x54, 0xcb, 0x90, 0xc3, 0x5e, 0x45, 0xa9, 0x29, 0x9b, 0x0b, 0x66, 0x7e, 0x38, 0xd0, 0x72, 0xad,
	0xa6, 0x95, 0xc3, 0x9e, 0x5a, 0x83, 0xa2, 0x87, 0xa8, 0x1b, 0xe1, 0x6e, 0x8c, 0x49, 0x58, 0xc9,
	0xd5, 0x94, 0xcd, 0x82, 0x95, 0xde, 0x52, 0x3f, 0x02, 0xa0, 0x28, 0x3a, 0xc0, 0x2e, 0xb2, 0xb1,
	0x57, 0x99, 0xaf, 0x29, 0x9b, 0x2b, 0xe6, 0xca, 0x70, 0xa0, 0x15, 0xf6, 0xc5, 0x6e, 0xab, 0x69,
	0x15, 0xa4, 0x42, 0xcb, 0x53, 0xef, 0x42, 0xc9, 0x09, 0x48, 0x2f, 0x8c, 0xed, 0x2e, 0x8a, 0x6c,
	0xcf, 0xe9, 0x57, 0x16, 0x6a, 0xf3, 0x9b, 0xc5, 0xed, 0xd3, 0x0d, 0x59, 0x34, 0x56, 0xa6, 0x86,
	0x2c, 0x53, 0x63, 0x87, 0xe0, 0xd0, 0xfc, 0xf8, 0xc9, 0x40, 0x9b, 0x7b, 0xf4, 0x5c, 0xdb, 0xf4,
	0x71, 0x7c, 0xbb, 0xd7, 0x6e, 0xb8, 0x24, 0x90, 0x15, 0x96, 0xff, 0xea, 0xd4, 0xbb, 0x63, 0xc4,
	0xfd, 0x2e, 0xa2, 0xdc, 0x80, 0x5a, 0x27, 0x84, 0x8b, 0x3d, 0x14, 0x35, 0x9d, 0xbe, 0xba, 0x03,
	0x40, 0x63, 0x27, 0x8a, 0x6d, 0x56, 0xd8, 0xca, 0x62, 0x4d, 0xd9, 0x2c, 0x6e, 0x6f, 0x34, 0x44,
	0x51, 0x1b, 0x49, 0x51, 0x1b, 0x57, 0x93, 0xaa, 0x9b, 0xcb, 0xcc, 0xdf, 0xc3, 0xe7, 0x9a, 0x62,
	0x15, 0xb8, 0x1d, 0x93, 0xa8, 0x9f, 0xc2, 0x32, 0x0a, 0x3d, 0x01, 0x91, 0x9f, 0x01, 0x62, 0x09,
	0x85, 0x1e, 0x07, 0xf8, 0x04, 0x4e, 0x48, 0x0a, 0xd9, 0x5d, 0x42, 0x3a, 0x95, 0x25, 0x56, 0x49,
	0xb3, 0xf2, 0xfb, 0xe3, 0xfa, 0x9a, 0xcc, 0xfc, 0xa2, 0xe7, 0x45, 0x88, 0xd2, 0xfd, 0x38, 0xc2,
	0xa1, 0x6f, 0x15, 0xa5, 0xf6, 0x1e, 0x21, 0x1d, 0xf5, 0x26, 0xa8, 0xcc, 0x88, 0xda, 0x1e, 0xa6,
	0x71, 0x84, 0xdb, 0x3d, 0xde, 0x8c, 0x65, 0x1e, 0xc7, 0x99, 0x46, 0x06, 0x47, 0x1b, 0xcc, 0x8c,
	0x36, 0x53, 0xda, 0xe6, 0x02, 0x8b, 0xc9, 0x5a, 0xed, 0x8e, 0x0b, 0x54, 0x1f, 0xca, 0xa4, 0x8b,
	0x22, 0x27, 0x26, 0xd1, 0x98, 0x83, 0x02, 0x77, 0x70, 0x36, 0xd3, 0xc1, 0x6e, 0x62, 0x92, 0xe1,
	0x64, 0x9d, 0x64, 0x09, 0x59, 0x16, 0x3d, 0x8a, 0xc6, 0x9d, 0xc0, 0x11, 0x59, 0x5c, 0x63, 0xea,
	0x59, 0x59, 0xf4, 0xc6, 0x05, 0xfa, 0x03, 0x05, 0x56, 0x0f, 0x25, 0xad, 0x96, 0x21, 0x7f, 0x0f,
	0x61, 0xff, 0x76, 0xcc, 0xa9, 0xbd, 0x62, 0xc9, 0x95, 0x7a, 0x1d, 0x16, 0x18, 0x61, 0x38, 0x9f,
	0x8b, 0xdb, 0x6b, 0x87, 0x5a, 0x79, 0x31, 0xec, 0x9b, 0xf5, 0xa7, 0x8f, 0xeb, 0x1f, 0x4e, 0x55,
	0xdb, 0xab, 0xfd, 0x2e, 0xb2, 0x38, 0xa0, 0x7e, 0x05, 0x36, 0x32, 0xc5, 0xa6, 0x43, 0xb1, 0x7b,
	0x61, 0x36, 0x48, 0xfd, 0x7b, 0x05, 0xde, 0xc9, 0x94, 0x5c, 0xe7, 0x59, 0x20, 0x4f, 0xbd, 0x02,
	0x4b, 0x22, 0x23, 0x5a, 0x51, 0xf8, 0x39, 0x3a, 0x37, 0x91, 0x0d, 0x69, 0x0c, 0x61, 0x2f, 0x8b,
	0x99, 0x20, 0xcc, 0x1a, 0xdd, 0x35, 0x28, 0x67, 0xe3, 0xaa, 0xef, 0xc1, 0x12, 0xa3, 0x99, 0x2d,
	0x6f, 0x94, 0x15, 0x13, 0x86, 0x03, 0x2d, 0xcf, 0x94, 0x5b, 0x4d, 0x2b, 0xcf, 0x44, 0x2d, 0x2f,
	0xd5, 0x9a, 0x5c, 0xba, 0x35, 0xfa, 0x97, 0x50, 0xcb, 0xf4, 0x77, 0xc9, 0x77, 0x3a, 0x38, 0x76,
	0x22, 0xec, 0x84, 0xb3, 0x46, 0xfa, 0x9d, 0x02, 0xeb, 0x99, 0x7c, 0x9d, 0xc8, 0x8f, 0x9b, 0x53,
	0xf0, 0x63, 0xeb, 0xe9, 0xe3, 0x7a, 0x7d, 0xea, 0xa3, 0x91, 0xe2, 0xc8, 0x3e, 0x54, 0x27, 0xaa,
	0x08, 0x9e, 0xcc, 0x0e, 0xad, 0xff, 0xa4, 0xc0, 0xbb, 0x13, 0xa5, 0x23, 0xbe, 0xec, 0x8e, 0xf3,
	0xc5, 0x38, 0xf2, 0x70, 0xbf, 0x99, 0x33, 0xc7, 0x88, 0x14, 0xc1, 0xc6, 0x64, 0x7c, 0xd5, 0x80,
	0x62, 0x72, 0x7b, 0xbc, 0xe2, 0x4f, 0x69, 0x38, 0xd0, 0x20, 0x31, 0x6a, 0x35, 0x2d, 0x48, 0x54,
	0x8e, 0xe0, 0xd1, 0x57, 0xf0, 0xfe, 0xc4, 0x18, 0xd2, 0x5c, 0x3a, 0x46, 0x06, 0xec, 0xae, 0x39,
	0x74, 0x35, 0xbd, 0x9d, 0xbb, 0xe6, 0x90, 0x9b, 0xd7, 0xef, 0x9a, 0x4c, 0xf1, 0x1b, 0xee, 0x9a,
	0x4c, 0x1b, 0xfd, 0x6f, 0x05, 0x56, 0x2f, 0x63, 0x1a, 0x93, 0x08, 0xbb, 0x4e, 0x47, 0x8e, 0x06,
	0xea, 0xb7, 0x0a, 0x54, 0xdc, 0x5e, 0xd0, 0xeb, 0x38, 0x31, 0x3e, 0x40, 0xb6, 0x40, 0xb1, 0x23,
	0x27, 0xc6, 0x24, 0x61, 0xd0, 0xff, 0x33, 0x19, 0xd4, 0x44, 0x2e, 0x3b, 0x8b, 0xe6, 0x79, 0x46,
	0x97, 0x97, 0x03, 0x4d, 0xeb, 0x3b, 0x41, 0xe7, 0x82, 0x3e, 0x09, 0x4b, 0x7f, 0xf4, 0x5c, 0x5b,
	0x96, 0x36, 0xd4, 0x2a, 0xbf, 0x52, 0x13, 0x81, 0x58, 0x5c, 0x49, 0xdd, 0x81, 0x93, 0x11, 0xba,
	0x85, 0x22, 0x14, 0xba, 0xc8, 0x76, 0xd9, 0x27, 0x5e, 0xf4, 0xdc, 0xdc, 0x78, 0x39, 0xd0, 0xca,
	0xc2, 0xc3, 0x98, 0x82, 0x6e, 0x95, 0x46, 0x3b, 0x3b, 0x7c, 0xe3, 0x81, 0x02, 0xa5, 0x9d, 0x5e,
	0x14, 0xa1, 0x30, 0x4e, 0xb2, 0xbc, 0x01, 0x4b, 0x32, 0xf4, 0xa9, 0x72, 0xd2, 0x65, 0x4e, 0xa5,
	0xc4, 0x23, 0xd7, 0x78, 0x3d, 0x85, 0x04, 0x90, 0xb1, 0xa2, 0x8b, 0x22, 0x4c, 0x3c, 0x1e, 0xea,
	0x82, 0x25, 0x57, 0x7a, 0x17, 0xd4, 0xdd, 0x5e, 0x4c, 0x63, 0x27, 0xf4, 0xd8, 0xe7, 0xfe, 0xed,
	0x47, 0xa2, 0x87, 0xb0, 0x7e, 0xd1, 0x95, 0x95, 0x45, 0xde, 0x0e, 0x09, 0x02, 0x4c, 0x29, 0x23,
	0xee, 0x35, 0x28, 0xba, 0xa3, 0xd5, 0x74, 0x8e, 0xd7, 0xe5, 0x4c, 0x36, 0x72, 0xf3, 0xf3, 0x3f,
	0xbf, 0x9c, 0x55, 0xac, 0x34, 0x8e, 0xfe, 0x43, 0x0e, 0xd6, 0x9b, 0xa8, 0x83, 0x7c, 0x76, 0x88,
	0xf6, 0xd9, 0x24, 0x85, 0x43, 0xbf, 0x15, 0xde, 0x22, 0xac, 0x8f, 0xdd, 0x08, 0x1d, 0x60, 0xd2,
	0xa3, 0xb6, 0x2c, 0x8e, 0x98, 0x3c, 0x53, 0x7d, 0x1c, 0x53, 0xd0, 0xad, 0x52, 0xb2, 0xb3, 0xc7,
	0x37, 0xd4, 0x6f, 0x20, 0xcf, 0x86, 0x5b, 0x44, 0x2b, 0x39, 0x19, 0x70, 0xd6, 0x04, 0xd9, 0x44,
	0x2e, 0x1f, 0x22, 0x9b, 0xb2, 0x52, 0x2b, 0x02, 0x5d, 0x58, 0xb2, 0x42, 0x9d, 0x9b, 0x62, 0xaa,
	0x94, 0x20, 0xd4, 0x92, 0x1e, 0xd5, 0x4b, 0x90, 0xbf, 0x2d, 0x8e, 0xfa, 0x3c, 0x8f, 0xbb, 0xfe,
	0xef, 0x40, 0x3b, 0xe9, 0x46, 0x88, 0xd1, 0x34, 0xb4, 0x85, 0xe8, 0x55, 0x2a, 0x63, 0x02, 0xdd,
	0x92, 0xc6, 0xfa, 0xfd, 0x1c, 0x9c, 0x96, 0x15, 0xc2, 0x24, 0x1c, 0xd5, 0x4a, 0x90, 0x41, 0xfd,
	0x02, 0x4e, 0x7a, 0x23, 0xa1, 0xcd, 0xaf, 0x10, 0x56, 0xa5, 0xd2, 0xf6, 0x07, 0xe9, 0xd6, 0xc8,
	0x01, 0x5f, 0x34, 0x27, 0xd1, 0xe6, 0x97, 0x44, 0xc9, 0x7b, 0x6d, 0xad, 0x5e, 0x86, 0xb5, 0x34,
	0x9e, 0x13, 0xf9, 0x28, 0x66, 0x57, 0xac, 0x38, 0x42, 0xe5, 0xe1, 0x40, 0x53, 0x53, 0x08, 0x5c,
	0xdc, 0x6a, 0x5a, 0xaa, 0x37, 0xbe, 0xc7, 0xa6, 0x8e, 0xbc, 0xe0, 0x44, 0x65, 0xfe, 0xf8, 0x5c,
	0x91, 0x10, 0xfa, 0x8f, 0x0a, 0x2c, 0xf0, 0x21, 0xf7, 0x0c, 0x2c, 0x7a, 0x28, 0x24, 0x01, 0xcf,
	0xb2, 0x60, 0x9e, 0x7a, 0x39, 0xd0, 0x4e, 0x88, 0x02, 0xf2, 0x6d, 0xdd, 0x12, 0x62, 0xf5, 0x2e,
	0x2c, 0xb2, 0xe7, 0x53, 0xd2, 0xf7, 0x23, 0x5e, 0x0e, 0x9f, 0xc9, 0xa6, 0x4b, 0x18, 0x6e, 0xa5,
	0xcf, 0xf4, 0x92, 0x10, 0x9e, 0xf4, 0x5f, 0x15, 0x58, 0x92, 0xd1, 0x4f, 0x1d, 0xe6, 0x7d, 0x05,
	0x0a, 0x1e, 0x72, 0xed, 0x74, 0xac, 0x47, 0x73, 0xf4, 0x73, 0x19, 0xee, 0xa9, 0x04, 0x4e, 0x1a,
	0xcf, 0x4c, 0xd3, 0x65, 0x4f, 0xfe, 0x32, 0x77, 0x9f, 0xfc, 0x55, 0x9d, 0x7b, 0x32, 0xac, 0x2a,
	0xcf, 0x86, 0x55, 0xe5, 0xcf, 0x61, 0x55, 0x79, 0xf8, 0xa2, 0x3a, 0xf7, 0xec, 0x45, 0x75, 0xee,
	0x8f, 0x17, 0xd5, 0xb9, 0x1b, 0x5b, 0x29, 0xd0, 0xa4, 0x83, 0xf5, 0x8e, 0xd3, 0xa6, 0xa3, 0x95,
	0xf1, 0xf5, 0xe8, 0x69, 0xcc, 0x7d, 0xb4, 0xf3, 0xfc, 0xb3, 0x75, 0xfe, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x8e, 0xa2, 0xb0, 0x75, 0x3b, 0x0f, 0x00, 0x00,
}

func (m *RewardsPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UsersDistribution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.OperatorsDistribution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.PoolsDistribution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.RewardsPool) > 0 {
		i -= len(m.RewardsPool)
		copy(dAtA[i:], m.RewardsPool)
		i = encodeVarintModels(dAtA, i, uint64(len(m.RewardsPool)))
		i--
		dAtA[i] = 0x3a
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintModels(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x32
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintModels(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x2a
	if len(m.AmountPerDay) > 0 {
		for iNdEx := len(m.AmountPerDay) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AmountPerDay[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ServiceID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolsDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolsDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolsDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModels(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Weight != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolsDistributionTypeBasic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolsDistributionTypeBasic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolsDistributionTypeBasic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *PoolsDistributionTypeWeighted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolsDistributionTypeWeighted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolsDistributionTypeWeighted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Weights) > 0 {
		for iNdEx := len(m.Weights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Weights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PoolDistributionWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolDistributionWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolDistributionWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolsDistributionTypeEgalitarian) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolsDistributionTypeEgalitarian) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolsDistributionTypeEgalitarian) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OperatorsDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorsDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorsDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModels(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Weight != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperatorsDistributionTypeBasic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorsDistributionTypeBasic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorsDistributionTypeBasic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *OperatorsDistributionTypeWeighted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorsDistributionTypeWeighted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorsDistributionTypeWeighted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Weights) > 0 {
		for iNdEx := len(m.Weights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Weights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OperatorDistributionWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorDistributionWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorDistributionWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if m.OperatorID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.OperatorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperatorsDistributionTypeEgalitarian) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorsDistributionTypeEgalitarian) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorsDistributionTypeEgalitarian) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UsersDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsersDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsersDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModels(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Weight != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UsersDistributionTypeBasic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsersDistributionTypeBasic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsersDistributionTypeBasic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HistoricalRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReferenceCount != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.ReferenceCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CumulativeRewardRatios) > 0 {
		for iNdEx := len(m.CumulativeRewardRatios) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CumulativeRewardRatios[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CurrentRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OutstandingRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutstandingRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutstandingRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccumulatedCommission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccumulatedCommission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccumulatedCommission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commissions) > 0 {
		for iNdEx := len(m.Commissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorStartingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorStartingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorStartingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Stakes) > 0 {
		for iNdEx := len(m.Stakes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PreviousPeriod != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.PreviousPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegationDelegatorReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationDelegatorReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationDelegatorReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DelegationTargetID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.DelegationTargetID))
		i--
		dAtA[i] = 0x10
	}
	if m.DelegationType != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.DelegationType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DecPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DecCoins) > 0 {
		for iNdEx := len(m.DecCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DecCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardsPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModels(uint64(m.ID))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.ServiceID != 0 {
		n += 1 + sovModels(uint64(m.ServiceID))
	}
	if len(m.AmountPerDay) > 0 {
		for _, e := range m.AmountPerDay {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovModels(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovModels(uint64(l))
	l = len(m.RewardsPool)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = m.PoolsDistribution.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.OperatorsDistribution.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.UsersDistribution.Size()
	n += 1 + l + sovModels(uint64(l))
	return n
}

func (m *PoolsDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Weight != 0 {
		n += 1 + sovModels(uint64(m.Weight))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *PoolsDistributionTypeBasic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *PoolsDistributionTypeWeighted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Weights) > 0 {
		for _, e := range m.Weights {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *PoolDistributionWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovModels(uint64(m.PoolID))
	}
	if m.Weight != 0 {
		n += 1 + sovModels(uint64(m.Weight))
	}
	return n
}

func (m *PoolsDistributionTypeEgalitarian) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OperatorsDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Weight != 0 {
		n += 1 + sovModels(uint64(m.Weight))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *OperatorsDistributionTypeBasic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *OperatorsDistributionTypeWeighted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Weights) > 0 {
		for _, e := range m.Weights {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *OperatorDistributionWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorID != 0 {
		n += 1 + sovModels(uint64(m.OperatorID))
	}
	if m.Weight != 0 {
		n += 1 + sovModels(uint64(m.Weight))
	}
	return n
}

func (m *OperatorsDistributionTypeEgalitarian) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UsersDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Weight != 0 {
		n += 1 + sovModels(uint64(m.Weight))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *UsersDistributionTypeBasic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HistoricalRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CumulativeRewardRatios) > 0 {
		for _, e := range m.CumulativeRewardRatios {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.ReferenceCount != 0 {
		n += 1 + sovModels(uint64(m.ReferenceCount))
	}
	return n
}

func (m *CurrentRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.Period != 0 {
		n += 1 + sovModels(uint64(m.Period))
	}
	return n
}

func (m *OutstandingRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *AccumulatedCommission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Commissions) > 0 {
		for _, e := range m.Commissions {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *DelegatorStartingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreviousPeriod != 0 {
		n += 1 + sovModels(uint64(m.PreviousPeriod))
	}
	if len(m.Stakes) > 0 {
		for _, e := range m.Stakes {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovModels(uint64(m.Height))
	}
	return n
}

func (m *DelegationDelegatorReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegationType != 0 {
		n += 1 + sovModels(uint64(m.DelegationType))
	}
	if m.DelegationTargetID != 0 {
		n += 1 + sovModels(uint64(m.DelegationTargetID))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *DecPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.DecCoins) > 0 {
		for _, e := range m.DecCoins {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func sovModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardsPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountPerDay = append(m.AmountPerDay, types.Coin{})
			if err := m.AmountPerDay[len(m.AmountPerDay)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsPool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolsDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolsDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorsDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorsDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsersDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolsDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolsDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolsDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &types1.Any{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolsDistributionTypeBasic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolsDistributionTypeBasic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolsDistributionTypeBasic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolsDistributionTypeWeighted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolsDistributionTypeWeighted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolsDistributionTypeWeighted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weights = append(m.Weights, PoolDistributionWeight{})
			if err := m.Weights[len(m.Weights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolDistributionWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolDistributionWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolDistributionWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolsDistributionTypeEgalitarian) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolsDistributionTypeEgalitarian: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolsDistributionTypeEgalitarian: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorsDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorsDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorsDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &types1.Any{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorsDistributionTypeBasic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorsDistributionTypeBasic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorsDistributionTypeBasic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorsDistributionTypeWeighted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorsDistributionTypeWeighted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorsDistributionTypeWeighted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weights = append(m.Weights, OperatorDistributionWeight{})
			if err := m.Weights[len(m.Weights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorDistributionWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorDistributionWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorDistributionWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorID", wireType)
			}
			m.OperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorsDistributionTypeEgalitarian) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorsDistributionTypeEgalitarian: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorsDistributionTypeEgalitarian: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsersDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsersDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsersDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &types1.Any{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsersDistributionTypeBasic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsersDistributionTypeBasic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsersDistributionTypeBasic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoricalRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeRewardRatios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumulativeRewardRatios = append(m.CumulativeRewardRatios, DecPool{})
			if err := m.CumulativeRewardRatios[len(m.CumulativeRewardRatios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceCount", wireType)
			}
			m.ReferenceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReferenceCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, DecPool{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutstandingRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutstandingRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutstandingRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, DecPool{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccumulatedCommission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccumulatedCommission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccumulatedCommission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commissions = append(m.Commissions, DecPool{})
			if err := m.Commissions[len(m.Commissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorStartingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorStartingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorStartingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousPeriod", wireType)
			}
			m.PreviousPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakes = append(m.Stakes, types.DecCoin{})
			if err := m.Stakes[len(m.Stakes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationDelegatorReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationDelegatorReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationDelegatorReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationType", wireType)
			}
			m.DelegationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationType |= types2.DelegationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationTargetID", wireType)
			}
			m.DelegationTargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationTargetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, DecPool{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecCoins = append(m.DecCoins, types.DecCoin{})
			if err := m.DecCoins[len(m.DecCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModels = fmt.Errorf("proto: unexpected end of group")
)
