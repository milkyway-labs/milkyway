// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/rewards/v1/models.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types2 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types1 "github.com/milkyway-labs/milkyway/x/restaking/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RewardsPlan represents a rewards allocation plan.
type RewardsPlan struct {
	// ID is the unique identifier of the plan.
	ID uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Description is the description of the plan.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// ServiceID is the service ID which the plan is related to.
	ServiceID uint32 `protobuf:"varint,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// AmountPerDay is the amount of rewards to be distributed, per day.
	// The rewards amount for every block will be calculated based on this.
	AmountPerDay github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount_per_day,json=amountPerDay,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount_per_day"`
	// StartTime is the starting time of the plan.
	StartTime time.Time `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// EndTime is the ending time of the plan.
	EndTime time.Time `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	// RewardsPool is the address where rewards to be distributed are stored.
	// If the rewards pool doesn't have enough funds to be distributed, then
	// the rewards allocation for this plan will be skipped.
	RewardsPool string `protobuf:"bytes,7,opt,name=rewards_pool,json=rewardsPool,proto3" json:"rewards_pool,omitempty"`
	// PoolsDistribution is the rewards distribution parameters for pools.
	PoolsDistribution Distribution `protobuf:"bytes,8,opt,name=pools_distribution,json=poolsDistribution,proto3" json:"pools_distribution"`
	// OperatorsDistribution is the rewards distribution parameters for operators.
	OperatorsDistribution Distribution `protobuf:"bytes,9,opt,name=operators_distribution,json=operatorsDistribution,proto3" json:"operators_distribution"`
	// UsersDistribution is the rewards distribution parameters for users.
	UsersDistribution UsersDistribution `protobuf:"bytes,10,opt,name=users_distribution,json=usersDistribution,proto3" json:"users_distribution"`
}

func (m *RewardsPlan) Reset()         { *m = RewardsPlan{} }
func (m *RewardsPlan) String() string { return proto.CompactTextString(m) }
func (*RewardsPlan) ProtoMessage()    {}
func (*RewardsPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{0}
}
func (m *RewardsPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsPlan.Merge(m, src)
}
func (m *RewardsPlan) XXX_Size() int {
	return m.Size()
}
func (m *RewardsPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsPlan.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsPlan proto.InternalMessageInfo

// Distribution represents distribution parameters for restaking
// pools/operators.
type Distribution struct {
	// DelegationType is the type of delegation target which this distribution
	// parameters are for. It can be one of DELEGATION_TYPE_POOL and
	// DELEGATION_TYPE_OPERATOR.
	DelegationType types1.DelegationType `protobuf:"varint,1,opt,name=delegation_type,json=delegationType,proto3,enum=milkyway.restaking.v1.DelegationType" json:"delegation_type,omitempty"`
	// Weight is the rewards distribution weight among other types of delegation
	// targets.
	Weight uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
	// Type is one of basic/weighted/egalitarian distributions.
	Type *types2.Any `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *Distribution) Reset()         { *m = Distribution{} }
func (m *Distribution) String() string { return proto.CompactTextString(m) }
func (*Distribution) ProtoMessage()    {}
func (*Distribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{1}
}
func (m *Distribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Distribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Distribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Distribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Distribution.Merge(m, src)
}
func (m *Distribution) XXX_Size() int {
	return m.Size()
}
func (m *Distribution) XXX_DiscardUnknown() {
	xxx_messageInfo_Distribution.DiscardUnknown(m)
}

var xxx_messageInfo_Distribution proto.InternalMessageInfo

// DistributionTypeBasic represents the simplest form of distribution.
// Rewards are allocated to entities based on their delegation values.
// For example, if there are three operators with delegation values of
// $1000, $1500, and $2000, their rewards will be distributed in a
// 2:3:4 ratio.
type DistributionTypeBasic struct {
}

func (m *DistributionTypeBasic) Reset()         { *m = DistributionTypeBasic{} }
func (m *DistributionTypeBasic) String() string { return proto.CompactTextString(m) }
func (*DistributionTypeBasic) ProtoMessage()    {}
func (*DistributionTypeBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{2}
}
func (m *DistributionTypeBasic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionTypeBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionTypeBasic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionTypeBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionTypeBasic.Merge(m, src)
}
func (m *DistributionTypeBasic) XXX_Size() int {
	return m.Size()
}
func (m *DistributionTypeBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionTypeBasic.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionTypeBasic proto.InternalMessageInfo

// DistributionTypeWeighted is a type of distribution where the reward
// weights for each entity are explicitly defined. Only the specified
// delegation targets will receive rewards.
type DistributionTypeWeighted struct {
	Weights []DistributionWeight `protobuf:"bytes,1,rep,name=weights,proto3" json:"weights"`
}

func (m *DistributionTypeWeighted) Reset()         { *m = DistributionTypeWeighted{} }
func (m *DistributionTypeWeighted) String() string { return proto.CompactTextString(m) }
func (*DistributionTypeWeighted) ProtoMessage()    {}
func (*DistributionTypeWeighted) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{3}
}
func (m *DistributionTypeWeighted) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionTypeWeighted) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionTypeWeighted.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionTypeWeighted) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionTypeWeighted.Merge(m, src)
}
func (m *DistributionTypeWeighted) XXX_Size() int {
	return m.Size()
}
func (m *DistributionTypeWeighted) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionTypeWeighted.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionTypeWeighted proto.InternalMessageInfo

// DistributionWeight defines a delegation target and its assigned weight.
type DistributionWeight struct {
	DelegationTargetID uint32 `protobuf:"varint,1,opt,name=delegation_target_id,json=delegationTargetId,proto3" json:"delegation_target_id,omitempty"`
	Weight             uint32 `protobuf:"varint,2,opt,name=weight,proto3" json:"weight,omitempty"`
}

func (m *DistributionWeight) Reset()         { *m = DistributionWeight{} }
func (m *DistributionWeight) String() string { return proto.CompactTextString(m) }
func (*DistributionWeight) ProtoMessage()    {}
func (*DistributionWeight) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{4}
}
func (m *DistributionWeight) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionWeight) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionWeight.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionWeight) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionWeight.Merge(m, src)
}
func (m *DistributionWeight) XXX_Size() int {
	return m.Size()
}
func (m *DistributionWeight) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionWeight.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionWeight proto.InternalMessageInfo

// DistributionTypeEgalitarian is a distribution method where all entities
// receive an equal share of rewards(a.k.a. egalitarian method).
type DistributionTypeEgalitarian struct {
}

func (m *DistributionTypeEgalitarian) Reset()         { *m = DistributionTypeEgalitarian{} }
func (m *DistributionTypeEgalitarian) String() string { return proto.CompactTextString(m) }
func (*DistributionTypeEgalitarian) ProtoMessage()    {}
func (*DistributionTypeEgalitarian) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{5}
}
func (m *DistributionTypeEgalitarian) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DistributionTypeEgalitarian) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DistributionTypeEgalitarian.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DistributionTypeEgalitarian) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DistributionTypeEgalitarian.Merge(m, src)
}
func (m *DistributionTypeEgalitarian) XXX_Size() int {
	return m.Size()
}
func (m *DistributionTypeEgalitarian) XXX_DiscardUnknown() {
	xxx_messageInfo_DistributionTypeEgalitarian.DiscardUnknown(m)
}

var xxx_messageInfo_DistributionTypeEgalitarian proto.InternalMessageInfo

// Distribution represents distribution parameters for delegators who directly
// staked their tokens to the service.
type UsersDistribution struct {
	// Weight is the rewards distribution weight among other types of delegation
	// targets.
	Weight uint32 `protobuf:"varint,1,opt,name=weight,proto3" json:"weight,omitempty"`
	// Type defines the rewards distribution method. Currently only the basic
	// distribution is allowed.
	Type *types2.Any `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (m *UsersDistribution) Reset()         { *m = UsersDistribution{} }
func (m *UsersDistribution) String() string { return proto.CompactTextString(m) }
func (*UsersDistribution) ProtoMessage()    {}
func (*UsersDistribution) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{6}
}
func (m *UsersDistribution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsersDistribution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsersDistribution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsersDistribution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersDistribution.Merge(m, src)
}
func (m *UsersDistribution) XXX_Size() int {
	return m.Size()
}
func (m *UsersDistribution) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersDistribution.DiscardUnknown(m)
}

var xxx_messageInfo_UsersDistribution proto.InternalMessageInfo

// UsersDistributionTypeBasic represents the simplest form of distribution.
// Rewards are allocated to entities based on their delegation values.
// For example, if there are three users with delegation values of
// $1000, $1500, and $2000, their rewards will be distributed in a
// 2:3:4 ratio.
type UsersDistributionTypeBasic struct {
}

func (m *UsersDistributionTypeBasic) Reset()         { *m = UsersDistributionTypeBasic{} }
func (m *UsersDistributionTypeBasic) String() string { return proto.CompactTextString(m) }
func (*UsersDistributionTypeBasic) ProtoMessage()    {}
func (*UsersDistributionTypeBasic) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{7}
}
func (m *UsersDistributionTypeBasic) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UsersDistributionTypeBasic) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UsersDistributionTypeBasic.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UsersDistributionTypeBasic) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UsersDistributionTypeBasic.Merge(m, src)
}
func (m *UsersDistributionTypeBasic) XXX_Size() int {
	return m.Size()
}
func (m *UsersDistributionTypeBasic) XXX_DiscardUnknown() {
	xxx_messageInfo_UsersDistributionTypeBasic.DiscardUnknown(m)
}

var xxx_messageInfo_UsersDistributionTypeBasic proto.InternalMessageInfo

// HistoricalRewards represents historical rewards for a delegation target.
// Height is implicit within the store key.
// Cumulative reward ratio is the sum from the zeroeth period
// until this period of rewards / tokens, per the spec.
// The reference count indicates the number of objects
// which might need to reference this historical entry at any point.
// ReferenceCount =
//
//	  number of outstanding delegations which ended the associated period (and
//	  might need to read that record)
//	+ number of slashes which ended the associated period (and might need to
//	read that record)
//	+ one per validator for the zeroeth period, set on initialization
type HistoricalRewards struct {
	CumulativeRewardRatios ServicePools `protobuf:"bytes,1,rep,name=cumulative_reward_ratios,json=cumulativeRewardRatios,proto3,castrepeated=ServicePools" json:"cumulative_reward_ratios" yaml:"cumulative_reward_ratios"`
	ReferenceCount         uint32       `protobuf:"varint,2,opt,name=reference_count,json=referenceCount,proto3" json:"reference_count,omitempty" yaml:"reference_count"`
}

func (m *HistoricalRewards) Reset()         { *m = HistoricalRewards{} }
func (m *HistoricalRewards) String() string { return proto.CompactTextString(m) }
func (*HistoricalRewards) ProtoMessage()    {}
func (*HistoricalRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{8}
}
func (m *HistoricalRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalRewards.Merge(m, src)
}
func (m *HistoricalRewards) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalRewards.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalRewards proto.InternalMessageInfo

// CurrentRewards represents current rewards and current
// period for a delegation target kept as a running counter and incremented
// each block as long as the delegation target's tokens remain constant.
type CurrentRewards struct {
	Rewards ServicePools `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=ServicePools" json:"rewards" yaml:"rewards"`
	Period  uint64       `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
}

func (m *CurrentRewards) Reset()         { *m = CurrentRewards{} }
func (m *CurrentRewards) String() string { return proto.CompactTextString(m) }
func (*CurrentRewards) ProtoMessage()    {}
func (*CurrentRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{9}
}
func (m *CurrentRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentRewards.Merge(m, src)
}
func (m *CurrentRewards) XXX_Size() int {
	return m.Size()
}
func (m *CurrentRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentRewards.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentRewards proto.InternalMessageInfo

// OutstandingRewards represents outstanding (un-withdrawn) rewards
// for a delegation target inexpensive to track, allows simple sanity checks.
type OutstandingRewards struct {
	Rewards DecPools `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=DecPools" json:"rewards" yaml:"rewards"`
}

func (m *OutstandingRewards) Reset()         { *m = OutstandingRewards{} }
func (m *OutstandingRewards) String() string { return proto.CompactTextString(m) }
func (*OutstandingRewards) ProtoMessage()    {}
func (*OutstandingRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{10}
}
func (m *OutstandingRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutstandingRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutstandingRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutstandingRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutstandingRewards.Merge(m, src)
}
func (m *OutstandingRewards) XXX_Size() int {
	return m.Size()
}
func (m *OutstandingRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_OutstandingRewards.DiscardUnknown(m)
}

var xxx_messageInfo_OutstandingRewards proto.InternalMessageInfo

// AccumulatedCommission represents accumulated commission
// for a delegation target kept as a running counter, can be withdrawn at any
// time.
type AccumulatedCommission struct {
	Commissions DecPools `protobuf:"bytes,1,rep,name=commissions,proto3,castrepeated=DecPools" json:"commissions"`
}

func (m *AccumulatedCommission) Reset()         { *m = AccumulatedCommission{} }
func (m *AccumulatedCommission) String() string { return proto.CompactTextString(m) }
func (*AccumulatedCommission) ProtoMessage()    {}
func (*AccumulatedCommission) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{11}
}
func (m *AccumulatedCommission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccumulatedCommission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccumulatedCommission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccumulatedCommission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccumulatedCommission.Merge(m, src)
}
func (m *AccumulatedCommission) XXX_Size() int {
	return m.Size()
}
func (m *AccumulatedCommission) XXX_DiscardUnknown() {
	xxx_messageInfo_AccumulatedCommission.DiscardUnknown(m)
}

var xxx_messageInfo_AccumulatedCommission proto.InternalMessageInfo

// DelegatorStartingInfo represents the starting info for a delegator reward
// period. It tracks the previous delegation target period, the delegation's
// amount of staking token, and the creation height (to check later on if any
// slashes have occurred). NOTE: Even though validators are slashed to whole
// staking tokens, the delegators within the validator may be left with less
// than a full token, thus sdk.Dec is used.
type DelegatorStartingInfo struct {
	PreviousPeriod uint64                                      `protobuf:"varint,1,opt,name=previous_period,json=previousPeriod,proto3" json:"previous_period,omitempty" yaml:"previous_period"`
	Stakes         github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=stakes,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"stakes" yaml:"stakes"`
	Height         uint64                                      `protobuf:"varint,3,opt,name=height,proto3" json:"creation_height" yaml:"creation_height"`
}

func (m *DelegatorStartingInfo) Reset()         { *m = DelegatorStartingInfo{} }
func (m *DelegatorStartingInfo) String() string { return proto.CompactTextString(m) }
func (*DelegatorStartingInfo) ProtoMessage()    {}
func (*DelegatorStartingInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{12}
}
func (m *DelegatorStartingInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorStartingInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorStartingInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorStartingInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorStartingInfo.Merge(m, src)
}
func (m *DelegatorStartingInfo) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorStartingInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorStartingInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorStartingInfo proto.InternalMessageInfo

// DelegationDelegatorReward represents the properties of a delegator's
// delegation reward. The delegator address implicit in the within the
// query request.
type DelegationDelegatorReward struct {
	DelegationType     types1.DelegationType `protobuf:"varint,1,opt,name=delegation_type,json=delegationType,proto3,enum=milkyway.restaking.v1.DelegationType" json:"delegation_type,omitempty"`
	DelegationTargetID uint32                `protobuf:"varint,2,opt,name=delegation_target_id,json=delegationTargetId,proto3" json:"delegation_target_id,omitempty"`
	Reward             DecPools              `protobuf:"bytes,3,rep,name=reward,proto3,castrepeated=DecPools" json:"reward"`
}

func (m *DelegationDelegatorReward) Reset()         { *m = DelegationDelegatorReward{} }
func (m *DelegationDelegatorReward) String() string { return proto.CompactTextString(m) }
func (*DelegationDelegatorReward) ProtoMessage()    {}
func (*DelegationDelegatorReward) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{13}
}
func (m *DelegationDelegatorReward) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationDelegatorReward) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationDelegatorReward.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationDelegatorReward) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationDelegatorReward.Merge(m, src)
}
func (m *DelegationDelegatorReward) XXX_Size() int {
	return m.Size()
}
func (m *DelegationDelegatorReward) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationDelegatorReward.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationDelegatorReward proto.InternalMessageInfo

// Pool is a Coins wrapper with denom which represents the rewards pool for the
// given denom. It is used to represent the rewards associated with the denom.
type Pool struct {
	Denom string                                   `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	Coins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=coins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"coins" yaml:"coins"`
}

func (m *Pool) Reset()         { *m = Pool{} }
func (m *Pool) String() string { return proto.CompactTextString(m) }
func (*Pool) ProtoMessage()    {}
func (*Pool) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{14}
}
func (m *Pool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Pool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Pool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Pool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pool.Merge(m, src)
}
func (m *Pool) XXX_Size() int {
	return m.Size()
}
func (m *Pool) XXX_DiscardUnknown() {
	xxx_messageInfo_Pool.DiscardUnknown(m)
}

var xxx_messageInfo_Pool proto.InternalMessageInfo

// DecPool is a DecCoins wrapper with denom which represents the rewards pool
// for the given denom. It is used to represent the rewards associated with the
// denom.
type DecPool struct {
	Denom    string                                      `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
	DecCoins github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=dec_coins,json=decCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"dec_coins" yaml:"dec_coins"`
}

func (m *DecPool) Reset()         { *m = DecPool{} }
func (m *DecPool) String() string { return proto.CompactTextString(m) }
func (*DecPool) ProtoMessage()    {}
func (*DecPool) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{15}
}
func (m *DecPool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DecPool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DecPool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DecPool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DecPool.Merge(m, src)
}
func (m *DecPool) XXX_Size() int {
	return m.Size()
}
func (m *DecPool) XXX_DiscardUnknown() {
	xxx_messageInfo_DecPool.DiscardUnknown(m)
}

var xxx_messageInfo_DecPool proto.InternalMessageInfo

// ServicePool represents the rewards pool for a service.
type ServicePool struct {
	ServiceID uint32   `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	DecPools  DecPools `protobuf:"bytes,2,rep,name=dec_pools,json=decPools,proto3,castrepeated=DecPools" json:"dec_pools"`
}

func (m *ServicePool) Reset()         { *m = ServicePool{} }
func (m *ServicePool) String() string { return proto.CompactTextString(m) }
func (*ServicePool) ProtoMessage()    {}
func (*ServicePool) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{16}
}
func (m *ServicePool) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServicePool) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServicePool.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServicePool) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServicePool.Merge(m, src)
}
func (m *ServicePool) XXX_Size() int {
	return m.Size()
}
func (m *ServicePool) XXX_DiscardUnknown() {
	xxx_messageInfo_ServicePool.DiscardUnknown(m)
}

var xxx_messageInfo_ServicePool proto.InternalMessageInfo

func init() {
	proto.RegisterType((*RewardsPlan)(nil), "milkyway.rewards.v1.RewardsPlan")
	proto.RegisterType((*Distribution)(nil), "milkyway.rewards.v1.Distribution")
	proto.RegisterType((*DistributionTypeBasic)(nil), "milkyway.rewards.v1.DistributionTypeBasic")
	proto.RegisterType((*DistributionTypeWeighted)(nil), "milkyway.rewards.v1.DistributionTypeWeighted")
	proto.RegisterType((*DistributionWeight)(nil), "milkyway.rewards.v1.DistributionWeight")
	proto.RegisterType((*DistributionTypeEgalitarian)(nil), "milkyway.rewards.v1.DistributionTypeEgalitarian")
	proto.RegisterType((*UsersDistribution)(nil), "milkyway.rewards.v1.UsersDistribution")
	proto.RegisterType((*UsersDistributionTypeBasic)(nil), "milkyway.rewards.v1.UsersDistributionTypeBasic")
	proto.RegisterType((*HistoricalRewards)(nil), "milkyway.rewards.v1.HistoricalRewards")
	proto.RegisterType((*CurrentRewards)(nil), "milkyway.rewards.v1.CurrentRewards")
	proto.RegisterType((*OutstandingRewards)(nil), "milkyway.rewards.v1.OutstandingRewards")
	proto.RegisterType((*AccumulatedCommission)(nil), "milkyway.rewards.v1.AccumulatedCommission")
	proto.RegisterType((*DelegatorStartingInfo)(nil), "milkyway.rewards.v1.DelegatorStartingInfo")
	proto.RegisterType((*DelegationDelegatorReward)(nil), "milkyway.rewards.v1.DelegationDelegatorReward")
	proto.RegisterType((*Pool)(nil), "milkyway.rewards.v1.Pool")
	proto.RegisterType((*DecPool)(nil), "milkyway.rewards.v1.DecPool")
	proto.RegisterType((*ServicePool)(nil), "milkyway.rewards.v1.ServicePool")
}

func init() { proto.RegisterFile("milkyway/rewards/v1/models.proto", fileDescriptor_fcf66d1f3415f5b6) }

var fileDescriptor_fcf66d1f3415f5b6 = []byte{
	// 1294 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0xcf, 0x3a, 0x8e, 0x13, 0x8f, 0x13, 0xb7, 0x19, 0x92, 0xc8, 0x0d, 0xc8, 0x6b, 0x56, 0x50,
	0xcc, 0x1f, 0xdb, 0xa4, 0x1c, 0x90, 0xca, 0x01, 0xb2, 0x71, 0xd5, 0x46, 0x95, 0x68, 0xb4, 0x6d,
	0xa9, 0x54, 0x24, 0x56, 0xe3, 0x9d, 0xa9, 0x3b, 0xea, 0xee, 0x8e, 0x3b, 0xb3, 0x76, 0x31, 0xc7,
	0x9e, 0x10, 0x02, 0xa9, 0x12, 0x1f, 0x00, 0xb8, 0xa1, 0x9e, 0x38, 0x54, 0x7c, 0x04, 0x54, 0xf5,
	0x54, 0x71, 0xe2, 0xe4, 0x42, 0x7a, 0x00, 0x71, 0xe0, 0xd0, 0x4f, 0x80, 0x76, 0x66, 0xd6, 0xd9,
	0x6c, 0x9c, 0x3f, 0x46, 0x5c, 0x92, 0x9d, 0x79, 0xef, 0xfd, 0xde, 0xbf, 0xdf, 0xbe, 0x7d, 0x06,
	0xb5, 0x80, 0xfa, 0x77, 0x86, 0xf7, 0xd0, 0xb0, 0xc5, 0xc9, 0x3d, 0xc4, 0xb1, 0x68, 0x0d, 0x36,
	0x5a, 0x01, 0xc3, 0xc4, 0x17, 0xcd, 0x1e, 0x67, 0x11, 0x83, 0x2f, 0x25, 0x1a, 0x4d, 0xad, 0xd1,
	0x1c, 0x6c, 0xac, 0x2f, 0xa3, 0x80, 0x86, 0xac, 0x25, 0xff, 0x2a, 0xbd, 0xf5, 0x33, 0x1e, 0x13,
	0x01, 0x13, 0xae, 0x3c, 0xb5, 0xd4, 0x41, 0x8b, 0xaa, 0xea, 0xd4, 0xea, 0x20, 0x41, 0x5a, 0x83,
	0x8d, 0x0e, 0x89, 0xd0, 0x46, 0xcb, 0x63, 0x34, 0xd4, 0x72, 0xb3, 0xcb, 0x58, 0xd7, 0x27, 0x2d,
	0x79, 0xea, 0xf4, 0x6f, 0xb5, 0x22, 0x1a, 0x10, 0x11, 0xa1, 0xa0, 0x97, 0x60, 0x67, 0x15, 0x50,
	0x38, 0xd4, 0xa2, 0x95, 0x2e, 0xeb, 0x32, 0xe5, 0x33, 0x7e, 0xd2, 0xb7, 0x56, 0x2a, 0x2d, 0x11,
	0xa1, 0x3b, 0x34, 0xec, 0x66, 0x13, 0xb3, 0x7e, 0x99, 0x03, 0x25, 0x47, 0xa5, 0xb4, 0xe3, 0xa3,
	0x10, 0xae, 0x81, 0x1c, 0xc5, 0x15, 0xa3, 0x66, 0xd4, 0xf3, 0x76, 0x61, 0x77, 0x64, 0xe6, 0xb6,
	0xdb, 0x4e, 0x8e, 0x62, 0x58, 0x03, 0x25, 0x4c, 0x84, 0xc7, 0x69, 0x2f, 0xa2, 0x2c, 0xac, 0xe4,
	0x6a, 0x46, 0xbd, 0xe8, 0xa4, 0xaf, 0xe0, 0x3b, 0x00, 0x08, 0xc2, 0x07, 0xd4, 0x23, 0x2e, 0xc5,
	0x95, 0xd9, 0x9a, 0x51, 0x5f, 0xb2, 0x97, 0x76, 0x47, 0x66, 0xf1, 0xaa, 0xba, 0xdd, 0x6e, 0x3b,
	0x45, 0xad, 0xb0, 0x8d, 0xe1, 0x5d, 0x50, 0x46, 0x01, 0xeb, 0x87, 0x91, 0xdb, 0x23, 0xdc, 0xc5,
	0x68, 0x58, 0xc9, 0xd7, 0x66, 0xeb, 0xa5, 0x73, 0x67, 0x9a, 0xba, 0x68, 0x71, 0x99, 0x9a, 0xba,
	0x4c, 0xcd, 0x2d, 0x46, 0x43, 0xfb, 0xdd, 0xc7, 0x23, 0x73, 0xe6, 0xe1, 0x33, 0xb3, 0xde, 0xa5,
	0xd1, 0xed, 0x7e, 0xa7, 0xe9, 0xb1, 0x40, 0x57, 0x58, 0xff, 0x6b, 0x08, 0x7c, 0xa7, 0x15, 0x0d,
	0x7b, 0x44, 0x48, 0x03, 0xe1, 0x2c, 0x2a, 0x17, 0x3b, 0x84, 0xb7, 0xd1, 0x10, 0x6e, 0x01, 0x20,
	0x22, 0xc4, 0x23, 0x37, 0x2e, 0x6c, 0x65, 0xae, 0x66, 0xd4, 0x4b, 0xe7, 0xd6, 0x9b, 0xaa, 0xa8,
	0xcd, 0xa4, 0xa8, 0xcd, 0x6b, 0x49, 0xd5, 0xed, 0x85, 0xd8, 0xdf, 0x83, 0x67, 0xa6, 0xe1, 0x14,
	0xa5, 0x5d, 0x2c, 0x81, 0x1f, 0x82, 0x05, 0x12, 0x62, 0x05, 0x51, 0x98, 0x02, 0x62, 0x9e, 0x84,
	0x58, 0x02, 0x7c, 0x00, 0x16, 0x35, 0x85, 0xdc, 0x1e, 0x63, 0x7e, 0x65, 0x3e, 0xae, 0xa4, 0x5d,
	0xf9, 0xf5, 0x51, 0x63, 0x45, 0x67, 0xbe, 0x89, 0x31, 0x27, 0x42, 0x5c, 0x8d, 0x38, 0x0d, 0xbb,
	0x4e, 0x49, 0x6b, 0xef, 0x30, 0xe6, 0xc3, 0x4f, 0x00, 0x8c, 0x8d, 0x84, 0x8b, 0xa9, 0x88, 0x38,
	0xed, 0xf4, 0x65, 0x33, 0x16, 0x64, 0x1c, 0xaf, 0x36, 0x27, 0x70, 0xb4, 0xd9, 0x4e, 0x29, 0xda,
	0xf9, 0x38, 0x1c, 0x67, 0x59, 0x42, 0xa4, 0x05, 0xf0, 0x33, 0xb0, 0xc6, 0x7a, 0x84, 0xa3, 0x88,
	0xf1, 0x0c, 0x76, 0x71, 0x3a, 0xec, 0xd5, 0x31, 0xcc, 0x3e, 0xfc, 0x4f, 0x01, 0xec, 0x0b, 0x92,
	0xc5, 0x06, 0x12, 0xfb, 0xec, 0x44, 0xec, 0xeb, 0xb1, 0xfa, 0xa4, 0xe0, 0xfb, 0x59, 0xc1, 0xf9,
	0xfc, 0x5f, 0xdf, 0x9b, 0x86, 0xf5, 0xd4, 0x00, 0x8b, 0xfb, 0x7c, 0x7e, 0x0c, 0x4e, 0x61, 0xe2,
	0x93, 0x2e, 0x8a, 0x4f, 0x6e, 0x4c, 0x0b, 0x49, 0xeb, 0xf2, 0xb9, 0xd7, 0xd3, 0x0e, 0xf5, 0x7b,
	0x21, 0xd3, 0x19, 0x6b, 0x5f, 0x1b, 0xf6, 0x88, 0x53, 0xc6, 0xfb, 0xce, 0x70, 0x0d, 0x14, 0xee,
	0x11, 0xda, 0xbd, 0x1d, 0x49, 0xf2, 0x2f, 0x39, 0xfa, 0x04, 0x1d, 0x90, 0x97, 0xe0, 0xb3, 0x32,
	0x9b, 0x95, 0x03, 0x6c, 0xd8, 0x0c, 0x87, 0x76, 0xfd, 0xc9, 0xa3, 0xc6, 0x6b, 0xc7, 0x95, 0x50,
	0x7a, 0x95, 0x58, 0x3a, 0xa5, 0x4d, 0xb0, 0x9a, 0x95, 0xdb, 0x48, 0x50, 0xef, 0xfc, 0x89, 0xe1,
	0xac, 0x6f, 0x0c, 0x50, 0xc9, 0x5e, 0xde, 0x90, 0x71, 0x13, 0x0c, 0x2f, 0x82, 0x79, 0x95, 0x83,
	0xa8, 0x18, 0xf2, 0xe5, 0x7b, 0xe3, 0xd8, 0x36, 0x2b, 0x5b, 0xdd, 0x8b, 0xc4, 0x7a, 0x8a, 0x78,
	0x06, 0x00, 0x1e, 0x84, 0x83, 0x97, 0xc0, 0x4a, 0xba, 0x55, 0x88, 0x77, 0x49, 0xe4, 0xea, 0x31,
	0xb4, 0x64, 0xaf, 0xed, 0x8e, 0x4c, 0x98, 0x6a, 0x8e, 0x14, 0x6f, 0xb7, 0x1d, 0x88, 0xb3, 0x77,
	0xf8, 0xb0, 0x26, 0x59, 0x17, 0xc1, 0xcb, 0xd9, 0x58, 0x2e, 0x74, 0x91, 0x4f, 0x23, 0xc4, 0x29,
	0x0a, 0xa7, 0x48, 0xe0, 0x2b, 0x03, 0x2c, 0x1f, 0xe0, 0x66, 0xca, 0xad, 0xb1, 0x8f, 0x1b, 0x37,
	0x34, 0x37, 0x72, 0x47, 0x70, 0xa3, 0xf1, 0xe4, 0x51, 0xe3, 0xcd, 0x13, 0xbd, 0x02, 0x07, 0x08,
	0x72, 0x19, 0xac, 0x4f, 0x54, 0x52, 0x2c, 0x99, 0x0e, 0xd8, 0xfa, 0xc7, 0x00, 0xcb, 0x97, 0xa8,
	0x88, 0x18, 0xa7, 0x1e, 0xf2, 0xf5, 0x37, 0x01, 0x7e, 0x6b, 0x80, 0x8a, 0xd7, 0x0f, 0xfa, 0x3e,
	0x8a, 0xe8, 0x80, 0xb8, 0x0a, 0xc5, 0xe5, 0x71, 0xd5, 0x13, 0xd6, 0xd4, 0x26, 0xb2, 0x46, 0x4f,
	0xfd, 0x78, 0x6c, 0xd9, 0xef, 0xc7, 0x74, 0x79, 0x31, 0x32, 0xcd, 0x21, 0x0a, 0xfc, 0xf3, 0xd6,
	0x61, 0x78, 0xd6, 0xc3, 0x67, 0xe6, 0x62, 0xca, 0x4e, 0x38, 0x6b, 0x7b, 0xaa, 0x2a, 0x20, 0x47,
	0x2a, 0xc2, 0x2d, 0x70, 0x8a, 0x93, 0x5b, 0x84, 0x93, 0xd0, 0x23, 0xae, 0x17, 0xcf, 0x78, 0xd5,
	0x6f, 0x7b, 0xfd, 0xc5, 0xc8, 0x5c, 0x53, 0x5e, 0x32, 0x0a, 0x96, 0x53, 0x1e, 0xdf, 0x6c, 0xc9,
	0x8b, 0xaf, 0x0d, 0x50, 0xde, 0xea, 0x73, 0x4e, 0xc2, 0x28, 0xc9, 0xb6, 0x03, 0xe6, 0x75, 0x0a,
	0x27, 0xce, 0xed, 0xac, 0xce, 0xad, 0x9c, 0x78, 0x95, 0x5a, 0x07, 0x53, 0x49, 0x80, 0x63, 0xae,
	0xf4, 0x08, 0xa7, 0x0c, 0xcb, 0x90, 0xf3, 0x8e, 0x3e, 0x59, 0x3d, 0x00, 0xaf, 0xf4, 0x23, 0x11,
	0xa1, 0x10, 0xc7, 0x73, 0x5f, 0x6b, 0xdf, 0xcc, 0x46, 0xf4, 0xca, 0xe4, 0x77, 0x94, 0x78, 0x32,
	0x1a, 0xeb, 0xd0, 0x68, 0x16, 0xb4, 0xca, 0x5e, 0x24, 0x56, 0x08, 0x56, 0x37, 0x3d, 0x5d, 0x61,
	0x82, 0xb7, 0x58, 0x10, 0x50, 0x21, 0x62, 0x3a, 0x5f, 0x07, 0x25, 0x6f, 0x7c, 0x3a, 0x99, 0xe3,
	0x55, 0xfd, 0x71, 0x1e, 0xbb, 0xf9, 0xf1, 0xcf, 0x9f, 0xde, 0x32, 0x9c, 0x34, 0x8e, 0xf5, 0x5d,
	0x0e, 0xac, 0xea, 0xf7, 0x98, 0xf1, 0xab, 0xf1, 0x27, 0x95, 0x86, 0xdd, 0xed, 0xf0, 0x16, 0x8b,
	0xfb, 0xd9, 0xe3, 0x64, 0x40, 0x59, 0x5f, 0xb8, 0xba, 0x38, 0x6a, 0x05, 0x49, 0xf5, 0x33, 0xa3,
	0x60, 0x39, 0xe5, 0xe4, 0x66, 0x47, 0x5e, 0xc0, 0x2f, 0x40, 0x21, 0x9e, 0xe6, 0x44, 0x54, 0x72,
	0x3a, 0xe0, 0x49, 0xab, 0x44, 0x9b, 0x78, 0x72, 0x9b, 0x68, 0xeb, 0x4a, 0x2d, 0x29, 0x74, 0x65,
	0x19, 0x17, 0xea, 0xed, 0x13, 0xac, 0x17, 0x1a, 0x44, 0x38, 0xda, 0x23, 0xbc, 0x00, 0x0a, 0xb7,
	0xd5, 0x00, 0x98, 0x95, 0x71, 0x37, 0xfe, 0x1e, 0x99, 0xa7, 0x3c, 0x4e, 0xd4, 0x44, 0x53, 0xa2,
	0xbd, 0x54, 0x32, 0x02, 0xcb, 0xd1, 0xc6, 0xd6, 0xfd, 0x1c, 0x38, 0xb3, 0x37, 0xe9, 0xc6, 0xb5,
	0x52, 0x64, 0xf8, 0xdf, 0xbf, 0x68, 0x87, 0x8d, 0xdd, 0xdc, 0xd4, 0x63, 0xf7, 0x32, 0x28, 0x28,
	0x4e, 0x54, 0x66, 0xff, 0x3b, 0x57, 0x34, 0x84, 0xf5, 0x83, 0x01, 0xf2, 0x72, 0xdb, 0x39, 0x0b,
	0xe6, 0x30, 0x09, 0x59, 0x20, 0xb3, 0x2c, 0xda, 0xa7, 0x5f, 0x8c, 0xcc, 0x45, 0x55, 0x40, 0x79,
	0x6d, 0x39, 0x4a, 0x0c, 0xef, 0x82, 0xb9, 0x78, 0x8f, 0x4e, 0xfa, 0x7e, 0xc4, 0x0a, 0xf9, 0x91,
	0x6e, 0xba, 0x86, 0x91, 0x56, 0xd6, 0x54, 0x2b, 0xa5, 0xf2, 0x64, 0xfd, 0x6c, 0x80, 0x79, 0x1d,
	0xfd, 0x89, 0xc3, 0xbc, 0x6f, 0x80, 0x22, 0x26, 0x9e, 0x9b, 0x8e, 0xf5, 0x68, 0x8e, 0x5e, 0xd4,
	0xe1, 0x9e, 0x4e, 0xe0, 0xb4, 0xf1, 0xd4, 0x34, 0x5d, 0xc0, 0xfa, 0xc9, 0xfa, 0xd2, 0x00, 0xa5,
	0xd4, 0x5c, 0xca, 0x6c, 0xed, 0xc6, 0x31, 0x5b, 0xfb, 0x65, 0x95, 0x81, 0x5c, 0x20, 0xc7, 0x19,
	0x1c, 0xd5, 0xea, 0xd3, 0xd9, 0x56, 0xcb, 0x50, 0xe4, 0x93, 0x7d, 0xe5, 0xf1, 0x1f, 0xd5, 0x99,
	0xc7, 0xbb, 0x55, 0xe3, 0xe9, 0x6e, 0xd5, 0xf8, 0x7d, 0xb7, 0x6a, 0x3c, 0x78, 0x5e, 0x9d, 0x79,
	0xfa, 0xbc, 0x3a, 0xf3, 0xdb, 0xf3, 0xea, 0xcc, 0xcd, 0x8d, 0x54, 0x7e, 0x89, 0x87, 0x86, 0x8f,
	0x3a, 0x62, 0x7c, 0x6a, 0x7d, 0x3e, 0xfe, 0xb9, 0x26, 0xd3, 0xed, 0x14, 0xe4, 0x77, 0xf5, 0xbd,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x3d, 0xf3, 0x0e, 0xcf, 0x0d, 0x00, 0x00,
}

func (this *RewardsPlan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardsPlan)
	if !ok {
		that2, ok := that.(RewardsPlan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.ServiceID != that1.ServiceID {
		return false
	}
	if len(this.AmountPerDay) != len(that1.AmountPerDay) {
		return false
	}
	for i := range this.AmountPerDay {
		if !this.AmountPerDay[i].Equal(&that1.AmountPerDay[i]) {
			return false
		}
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	if this.RewardsPool != that1.RewardsPool {
		return false
	}
	if !this.PoolsDistribution.Equal(&that1.PoolsDistribution) {
		return false
	}
	if !this.OperatorsDistribution.Equal(&that1.OperatorsDistribution) {
		return false
	}
	if !this.UsersDistribution.Equal(&that1.UsersDistribution) {
		return false
	}
	return true
}
func (this *Distribution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Distribution)
	if !ok {
		that2, ok := that.(Distribution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DelegationType != that1.DelegationType {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (this *UsersDistribution) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UsersDistribution)
	if !ok {
		that2, ok := that.(UsersDistribution)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Weight != that1.Weight {
		return false
	}
	if !this.Type.Equal(that1.Type) {
		return false
	}
	return true
}
func (m *RewardsPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UsersDistribution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.OperatorsDistribution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.PoolsDistribution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.RewardsPool) > 0 {
		i -= len(m.RewardsPool)
		copy(dAtA[i:], m.RewardsPool)
		i = encodeVarintModels(dAtA, i, uint64(len(m.RewardsPool)))
		i--
		dAtA[i] = 0x3a
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintModels(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x32
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintModels(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x2a
	if len(m.AmountPerDay) > 0 {
		for iNdEx := len(m.AmountPerDay) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AmountPerDay[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ServiceID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Distribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Distribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Distribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModels(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Weight != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if m.DelegationType != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.DelegationType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DistributionTypeBasic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionTypeBasic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionTypeBasic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *DistributionTypeWeighted) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionTypeWeighted) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionTypeWeighted) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Weights) > 0 {
		for iNdEx := len(m.Weights) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Weights[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DistributionWeight) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionWeight) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionWeight) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Weight != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x10
	}
	if m.DelegationTargetID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.DelegationTargetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DistributionTypeEgalitarian) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DistributionTypeEgalitarian) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DistributionTypeEgalitarian) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *UsersDistribution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsersDistribution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsersDistribution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != nil {
		{
			size, err := m.Type.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintModels(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Weight != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Weight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UsersDistributionTypeBasic) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UsersDistributionTypeBasic) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UsersDistributionTypeBasic) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *HistoricalRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReferenceCount != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.ReferenceCount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CumulativeRewardRatios) > 0 {
		for iNdEx := len(m.CumulativeRewardRatios) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CumulativeRewardRatios[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CurrentRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Period != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *OutstandingRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutstandingRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutstandingRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AccumulatedCommission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccumulatedCommission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccumulatedCommission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commissions) > 0 {
		for iNdEx := len(m.Commissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Commissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorStartingInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorStartingInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorStartingInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Stakes) > 0 {
		for iNdEx := len(m.Stakes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Stakes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PreviousPeriod != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.PreviousPeriod))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegationDelegatorReward) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationDelegatorReward) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationDelegatorReward) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Reward) > 0 {
		for iNdEx := len(m.Reward) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Reward[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DelegationTargetID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.DelegationTargetID))
		i--
		dAtA[i] = 0x10
	}
	if m.DelegationType != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.DelegationType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Pool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Pool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Pool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Coins) > 0 {
		for iNdEx := len(m.Coins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Coins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DecPool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DecPool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DecPool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DecCoins) > 0 {
		for iNdEx := len(m.DecCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DecCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServicePool) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServicePool) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServicePool) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DecPools) > 0 {
		for iNdEx := len(m.DecPools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DecPools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ServiceID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardsPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModels(uint64(m.ID))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.ServiceID != 0 {
		n += 1 + sovModels(uint64(m.ServiceID))
	}
	if len(m.AmountPerDay) > 0 {
		for _, e := range m.AmountPerDay {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovModels(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovModels(uint64(l))
	l = len(m.RewardsPool)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = m.PoolsDistribution.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.OperatorsDistribution.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.UsersDistribution.Size()
	n += 1 + l + sovModels(uint64(l))
	return n
}

func (m *Distribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegationType != 0 {
		n += 1 + sovModels(uint64(m.DelegationType))
	}
	if m.Weight != 0 {
		n += 1 + sovModels(uint64(m.Weight))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *DistributionTypeBasic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *DistributionTypeWeighted) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Weights) > 0 {
		for _, e := range m.Weights {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *DistributionWeight) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegationTargetID != 0 {
		n += 1 + sovModels(uint64(m.DelegationTargetID))
	}
	if m.Weight != 0 {
		n += 1 + sovModels(uint64(m.Weight))
	}
	return n
}

func (m *DistributionTypeEgalitarian) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UsersDistribution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Weight != 0 {
		n += 1 + sovModels(uint64(m.Weight))
	}
	if m.Type != nil {
		l = m.Type.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *UsersDistributionTypeBasic) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *HistoricalRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CumulativeRewardRatios) > 0 {
		for _, e := range m.CumulativeRewardRatios {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.ReferenceCount != 0 {
		n += 1 + sovModels(uint64(m.ReferenceCount))
	}
	return n
}

func (m *CurrentRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.Period != 0 {
		n += 1 + sovModels(uint64(m.Period))
	}
	return n
}

func (m *OutstandingRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *AccumulatedCommission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Commissions) > 0 {
		for _, e := range m.Commissions {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *DelegatorStartingInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PreviousPeriod != 0 {
		n += 1 + sovModels(uint64(m.PreviousPeriod))
	}
	if len(m.Stakes) > 0 {
		for _, e := range m.Stakes {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.Height != 0 {
		n += 1 + sovModels(uint64(m.Height))
	}
	return n
}

func (m *DelegationDelegatorReward) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegationType != 0 {
		n += 1 + sovModels(uint64(m.DelegationType))
	}
	if m.DelegationTargetID != 0 {
		n += 1 + sovModels(uint64(m.DelegationTargetID))
	}
	if len(m.Reward) > 0 {
		for _, e := range m.Reward {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *Pool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Coins) > 0 {
		for _, e := range m.Coins {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *DecPool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.DecCoins) > 0 {
		for _, e := range m.DecCoins {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *ServicePool) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceID != 0 {
		n += 1 + sovModels(uint64(m.ServiceID))
	}
	if len(m.DecPools) > 0 {
		for _, e := range m.DecPools {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func sovModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardsPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountPerDay = append(m.AmountPerDay, types.Coin{})
			if err := m.AmountPerDay[len(m.AmountPerDay)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsPool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolsDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolsDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorsDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorsDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsersDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Distribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Distribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Distribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationType", wireType)
			}
			m.DelegationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationType |= types1.DelegationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &types2.Any{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributionTypeBasic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionTypeBasic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionTypeBasic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributionTypeWeighted) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionTypeWeighted: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionTypeWeighted: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Weights = append(m.Weights, DistributionWeight{})
			if err := m.Weights[len(m.Weights)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributionWeight) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionWeight: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionWeight: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationTargetID", wireType)
			}
			m.DelegationTargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationTargetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DistributionTypeEgalitarian) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DistributionTypeEgalitarian: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DistributionTypeEgalitarian: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsersDistribution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsersDistribution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsersDistribution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Weight |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Type == nil {
				m.Type = &types2.Any{}
			}
			if err := m.Type.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UsersDistributionTypeBasic) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UsersDistributionTypeBasic: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UsersDistributionTypeBasic: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoricalRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CumulativeRewardRatios", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CumulativeRewardRatios = append(m.CumulativeRewardRatios, ServicePool{})
			if err := m.CumulativeRewardRatios[len(m.CumulativeRewardRatios)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReferenceCount", wireType)
			}
			m.ReferenceCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReferenceCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, ServicePool{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutstandingRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutstandingRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutstandingRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, DecPool{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccumulatedCommission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccumulatedCommission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccumulatedCommission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commissions = append(m.Commissions, DecPool{})
			if err := m.Commissions[len(m.Commissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorStartingInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorStartingInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorStartingInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PreviousPeriod", wireType)
			}
			m.PreviousPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PreviousPeriod |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stakes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Stakes = append(m.Stakes, types.DecCoin{})
			if err := m.Stakes[len(m.Stakes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationDelegatorReward) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationDelegatorReward: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationDelegatorReward: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationType", wireType)
			}
			m.DelegationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationType |= types1.DelegationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationTargetID", wireType)
			}
			m.DelegationTargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationTargetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Reward", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Reward = append(m.Reward, DecPool{})
			if err := m.Reward[len(m.Reward)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Pool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Pool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Pool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins, types.Coin{})
			if err := m.Coins[len(m.Coins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DecPool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DecPool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DecPool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecCoins = append(m.DecCoins, types.DecCoin{})
			if err := m.DecCoins[len(m.DecCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServicePool) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServicePool: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServicePool: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecPools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DecPools = append(m.DecPools, DecPool{})
			if err := m.DecPools[len(m.DecPools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModels = fmt.Errorf("proto: unexpected end of group")
)
