// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/rewards/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

// QueryRewardsPlansRequest is the request type for the Query/RewardsPlans RPC
// method.
type QueryRewardsPlansRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardsPlansRequest) Reset()         { *m = QueryRewardsPlansRequest{} }
func (m *QueryRewardsPlansRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsPlansRequest) ProtoMessage()    {}
func (*QueryRewardsPlansRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{2}
}
func (m *QueryRewardsPlansRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsPlansRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsPlansRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsPlansRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsPlansRequest.Merge(m, src)
}
func (m *QueryRewardsPlansRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsPlansRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsPlansRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsPlansRequest proto.InternalMessageInfo

// QueryRewardsPlansResponse is the response type for the Query/RewardsPlans
// RPC method.
type QueryRewardsPlansResponse struct {
	RewardsPlans []RewardsPlan `protobuf:"bytes,1,rep,name=rewards_plans,json=rewardsPlans,proto3" json:"rewards_plans"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRewardsPlansResponse) Reset()         { *m = QueryRewardsPlansResponse{} }
func (m *QueryRewardsPlansResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsPlansResponse) ProtoMessage()    {}
func (*QueryRewardsPlansResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{3}
}
func (m *QueryRewardsPlansResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsPlansResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsPlansResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsPlansResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsPlansResponse.Merge(m, src)
}
func (m *QueryRewardsPlansResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsPlansResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsPlansResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsPlansResponse proto.InternalMessageInfo

// QueryRewardsPlanRequest is the request type for the Query/RewardsPlan RPC
// method.
type QueryRewardsPlanRequest struct {
	PlanId uint64 `protobuf:"varint,1,opt,name=plan_id,json=planId,proto3" json:"plan_id,omitempty"`
}

func (m *QueryRewardsPlanRequest) Reset()         { *m = QueryRewardsPlanRequest{} }
func (m *QueryRewardsPlanRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsPlanRequest) ProtoMessage()    {}
func (*QueryRewardsPlanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{4}
}
func (m *QueryRewardsPlanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsPlanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsPlanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsPlanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsPlanRequest.Merge(m, src)
}
func (m *QueryRewardsPlanRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsPlanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsPlanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsPlanRequest proto.InternalMessageInfo

// QueryRewardsPlanResponse is the response type for the Query/RewardsPlan RPC
// method.
type QueryRewardsPlanResponse struct {
	RewardsPlan RewardsPlan `protobuf:"bytes,2,opt,name=rewards_plan,json=rewardsPlan,proto3" json:"rewards_plan"`
}

func (m *QueryRewardsPlanResponse) Reset()         { *m = QueryRewardsPlanResponse{} }
func (m *QueryRewardsPlanResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRewardsPlanResponse) ProtoMessage()    {}
func (*QueryRewardsPlanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{5}
}
func (m *QueryRewardsPlanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRewardsPlanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRewardsPlanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRewardsPlanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRewardsPlanResponse.Merge(m, src)
}
func (m *QueryRewardsPlanResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRewardsPlanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRewardsPlanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRewardsPlanResponse proto.InternalMessageInfo

// QueryPoolOutstandingRewardsRequest is the request type for the
// Query/PoolOutstandingRewards RPC method.
type QueryPoolOutstandingRewardsRequest struct {
	// pool_id defines the pool ID to query for.
	PoolId uint32 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryPoolOutstandingRewardsRequest) Reset()         { *m = QueryPoolOutstandingRewardsRequest{} }
func (m *QueryPoolOutstandingRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolOutstandingRewardsRequest) ProtoMessage()    {}
func (*QueryPoolOutstandingRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{6}
}
func (m *QueryPoolOutstandingRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolOutstandingRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolOutstandingRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolOutstandingRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolOutstandingRewardsRequest.Merge(m, src)
}
func (m *QueryPoolOutstandingRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolOutstandingRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolOutstandingRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolOutstandingRewardsRequest proto.InternalMessageInfo

// QueryPoolOutstandingRewardsResponse is the response type for the
// Query/PoolOutstandingRewards RPC method.
type QueryPoolOutstandingRewardsResponse struct {
	Rewards OutstandingRewards `protobuf:"bytes,1,opt,name=rewards,proto3" json:"rewards"`
}

func (m *QueryPoolOutstandingRewardsResponse) Reset()         { *m = QueryPoolOutstandingRewardsResponse{} }
func (m *QueryPoolOutstandingRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolOutstandingRewardsResponse) ProtoMessage()    {}
func (*QueryPoolOutstandingRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{7}
}
func (m *QueryPoolOutstandingRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolOutstandingRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolOutstandingRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolOutstandingRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolOutstandingRewardsResponse.Merge(m, src)
}
func (m *QueryPoolOutstandingRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolOutstandingRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolOutstandingRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolOutstandingRewardsResponse proto.InternalMessageInfo

// QueryOperatorOutstandingRewardsRequest is the request type for the
// Query/OperatorOutstandingRewards RPC method.
type QueryOperatorOutstandingRewardsRequest struct {
	// operator_id defines the operator ID to query for.
	OperatorId uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (m *QueryOperatorOutstandingRewardsRequest) Reset() {
	*m = QueryOperatorOutstandingRewardsRequest{}
}
func (m *QueryOperatorOutstandingRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorOutstandingRewardsRequest) ProtoMessage()    {}
func (*QueryOperatorOutstandingRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{8}
}
func (m *QueryOperatorOutstandingRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorOutstandingRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorOutstandingRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorOutstandingRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorOutstandingRewardsRequest.Merge(m, src)
}
func (m *QueryOperatorOutstandingRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorOutstandingRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorOutstandingRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorOutstandingRewardsRequest proto.InternalMessageInfo

// QueryOperatorOutstandingRewardsResponse is the response type for the
// Query/OperatorOutstandingRewards RPC method.
type QueryOperatorOutstandingRewardsResponse struct {
	Rewards OutstandingRewards `protobuf:"bytes,1,opt,name=rewards,proto3" json:"rewards"`
}

func (m *QueryOperatorOutstandingRewardsResponse) Reset() {
	*m = QueryOperatorOutstandingRewardsResponse{}
}
func (m *QueryOperatorOutstandingRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorOutstandingRewardsResponse) ProtoMessage()    {}
func (*QueryOperatorOutstandingRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{9}
}
func (m *QueryOperatorOutstandingRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorOutstandingRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorOutstandingRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorOutstandingRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorOutstandingRewardsResponse.Merge(m, src)
}
func (m *QueryOperatorOutstandingRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorOutstandingRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorOutstandingRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorOutstandingRewardsResponse proto.InternalMessageInfo

// QueryServiceOutstandingRewardsRequest is the request type for the
// Query/ServiceOutstandingRewards RPC method.
type QueryServiceOutstandingRewardsRequest struct {
	// service_id defines the service ID to query for.
	ServiceId uint32 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (m *QueryServiceOutstandingRewardsRequest) Reset()         { *m = QueryServiceOutstandingRewardsRequest{} }
func (m *QueryServiceOutstandingRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceOutstandingRewardsRequest) ProtoMessage()    {}
func (*QueryServiceOutstandingRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{10}
}
func (m *QueryServiceOutstandingRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceOutstandingRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceOutstandingRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceOutstandingRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceOutstandingRewardsRequest.Merge(m, src)
}
func (m *QueryServiceOutstandingRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceOutstandingRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceOutstandingRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceOutstandingRewardsRequest proto.InternalMessageInfo

// QueryServiceOutstandingRewardsResponse is the response type for the
// Query/ServiceOutstandingRewards RPC method.
type QueryServiceOutstandingRewardsResponse struct {
	Rewards OutstandingRewards `protobuf:"bytes,1,opt,name=rewards,proto3" json:"rewards"`
}

func (m *QueryServiceOutstandingRewardsResponse) Reset() {
	*m = QueryServiceOutstandingRewardsResponse{}
}
func (m *QueryServiceOutstandingRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceOutstandingRewardsResponse) ProtoMessage()    {}
func (*QueryServiceOutstandingRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{11}
}
func (m *QueryServiceOutstandingRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceOutstandingRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceOutstandingRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceOutstandingRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceOutstandingRewardsResponse.Merge(m, src)
}
func (m *QueryServiceOutstandingRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceOutstandingRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceOutstandingRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceOutstandingRewardsResponse proto.InternalMessageInfo

// QueryOperatorCommissionRequest is the request type for the
// Query/OperatorCommission RPC method
type QueryOperatorCommissionRequest struct {
	// operator_id defines the validator address to query for.
	OperatorId uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (m *QueryOperatorCommissionRequest) Reset()         { *m = QueryOperatorCommissionRequest{} }
func (m *QueryOperatorCommissionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorCommissionRequest) ProtoMessage()    {}
func (*QueryOperatorCommissionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{12}
}
func (m *QueryOperatorCommissionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorCommissionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorCommissionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorCommissionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorCommissionRequest.Merge(m, src)
}
func (m *QueryOperatorCommissionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorCommissionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorCommissionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorCommissionRequest proto.InternalMessageInfo

// QueryOperatorCommissionResponse is the response type for the
// Query/OperatorCommission RPC method
type QueryOperatorCommissionResponse struct {
	// commission defines the commission the operator received.
	Commission AccumulatedCommission `protobuf:"bytes,1,opt,name=commission,proto3" json:"commission"`
}

func (m *QueryOperatorCommissionResponse) Reset()         { *m = QueryOperatorCommissionResponse{} }
func (m *QueryOperatorCommissionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorCommissionResponse) ProtoMessage()    {}
func (*QueryOperatorCommissionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{13}
}
func (m *QueryOperatorCommissionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorCommissionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorCommissionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorCommissionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorCommissionResponse.Merge(m, src)
}
func (m *QueryOperatorCommissionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorCommissionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorCommissionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorCommissionResponse proto.InternalMessageInfo

// QueryPoolServiceTotalDelegatorSharesRequest is the request type for the
// Query/PoolServiceTotalDelegatorShares RPC method.
type QueryPoolServiceTotalDelegatorSharesRequest struct {
	// pool_id defines the pool ID to query for.
	PoolId uint32 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// service_id defines the service ID to query for.
	ServiceId uint32 `protobuf:"varint,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (m *QueryPoolServiceTotalDelegatorSharesRequest) Reset() {
	*m = QueryPoolServiceTotalDelegatorSharesRequest{}
}
func (m *QueryPoolServiceTotalDelegatorSharesRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPoolServiceTotalDelegatorSharesRequest) ProtoMessage() {}
func (*QueryPoolServiceTotalDelegatorSharesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{14}
}
func (m *QueryPoolServiceTotalDelegatorSharesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolServiceTotalDelegatorSharesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolServiceTotalDelegatorSharesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolServiceTotalDelegatorSharesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolServiceTotalDelegatorSharesRequest.Merge(m, src)
}
func (m *QueryPoolServiceTotalDelegatorSharesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolServiceTotalDelegatorSharesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolServiceTotalDelegatorSharesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolServiceTotalDelegatorSharesRequest proto.InternalMessageInfo

// QueryPoolServiceTotalDelegatorSharesResponse is the response type for the
// Query/PoolServiceTotalDelegatorShares RPC method.
type QueryPoolServiceTotalDelegatorSharesResponse struct {
	// total_delegator_shares defines the total delegator shares for a
	// pool-service pair.
	Shares github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=shares,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"shares"`
}

func (m *QueryPoolServiceTotalDelegatorSharesResponse) Reset() {
	*m = QueryPoolServiceTotalDelegatorSharesResponse{}
}
func (m *QueryPoolServiceTotalDelegatorSharesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryPoolServiceTotalDelegatorSharesResponse) ProtoMessage() {}
func (*QueryPoolServiceTotalDelegatorSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{15}
}
func (m *QueryPoolServiceTotalDelegatorSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolServiceTotalDelegatorSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolServiceTotalDelegatorSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolServiceTotalDelegatorSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolServiceTotalDelegatorSharesResponse.Merge(m, src)
}
func (m *QueryPoolServiceTotalDelegatorSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolServiceTotalDelegatorSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolServiceTotalDelegatorSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolServiceTotalDelegatorSharesResponse proto.InternalMessageInfo

// QueryPoolDelegationRewardsRequest is the request type for the
// Query/PoolDelegationRewards RPC method.
type QueryPoolDelegationRewardsRequest struct {
	// delegator_address defines the delegator address to query for.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// pool_id defines the pool ID to query for.
	PoolId uint32 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryPoolDelegationRewardsRequest) Reset()         { *m = QueryPoolDelegationRewardsRequest{} }
func (m *QueryPoolDelegationRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPoolDelegationRewardsRequest) ProtoMessage()    {}
func (*QueryPoolDelegationRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{16}
}
func (m *QueryPoolDelegationRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolDelegationRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolDelegationRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolDelegationRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolDelegationRewardsRequest.Merge(m, src)
}
func (m *QueryPoolDelegationRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolDelegationRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolDelegationRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolDelegationRewardsRequest proto.InternalMessageInfo

// QueryPoolDelegationRewardsResponse is the response type for the
// Query/PoolDelegationRewards RPC method.
type QueryPoolDelegationRewardsResponse struct {
	// rewards defines the rewards accrued by a delegation.
	Rewards DecPools `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=DecPools" json:"rewards"`
}

func (m *QueryPoolDelegationRewardsResponse) Reset()         { *m = QueryPoolDelegationRewardsResponse{} }
func (m *QueryPoolDelegationRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPoolDelegationRewardsResponse) ProtoMessage()    {}
func (*QueryPoolDelegationRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{17}
}
func (m *QueryPoolDelegationRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPoolDelegationRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPoolDelegationRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPoolDelegationRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPoolDelegationRewardsResponse.Merge(m, src)
}
func (m *QueryPoolDelegationRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPoolDelegationRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPoolDelegationRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPoolDelegationRewardsResponse proto.InternalMessageInfo

// QueryOperatorDelegationRewardsRequest is the request type for the
// Query/OperatorDelegationRewards RPC method.
type QueryOperatorDelegationRewardsRequest struct {
	// delegator_address defines the delegator address to query for.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// operator_id defines the operator ID to query for.
	OperatorId uint32 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
}

func (m *QueryOperatorDelegationRewardsRequest) Reset()         { *m = QueryOperatorDelegationRewardsRequest{} }
func (m *QueryOperatorDelegationRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorDelegationRewardsRequest) ProtoMessage()    {}
func (*QueryOperatorDelegationRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{18}
}
func (m *QueryOperatorDelegationRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorDelegationRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorDelegationRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorDelegationRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorDelegationRewardsRequest.Merge(m, src)
}
func (m *QueryOperatorDelegationRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorDelegationRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorDelegationRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorDelegationRewardsRequest proto.InternalMessageInfo

// QueryOperatorDelegationRewardsResponse is the response type for the
// Query/OperatorDelegationRewards RPC method.
type QueryOperatorDelegationRewardsResponse struct {
	// rewards defines the rewards accrued by a delegation.
	Rewards DecPools `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=DecPools" json:"rewards"`
}

func (m *QueryOperatorDelegationRewardsResponse) Reset() {
	*m = QueryOperatorDelegationRewardsResponse{}
}
func (m *QueryOperatorDelegationRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOperatorDelegationRewardsResponse) ProtoMessage()    {}
func (*QueryOperatorDelegationRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{19}
}
func (m *QueryOperatorDelegationRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOperatorDelegationRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOperatorDelegationRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOperatorDelegationRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOperatorDelegationRewardsResponse.Merge(m, src)
}
func (m *QueryOperatorDelegationRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOperatorDelegationRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOperatorDelegationRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOperatorDelegationRewardsResponse proto.InternalMessageInfo

// QueryServiceDelegationRewardsRequest is the request type for the
// Query/ServiceDelegationRewards RPC method.
type QueryServiceDelegationRewardsRequest struct {
	// delegator_address defines the delegator address to query for.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// service_id defines the service ID to query for.
	ServiceId uint32 `protobuf:"varint,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
}

func (m *QueryServiceDelegationRewardsRequest) Reset()         { *m = QueryServiceDelegationRewardsRequest{} }
func (m *QueryServiceDelegationRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryServiceDelegationRewardsRequest) ProtoMessage()    {}
func (*QueryServiceDelegationRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{20}
}
func (m *QueryServiceDelegationRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceDelegationRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceDelegationRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceDelegationRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceDelegationRewardsRequest.Merge(m, src)
}
func (m *QueryServiceDelegationRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceDelegationRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceDelegationRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceDelegationRewardsRequest proto.InternalMessageInfo

// QueryServiceDelegationRewardsResponse is the response type for the
// Query/ServiceDelegationRewards RPC method.
type QueryServiceDelegationRewardsResponse struct {
	// rewards defines the rewards accrued by a delegation.
	Rewards DecPools `protobuf:"bytes,1,rep,name=rewards,proto3,castrepeated=DecPools" json:"rewards"`
}

func (m *QueryServiceDelegationRewardsResponse) Reset()         { *m = QueryServiceDelegationRewardsResponse{} }
func (m *QueryServiceDelegationRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryServiceDelegationRewardsResponse) ProtoMessage()    {}
func (*QueryServiceDelegationRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{21}
}
func (m *QueryServiceDelegationRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryServiceDelegationRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryServiceDelegationRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryServiceDelegationRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryServiceDelegationRewardsResponse.Merge(m, src)
}
func (m *QueryServiceDelegationRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryServiceDelegationRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryServiceDelegationRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryServiceDelegationRewardsResponse proto.InternalMessageInfo

// QueryDelegatorTotalRewardsRequest is the request type for the
// Query/DelegatorTotalRewards RPC method.
type QueryDelegatorTotalRewardsRequest struct {
	// delegator_address defines the delegator address to query for.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryDelegatorTotalRewardsRequest) Reset()         { *m = QueryDelegatorTotalRewardsRequest{} }
func (m *QueryDelegatorTotalRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorTotalRewardsRequest) ProtoMessage()    {}
func (*QueryDelegatorTotalRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{22}
}
func (m *QueryDelegatorTotalRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorTotalRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorTotalRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorTotalRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorTotalRewardsRequest.Merge(m, src)
}
func (m *QueryDelegatorTotalRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorTotalRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorTotalRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorTotalRewardsRequest proto.InternalMessageInfo

// QueryDelegatorTotalRewardsResponse is the response type for the
// Query/DelegatorTotalRewards RPC method.
type QueryDelegatorTotalRewardsResponse struct {
	// rewards defines all the rewards accrued by a delegator.
	Rewards []DelegationDelegatorReward `protobuf:"bytes,1,rep,name=rewards,proto3" json:"rewards"`
	// total defines the sum of all the rewards.
	Total DecPools `protobuf:"bytes,2,rep,name=total,proto3,castrepeated=DecPools" json:"total"`
}

func (m *QueryDelegatorTotalRewardsResponse) Reset()         { *m = QueryDelegatorTotalRewardsResponse{} }
func (m *QueryDelegatorTotalRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorTotalRewardsResponse) ProtoMessage()    {}
func (*QueryDelegatorTotalRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{23}
}
func (m *QueryDelegatorTotalRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorTotalRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorTotalRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorTotalRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorTotalRewardsResponse.Merge(m, src)
}
func (m *QueryDelegatorTotalRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorTotalRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorTotalRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorTotalRewardsResponse proto.InternalMessageInfo

// QueryDelegatorWithdrawAddressRequest is the request type for the
// Query/DelegatorWithdrawAddress RPC method.
type QueryDelegatorWithdrawAddressRequest struct {
	// delegator_address defines the delegator address to query for.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryDelegatorWithdrawAddressRequest) Reset()         { *m = QueryDelegatorWithdrawAddressRequest{} }
func (m *QueryDelegatorWithdrawAddressRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorWithdrawAddressRequest) ProtoMessage()    {}
func (*QueryDelegatorWithdrawAddressRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{24}
}
func (m *QueryDelegatorWithdrawAddressRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorWithdrawAddressRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorWithdrawAddressRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorWithdrawAddressRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorWithdrawAddressRequest.Merge(m, src)
}
func (m *QueryDelegatorWithdrawAddressRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorWithdrawAddressRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorWithdrawAddressRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorWithdrawAddressRequest proto.InternalMessageInfo

// QueryDelegatorWithdrawAddressResponse is the response type for the
// Query/DelegatorWithdrawAddress RPC method.
type QueryDelegatorWithdrawAddressResponse struct {
	// withdraw_address defines the delegator address to query for.
	WithdrawAddress string `protobuf:"bytes,1,opt,name=withdraw_address,json=withdrawAddress,proto3" json:"withdraw_address,omitempty"`
}

func (m *QueryDelegatorWithdrawAddressResponse) Reset()         { *m = QueryDelegatorWithdrawAddressResponse{} }
func (m *QueryDelegatorWithdrawAddressResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDelegatorWithdrawAddressResponse) ProtoMessage()    {}
func (*QueryDelegatorWithdrawAddressResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f900c2389df7beb1, []int{25}
}
func (m *QueryDelegatorWithdrawAddressResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDelegatorWithdrawAddressResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDelegatorWithdrawAddressResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDelegatorWithdrawAddressResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDelegatorWithdrawAddressResponse.Merge(m, src)
}
func (m *QueryDelegatorWithdrawAddressResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDelegatorWithdrawAddressResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDelegatorWithdrawAddressResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDelegatorWithdrawAddressResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "milkyway.rewards.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "milkyway.rewards.v1.QueryParamsResponse")
	proto.RegisterType((*QueryRewardsPlansRequest)(nil), "milkyway.rewards.v1.QueryRewardsPlansRequest")
	proto.RegisterType((*QueryRewardsPlansResponse)(nil), "milkyway.rewards.v1.QueryRewardsPlansResponse")
	proto.RegisterType((*QueryRewardsPlanRequest)(nil), "milkyway.rewards.v1.QueryRewardsPlanRequest")
	proto.RegisterType((*QueryRewardsPlanResponse)(nil), "milkyway.rewards.v1.QueryRewardsPlanResponse")
	proto.RegisterType((*QueryPoolOutstandingRewardsRequest)(nil), "milkyway.rewards.v1.QueryPoolOutstandingRewardsRequest")
	proto.RegisterType((*QueryPoolOutstandingRewardsResponse)(nil), "milkyway.rewards.v1.QueryPoolOutstandingRewardsResponse")
	proto.RegisterType((*QueryOperatorOutstandingRewardsRequest)(nil), "milkyway.rewards.v1.QueryOperatorOutstandingRewardsRequest")
	proto.RegisterType((*QueryOperatorOutstandingRewardsResponse)(nil), "milkyway.rewards.v1.QueryOperatorOutstandingRewardsResponse")
	proto.RegisterType((*QueryServiceOutstandingRewardsRequest)(nil), "milkyway.rewards.v1.QueryServiceOutstandingRewardsRequest")
	proto.RegisterType((*QueryServiceOutstandingRewardsResponse)(nil), "milkyway.rewards.v1.QueryServiceOutstandingRewardsResponse")
	proto.RegisterType((*QueryOperatorCommissionRequest)(nil), "milkyway.rewards.v1.QueryOperatorCommissionRequest")
	proto.RegisterType((*QueryOperatorCommissionResponse)(nil), "milkyway.rewards.v1.QueryOperatorCommissionResponse")
	proto.RegisterType((*QueryPoolServiceTotalDelegatorSharesRequest)(nil), "milkyway.rewards.v1.QueryPoolServiceTotalDelegatorSharesRequest")
	proto.RegisterType((*QueryPoolServiceTotalDelegatorSharesResponse)(nil), "milkyway.rewards.v1.QueryPoolServiceTotalDelegatorSharesResponse")
	proto.RegisterType((*QueryPoolDelegationRewardsRequest)(nil), "milkyway.rewards.v1.QueryPoolDelegationRewardsRequest")
	proto.RegisterType((*QueryPoolDelegationRewardsResponse)(nil), "milkyway.rewards.v1.QueryPoolDelegationRewardsResponse")
	proto.RegisterType((*QueryOperatorDelegationRewardsRequest)(nil), "milkyway.rewards.v1.QueryOperatorDelegationRewardsRequest")
	proto.RegisterType((*QueryOperatorDelegationRewardsResponse)(nil), "milkyway.rewards.v1.QueryOperatorDelegationRewardsResponse")
	proto.RegisterType((*QueryServiceDelegationRewardsRequest)(nil), "milkyway.rewards.v1.QueryServiceDelegationRewardsRequest")
	proto.RegisterType((*QueryServiceDelegationRewardsResponse)(nil), "milkyway.rewards.v1.QueryServiceDelegationRewardsResponse")
	proto.RegisterType((*QueryDelegatorTotalRewardsRequest)(nil), "milkyway.rewards.v1.QueryDelegatorTotalRewardsRequest")
	proto.RegisterType((*QueryDelegatorTotalRewardsResponse)(nil), "milkyway.rewards.v1.QueryDelegatorTotalRewardsResponse")
	proto.RegisterType((*QueryDelegatorWithdrawAddressRequest)(nil), "milkyway.rewards.v1.QueryDelegatorWithdrawAddressRequest")
	proto.RegisterType((*QueryDelegatorWithdrawAddressResponse)(nil), "milkyway.rewards.v1.QueryDelegatorWithdrawAddressResponse")
}

func init() { proto.RegisterFile("milkyway/rewards/v1/query.proto", fileDescriptor_f900c2389df7beb1) }

var fileDescriptor_f900c2389df7beb1 = []byte{
	// 1381 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0xcd, 0x6f, 0x1b, 0xc5,
	0x1b, 0xce, 0xf8, 0xd7, 0xba, 0xbf, 0xbe, 0x69, 0x45, 0x3b, 0x6d, 0xa8, 0xb3, 0x6d, 0xed, 0xb0,
	0x2d, 0x6d, 0x95, 0x36, 0xbb, 0x72, 0x5a, 0xe8, 0x47, 0x28, 0x24, 0x4e, 0x08, 0x58, 0xb4, 0x6a,
	0x6a, 0x53, 0x21, 0xe0, 0x60, 0xad, 0xbd, 0x2b, 0x77, 0xa9, 0xbd, 0xe3, 0xee, 0xae, 0xed, 0x46,
	0x51, 0x25, 0x3e, 0xae, 0x48, 0x20, 0x71, 0x81, 0x0b, 0xe2, 0x88, 0x38, 0x71, 0x40, 0x9c, 0x39,
	0x70, 0xc8, 0x05, 0xa9, 0x82, 0x0b, 0x07, 0xa0, 0x34, 0x41, 0xe2, 0xc2, 0x85, 0xff, 0x00, 0xed,
	0xec, 0xbb, 0xf6, 0xda, 0xde, 0x0f, 0xc7, 0xc1, 0x5c, 0xda, 0xec, 0xec, 0xfb, 0xf1, 0x3c, 0xcf,
	0xbc, 0xb3, 0xf3, 0xc8, 0x90, 0xa9, 0xeb, 0xb5, 0x7b, 0xeb, 0x6d, 0x65, 0x5d, 0x36, 0xb5, 0xb6,
	0x62, 0xaa, 0x96, 0xdc, 0xca, 0xca, 0xf7, 0x9b, 0x9a, 0xb9, 0x2e, 0x35, 0x4c, 0x66, 0x33, 0x7a,
	0xc4, 0x0b, 0x90, 0x30, 0x40, 0x6a, 0x65, 0x85, 0xc3, 0x4a, 0x5d, 0x37, 0x98, 0xcc, 0xff, 0x75,
	0xe3, 0x84, 0xd9, 0x0a, 0xb3, 0xea, 0xcc, 0x92, 0xcb, 0x8a, 0xa5, 0xb9, 0x05, 0xe4, 0x56, 0xb6,
	0xac, 0xd9, 0x4a, 0x56, 0x6e, 0x28, 0x55, 0xdd, 0x50, 0x6c, 0x9d, 0x19, 0x18, 0x9b, 0xf6, 0xc7,
	0x7a, 0x51, 0x15, 0xa6, 0x7b, 0xef, 0xa7, 0xdd, 0xf7, 0x25, 0xfe, 0x24, 0xbb, 0x0f, 0xf8, 0xea,
	0x68, 0x95, 0x55, 0x99, 0xbb, 0xee, 0xfc, 0x85, 0xab, 0x27, 0xaa, 0x8c, 0x55, 0x6b, 0x9a, 0xac,
	0x34, 0x74, 0x59, 0x31, 0x0c, 0x66, 0xf3, 0x6e, 0x5e, 0xce, 0x4c, 0x10, 0xc7, 0x3a, 0x53, 0xb5,
	0x5a, 0x64, 0x44, 0x43, 0x31, 0x95, 0x3a, 0x46, 0x88, 0x47, 0x81, 0xde, 0x76, 0x48, 0xad, 0xf1,
	0xc5, 0x82, 0x76, 0xbf, 0xa9, 0x59, 0xb6, 0xb8, 0x06, 0x47, 0x7a, 0x56, 0xad, 0x06, 0x33, 0x2c,
	0x8d, 0x5e, 0x85, 0xa4, 0x9b, 0x9c, 0x22, 0x33, 0xe4, 0xdc, 0xe4, 0xfc, 0x71, 0x29, 0x40, 0x44,
	0xc9, 0x4d, 0xca, 0xed, 0xd9, 0xfc, 0x2d, 0x33, 0x51, 0xc0, 0x04, 0xb1, 0x0c, 0x29, 0x5e, 0xb1,
	0xe0, 0xc6, 0xad, 0xd5, 0x14, 0xc3, 0xeb, 0x46, 0x57, 0x01, 0xba, 0x52, 0x62, 0xe9, 0x33, 0x12,
	0xca, 0xe3, 0x68, 0x29, 0xb9, 0x1b, 0x87, 0x8a, 0x4a, 0x6b, 0x4a, 0x55, 0xc3, 0xdc, 0x82, 0x2f,
	0x53, 0xfc, 0x96, 0xc0, 0x74, 0x40, 0x13, 0x04, 0xbf, 0x06, 0x07, 0x11, 0x64, 0xa9, 0xe1, 0xbc,
	0x48, 0x91, 0x99, 0xff, 0x9d, 0x9b, 0x9c, 0x9f, 0x09, 0xe4, 0xe0, 0xab, 0x90, 0xdb, 0xef, 0x10,
	0xf9, 0xf2, 0xcf, 0xaf, 0x67, 0x49, 0xe1, 0x80, 0xe9, 0xab, 0x4c, 0x5f, 0xe9, 0xc1, 0x9d, 0xe0,
	0xb8, 0xcf, 0xc6, 0xe2, 0x76, 0xe1, 0xf4, 0x00, 0x9f, 0x87, 0x63, 0xfd, 0xb8, 0x3d, 0x6d, 0x8e,
	0xc1, 0x3e, 0x07, 0x6d, 0x49, 0x57, 0xb9, 0x30, 0x7b, 0x0a, 0x49, 0xe7, 0x31, 0xaf, 0x8a, 0xda,
	0xa0, 0xa0, 0x1d, 0xaa, 0x79, 0x38, 0xe0, 0xa7, 0x8a, 0xd0, 0xe2, 0x99, 0xba, 0x5b, 0x36, 0xe9,
	0x23, 0x29, 0x5e, 0x07, 0xd1, 0x9d, 0x04, 0xc6, 0x6a, 0xb7, 0x9a, 0xb6, 0x65, 0x2b, 0x86, 0xaa,
	0x1b, 0x55, 0xcc, 0xf2, 0xa3, 0x64, 0xac, 0xe6, 0xa1, 0x3c, 0x58, 0x48, 0x3a, 0x8f, 0x79, 0x55,
	0xb4, 0xe0, 0x54, 0x64, 0x3a, 0x02, 0xbe, 0x01, 0xfb, 0xb0, 0x29, 0x6e, 0xff, 0xd9, 0x40, 0xac,
	0x83, 0x15, 0xfc, 0x9b, 0xe3, 0x95, 0x10, 0xf3, 0x70, 0x86, 0x37, 0xbd, 0xd5, 0xd0, 0x4c, 0xc5,
	0x66, 0x66, 0x38, 0xee, 0x0c, 0x4c, 0x32, 0x0c, 0xea, 0x62, 0x07, 0x6f, 0x29, 0xaf, 0x8a, 0x6d,
	0x38, 0x1b, 0x5b, 0x6a, 0x2c, 0x1c, 0x56, 0xe1, 0x59, 0xde, 0xb8, 0xa8, 0x99, 0x2d, 0xbd, 0xa2,
	0x85, 0x53, 0x38, 0x09, 0x60, 0xb9, 0x31, 0x5d, 0x06, 0xfb, 0x71, 0x25, 0xaf, 0x8a, 0x2d, 0xd4,
	0x22, 0xa2, 0xce, 0x58, 0xf0, 0x2f, 0x41, 0xba, 0x47, 0xb8, 0x65, 0x56, 0xaf, 0xeb, 0x96, 0xa5,
	0x33, 0x63, 0x68, 0xed, 0x1f, 0x40, 0x26, 0xb4, 0x04, 0x62, 0xbe, 0x03, 0x50, 0xe9, 0xac, 0x22,
	0xec, 0xd9, 0x40, 0xd8, 0x4b, 0x95, 0x4a, 0xb3, 0xde, 0xac, 0x29, 0xb6, 0xa6, 0x76, 0xeb, 0xf8,
	0x91, 0xfb, 0x0a, 0x89, 0x1a, 0x9c, 0xef, 0x4c, 0x2d, 0x0a, 0xf7, 0x3a, 0xb3, 0x95, 0xda, 0x8a,
	0x56, 0xd3, 0xaa, 0x0e, 0x94, 0xe2, 0x5d, 0xc5, 0xd4, 0x62, 0xa7, 0xbf, 0x6f, 0x6f, 0x12, 0xfd,
	0x7b, 0xf3, 0x39, 0x81, 0x0b, 0xc3, 0xf5, 0x41, 0xba, 0x06, 0x24, 0x2d, 0xbe, 0x82, 0xdf, 0xae,
	0x13, 0x3d, 0x1f, 0x1b, 0xef, 0x33, 0xb3, 0xa2, 0x55, 0x96, 0x99, 0x6e, 0xe4, 0xae, 0x38, 0xe4,
	0xbe, 0x7a, 0x9c, 0x39, 0x5f, 0xd5, 0xed, 0xbb, 0xcd, 0xb2, 0x54, 0x61, 0x75, 0xbc, 0x73, 0xf0,
	0xbf, 0x39, 0x4b, 0xbd, 0x27, 0xdb, 0xeb, 0x0d, 0xcd, 0xf2, 0x72, 0x2c, 0x57, 0x0b, 0xec, 0x22,
	0x7e, 0x40, 0xe0, 0x99, 0x0e, 0x40, 0x04, 0xc5, 0xe5, 0xef, 0x99, 0xc0, 0x97, 0xe1, 0xb0, 0xea,
	0x01, 0x2e, 0x29, 0xaa, 0x6a, 0x6a, 0x96, 0x3b, 0x42, 0xfb, 0x73, 0xa9, 0x1f, 0xbf, 0x99, 0x3b,
	0x8a, 0x18, 0x97, 0xdc, 0x37, 0x45, 0xdb, 0x74, 0x46, 0xe7, 0x50, 0x27, 0x05, 0xd7, 0xfd, 0x2a,
	0x26, 0xfa, 0xbe, 0x21, 0x62, 0x14, 0x08, 0xd4, 0xe6, 0xa6, 0x7f, 0x7c, 0x5d, 0x71, 0x82, 0xe6,
	0x60, 0x45, 0xab, 0x38, 0x75, 0x72, 0x53, 0x28, 0xce, 0xff, 0x71, 0xc1, 0xea, 0x9b, 0xdf, 0x8f,
	0x08, 0x1e, 0x40, 0x6f, 0xfa, 0xc6, 0x4d, 0xbf, 0xef, 0x38, 0x24, 0x02, 0x3e, 0x45, 0x67, 0xe2,
	0x00, 0x8d, 0x47, 0x8a, 0x0f, 0x09, 0x9c, 0xf6, 0x7f, 0x43, 0xc6, 0xad, 0x44, 0xcc, 0xa9, 0x69,
	0xf5, 0x7e, 0x19, 0xff, 0x33, 0x19, 0xde, 0xc1, 0xb3, 0xd0, 0x39, 0x9c, 0xfc, 0xa8, 0x8e, 0x45,
	0x02, 0xf1, 0x7b, 0x82, 0x33, 0x1f, 0xd2, 0x0c, 0x19, 0x16, 0xfb, 0x19, 0x4a, 0x21, 0x0c, 0x3d,
	0x89, 0x3a, 0xe5, 0xdc, 0x4a, 0x41, 0x5f, 0x6e, 0x9a, 0x87, 0xbd, 0xb6, 0xd3, 0x2c, 0x95, 0x18,
	0x5d, 0x34, 0xb7, 0x82, 0x58, 0xc7, 0xc1, 0xe9, 0xb4, 0x7d, 0x43, 0xb7, 0xef, 0xaa, 0xa6, 0xd2,
	0x46, 0x9e, 0xff, 0xb2, 0x6a, 0x35, 0x9c, 0x8c, 0xf0, 0x76, 0xa8, 0xdb, 0x32, 0x1c, 0x6a, 0xe3,
	0xab, 0xa1, 0xdb, 0x3d, 0xd5, 0xee, 0x2d, 0x36, 0xff, 0xe9, 0x14, 0xec, 0xe5, 0xed, 0xe8, 0xbb,
	0x04, 0x92, 0xae, 0xe9, 0xa5, 0xc1, 0x77, 0xe6, 0xa0, 0xc3, 0x16, 0xce, 0xc5, 0x07, 0xba, 0x60,
	0xc5, 0x53, 0xef, 0xff, 0xf4, 0xc7, 0x27, 0x89, 0x93, 0xf4, 0xb8, 0x1c, 0x6e, 0xe6, 0xe9, 0x67,
	0x04, 0x0e, 0xf8, 0x5d, 0x2f, 0x9d, 0x0b, 0xaf, 0x1f, 0x60, 0xc1, 0x05, 0x69, 0xd8, 0x70, 0x04,
	0x35, 0xcb, 0x41, 0x9d, 0xa6, 0x62, 0x20, 0xa8, 0x1e, 0x9f, 0x4d, 0xbf, 0x20, 0x30, 0xe9, 0x2b,
	0x42, 0x2f, 0x0c, 0xd5, 0xcb, 0x43, 0x36, 0x37, 0x64, 0x34, 0x02, 0xbb, 0xc4, 0x81, 0x49, 0xf4,
	0x42, 0x3c, 0x30, 0x79, 0x03, 0x9d, 0xf5, 0x43, 0xfa, 0x03, 0x81, 0xa7, 0x83, 0x2d, 0x2a, 0xbd,
	0x1c, 0xb1, 0x51, 0x51, 0x9e, 0x58, 0xb8, 0xb2, 0xf3, 0x44, 0xe4, 0xb0, 0xc8, 0x39, 0x5c, 0xa3,
	0x57, 0x82, 0x77, 0xdc, 0x39, 0x66, 0xf2, 0x06, 0xde, 0x95, 0x0f, 0x65, 0xd6, 0x2d, 0x54, 0xf2,
	0xce, 0xf0, 0x13, 0x02, 0x42, 0xb8, 0x65, 0xa5, 0x0b, 0xe1, 0xd0, 0x62, 0x3d, 0xb3, 0xf0, 0xc2,
	0x68, 0xc9, 0xc8, 0xed, 0x55, 0xce, 0x2d, 0x47, 0x17, 0x03, 0xb9, 0x79, 0xd7, 0x9d, 0x25, 0x6f,
	0xf8, 0x2e, 0xc3, 0x60, 0x8e, 0xbf, 0x10, 0x98, 0x0e, 0x75, 0xb5, 0xf4, 0x5a, 0x38, 0xca, 0x38,
	0x4b, 0x2d, 0x2c, 0x8c, 0x94, 0x8b, 0x04, 0x57, 0x39, 0xc1, 0x45, 0xfa, 0x62, 0x20, 0x41, 0xbc,
	0xc6, 0x2c, 0x79, 0xa3, 0x7b, 0xc5, 0x05, 0xd3, 0xfb, 0x8e, 0x00, 0x1d, 0x74, 0xbe, 0xf4, 0x62,
	0xbc, 0xfa, 0x03, 0x56, 0x5b, 0xb8, 0xb4, 0xb3, 0x24, 0x64, 0xf2, 0x12, 0x67, 0x72, 0x95, 0x5e,
	0xde, 0xd1, 0x56, 0x75, 0x6d, 0x34, 0x7d, 0x2f, 0x01, 0x99, 0x18, 0x6b, 0x4b, 0x17, 0xa3, 0x4f,
	0x49, 0xbc, 0xfb, 0x16, 0x96, 0x76, 0x51, 0x01, 0x99, 0xbe, 0xc9, 0x99, 0x16, 0xe9, 0xed, 0xa1,
	0x0e, 0x5c, 0xf0, 0x1e, 0xf2, 0x1b, 0xaf, 0xd4, 0xbd, 0xc6, 0x5c, 0x0b, 0x4d, 0x7f, 0x25, 0x30,
	0x15, 0x68, 0x5c, 0xe9, 0xf3, 0xd1, 0xb8, 0xc3, 0x5c, 0x96, 0x70, 0x79, 0xc7, 0x79, 0xc8, 0xb2,
	0xc8, 0x59, 0xde, 0xa4, 0xaf, 0x05, 0xb2, 0xec, 0x20, 0xb7, 0xe4, 0x8d, 0x81, 0xcb, 0xf8, 0x61,
	0x27, 0xb2, 0x4f, 0x0c, 0xfa, 0x37, 0x81, 0xe9, 0x50, 0x47, 0x1a, 0x75, 0x0a, 0xe3, 0x7c, 0xb5,
	0xb0, 0x30, 0x52, 0x2e, 0x72, 0x7d, 0x9b, 0x73, 0xbd, 0x43, 0x8b, 0xbb, 0xe1, 0x1a, 0x32, 0xe2,
	0xf4, 0x2f, 0x02, 0xa9, 0x30, 0xf7, 0x49, 0xaf, 0xc6, 0x7e, 0x3c, 0x42, 0x19, 0x5f, 0x1b, 0x25,
	0x75, 0xa8, 0x11, 0x1e, 0x92, 0x70, 0xe0, 0x64, 0x3b, 0x97, 0xe3, 0x54, 0xa0, 0x0f, 0x8d, 0x1a,
	0xe1, 0x28, 0x97, 0x1c, 0x35, 0xc2, 0x91, 0x86, 0x57, 0x5c, 0xe6, 0x2c, 0xaf, 0xd3, 0x85, 0x5d,
	0xb0, 0xa4, 0x8f, 0x09, 0xa4, 0xc2, 0x2c, 0x62, 0xd4, 0xf6, 0xc5, 0xb8, 0xd8, 0xa8, 0xed, 0x8b,
	0x73, 0xa4, 0xe2, 0x0d, 0x4e, 0x6c, 0x95, 0xae, 0x8c, 0x42, 0xac, 0xdf, 0xcb, 0xe6, 0x8a, 0x9b,
	0x4f, 0xd2, 0x13, 0x9b, 0x5b, 0x69, 0xf2, 0x68, 0x2b, 0x4d, 0x7e, 0xdf, 0x4a, 0x93, 0x8f, 0xb7,
	0xd3, 0x13, 0x8f, 0xb6, 0xd3, 0x13, 0x3f, 0x6f, 0xa7, 0x27, 0xde, 0x7a, 0xce, 0xf7, 0x7b, 0x80,
	0xd7, 0x6d, 0xae, 0xa6, 0x94, 0xad, 0x6e, 0xef, 0x56, 0x36, 0x2b, 0x3f, 0xe8, 0x20, 0xe0, 0x3f,
	0x11, 0x94, 0x93, 0xfc, 0x07, 0xe3, 0x8b, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x39, 0xc0, 0x8b,
	0xd7, 0x5a, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params defines a gRPC query method that returns the parameters of the
	// module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// RewardsPlans queries all rewards plans.
	RewardsPlans(ctx context.Context, in *QueryRewardsPlansRequest, opts ...grpc.CallOption) (*QueryRewardsPlansResponse, error)
	// RewardsPlan queries a specific rewards plan by its ID.
	RewardsPlan(ctx context.Context, in *QueryRewardsPlanRequest, opts ...grpc.CallOption) (*QueryRewardsPlanResponse, error)
	// PoolOutstandingRewards queries rewards of a pool.
	PoolOutstandingRewards(ctx context.Context, in *QueryPoolOutstandingRewardsRequest, opts ...grpc.CallOption) (*QueryPoolOutstandingRewardsResponse, error)
	// OperatorOutstandingRewards queries rewards of an operator.
	OperatorOutstandingRewards(ctx context.Context, in *QueryOperatorOutstandingRewardsRequest, opts ...grpc.CallOption) (*QueryOperatorOutstandingRewardsResponse, error)
	// ServiceOutstandingRewards queries rewards of a service.
	ServiceOutstandingRewards(ctx context.Context, in *QueryServiceOutstandingRewardsRequest, opts ...grpc.CallOption) (*QueryServiceOutstandingRewardsResponse, error)
	// OperatorCommission queries accumulated commission for an operator.
	OperatorCommission(ctx context.Context, in *QueryOperatorCommissionRequest, opts ...grpc.CallOption) (*QueryOperatorCommissionResponse, error)
	// PoolServiceTotalDelegatorShares queries the total delegator shares for a
	// pool-service pair.
	PoolServiceTotalDelegatorShares(ctx context.Context, in *QueryPoolServiceTotalDelegatorSharesRequest, opts ...grpc.CallOption) (*QueryPoolServiceTotalDelegatorSharesResponse, error)
	// PoolDelegationRewards queries the total rewards accrued by a pool
	// delegation.
	PoolDelegationRewards(ctx context.Context, in *QueryPoolDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryPoolDelegationRewardsResponse, error)
	// OperatorDelegationRewards queries the total rewards accrued by a operator
	// delegation.
	OperatorDelegationRewards(ctx context.Context, in *QueryOperatorDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryOperatorDelegationRewardsResponse, error)
	// ServiceDelegationRewards queries the total rewards accrued by a service
	// delegation.
	ServiceDelegationRewards(ctx context.Context, in *QueryServiceDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryServiceDelegationRewardsResponse, error)
	// DelegatorTotalRewards queries the total rewards accrued by a single
	// delegator
	DelegatorTotalRewards(ctx context.Context, in *QueryDelegatorTotalRewardsRequest, opts ...grpc.CallOption) (*QueryDelegatorTotalRewardsResponse, error)
	// DelegatorWithdrawAddress queries withdraw address of a delegator.
	DelegatorWithdrawAddress(ctx context.Context, in *QueryDelegatorWithdrawAddressRequest, opts ...grpc.CallOption) (*QueryDelegatorWithdrawAddressResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.rewards.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsPlans(ctx context.Context, in *QueryRewardsPlansRequest, opts ...grpc.CallOption) (*QueryRewardsPlansResponse, error) {
	out := new(QueryRewardsPlansResponse)
	err := c.cc.Invoke(ctx, "/milkyway.rewards.v1.Query/RewardsPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsPlan(ctx context.Context, in *QueryRewardsPlanRequest, opts ...grpc.CallOption) (*QueryRewardsPlanResponse, error) {
	out := new(QueryRewardsPlanResponse)
	err := c.cc.Invoke(ctx, "/milkyway.rewards.v1.Query/RewardsPlan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolOutstandingRewards(ctx context.Context, in *QueryPoolOutstandingRewardsRequest, opts ...grpc.CallOption) (*QueryPoolOutstandingRewardsResponse, error) {
	out := new(QueryPoolOutstandingRewardsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.rewards.v1.Query/PoolOutstandingRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorOutstandingRewards(ctx context.Context, in *QueryOperatorOutstandingRewardsRequest, opts ...grpc.CallOption) (*QueryOperatorOutstandingRewardsResponse, error) {
	out := new(QueryOperatorOutstandingRewardsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.rewards.v1.Query/OperatorOutstandingRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceOutstandingRewards(ctx context.Context, in *QueryServiceOutstandingRewardsRequest, opts ...grpc.CallOption) (*QueryServiceOutstandingRewardsResponse, error) {
	out := new(QueryServiceOutstandingRewardsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.rewards.v1.Query/ServiceOutstandingRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorCommission(ctx context.Context, in *QueryOperatorCommissionRequest, opts ...grpc.CallOption) (*QueryOperatorCommissionResponse, error) {
	out := new(QueryOperatorCommissionResponse)
	err := c.cc.Invoke(ctx, "/milkyway.rewards.v1.Query/OperatorCommission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolServiceTotalDelegatorShares(ctx context.Context, in *QueryPoolServiceTotalDelegatorSharesRequest, opts ...grpc.CallOption) (*QueryPoolServiceTotalDelegatorSharesResponse, error) {
	out := new(QueryPoolServiceTotalDelegatorSharesResponse)
	err := c.cc.Invoke(ctx, "/milkyway.rewards.v1.Query/PoolServiceTotalDelegatorShares", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolDelegationRewards(ctx context.Context, in *QueryPoolDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryPoolDelegationRewardsResponse, error) {
	out := new(QueryPoolDelegationRewardsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.rewards.v1.Query/PoolDelegationRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorDelegationRewards(ctx context.Context, in *QueryOperatorDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryOperatorDelegationRewardsResponse, error) {
	out := new(QueryOperatorDelegationRewardsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.rewards.v1.Query/OperatorDelegationRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceDelegationRewards(ctx context.Context, in *QueryServiceDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryServiceDelegationRewardsResponse, error) {
	out := new(QueryServiceDelegationRewardsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.rewards.v1.Query/ServiceDelegationRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorTotalRewards(ctx context.Context, in *QueryDelegatorTotalRewardsRequest, opts ...grpc.CallOption) (*QueryDelegatorTotalRewardsResponse, error) {
	out := new(QueryDelegatorTotalRewardsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.rewards.v1.Query/DelegatorTotalRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorWithdrawAddress(ctx context.Context, in *QueryDelegatorWithdrawAddressRequest, opts ...grpc.CallOption) (*QueryDelegatorWithdrawAddressResponse, error) {
	out := new(QueryDelegatorWithdrawAddressResponse)
	err := c.cc.Invoke(ctx, "/milkyway.rewards.v1.Query/DelegatorWithdrawAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params defines a gRPC query method that returns the parameters of the
	// module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// RewardsPlans queries all rewards plans.
	RewardsPlans(context.Context, *QueryRewardsPlansRequest) (*QueryRewardsPlansResponse, error)
	// RewardsPlan queries a specific rewards plan by its ID.
	RewardsPlan(context.Context, *QueryRewardsPlanRequest) (*QueryRewardsPlanResponse, error)
	// PoolOutstandingRewards queries rewards of a pool.
	PoolOutstandingRewards(context.Context, *QueryPoolOutstandingRewardsRequest) (*QueryPoolOutstandingRewardsResponse, error)
	// OperatorOutstandingRewards queries rewards of an operator.
	OperatorOutstandingRewards(context.Context, *QueryOperatorOutstandingRewardsRequest) (*QueryOperatorOutstandingRewardsResponse, error)
	// ServiceOutstandingRewards queries rewards of a service.
	ServiceOutstandingRewards(context.Context, *QueryServiceOutstandingRewardsRequest) (*QueryServiceOutstandingRewardsResponse, error)
	// OperatorCommission queries accumulated commission for an operator.
	OperatorCommission(context.Context, *QueryOperatorCommissionRequest) (*QueryOperatorCommissionResponse, error)
	// PoolServiceTotalDelegatorShares queries the total delegator shares for a
	// pool-service pair.
	PoolServiceTotalDelegatorShares(context.Context, *QueryPoolServiceTotalDelegatorSharesRequest) (*QueryPoolServiceTotalDelegatorSharesResponse, error)
	// PoolDelegationRewards queries the total rewards accrued by a pool
	// delegation.
	PoolDelegationRewards(context.Context, *QueryPoolDelegationRewardsRequest) (*QueryPoolDelegationRewardsResponse, error)
	// OperatorDelegationRewards queries the total rewards accrued by a operator
	// delegation.
	OperatorDelegationRewards(context.Context, *QueryOperatorDelegationRewardsRequest) (*QueryOperatorDelegationRewardsResponse, error)
	// ServiceDelegationRewards queries the total rewards accrued by a service
	// delegation.
	ServiceDelegationRewards(context.Context, *QueryServiceDelegationRewardsRequest) (*QueryServiceDelegationRewardsResponse, error)
	// DelegatorTotalRewards queries the total rewards accrued by a single
	// delegator
	DelegatorTotalRewards(context.Context, *QueryDelegatorTotalRewardsRequest) (*QueryDelegatorTotalRewardsResponse, error)
	// DelegatorWithdrawAddress queries withdraw address of a delegator.
	DelegatorWithdrawAddress(context.Context, *QueryDelegatorWithdrawAddressRequest) (*QueryDelegatorWithdrawAddressResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) RewardsPlans(ctx context.Context, req *QueryRewardsPlansRequest) (*QueryRewardsPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsPlans not implemented")
}
func (*UnimplementedQueryServer) RewardsPlan(ctx context.Context, req *QueryRewardsPlanRequest) (*QueryRewardsPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsPlan not implemented")
}
func (*UnimplementedQueryServer) PoolOutstandingRewards(ctx context.Context, req *QueryPoolOutstandingRewardsRequest) (*QueryPoolOutstandingRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolOutstandingRewards not implemented")
}
func (*UnimplementedQueryServer) OperatorOutstandingRewards(ctx context.Context, req *QueryOperatorOutstandingRewardsRequest) (*QueryOperatorOutstandingRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorOutstandingRewards not implemented")
}
func (*UnimplementedQueryServer) ServiceOutstandingRewards(ctx context.Context, req *QueryServiceOutstandingRewardsRequest) (*QueryServiceOutstandingRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceOutstandingRewards not implemented")
}
func (*UnimplementedQueryServer) OperatorCommission(ctx context.Context, req *QueryOperatorCommissionRequest) (*QueryOperatorCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorCommission not implemented")
}
func (*UnimplementedQueryServer) PoolServiceTotalDelegatorShares(ctx context.Context, req *QueryPoolServiceTotalDelegatorSharesRequest) (*QueryPoolServiceTotalDelegatorSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolServiceTotalDelegatorShares not implemented")
}
func (*UnimplementedQueryServer) PoolDelegationRewards(ctx context.Context, req *QueryPoolDelegationRewardsRequest) (*QueryPoolDelegationRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolDelegationRewards not implemented")
}
func (*UnimplementedQueryServer) OperatorDelegationRewards(ctx context.Context, req *QueryOperatorDelegationRewardsRequest) (*QueryOperatorDelegationRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorDelegationRewards not implemented")
}
func (*UnimplementedQueryServer) ServiceDelegationRewards(ctx context.Context, req *QueryServiceDelegationRewardsRequest) (*QueryServiceDelegationRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceDelegationRewards not implemented")
}
func (*UnimplementedQueryServer) DelegatorTotalRewards(ctx context.Context, req *QueryDelegatorTotalRewardsRequest) (*QueryDelegatorTotalRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorTotalRewards not implemented")
}
func (*UnimplementedQueryServer) DelegatorWithdrawAddress(ctx context.Context, req *QueryDelegatorWithdrawAddressRequest) (*QueryDelegatorWithdrawAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorWithdrawAddress not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.rewards.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.rewards.v1.Query/RewardsPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsPlans(ctx, req.(*QueryRewardsPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.rewards.v1.Query/RewardsPlan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsPlan(ctx, req.(*QueryRewardsPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolOutstandingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolOutstandingRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolOutstandingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.rewards.v1.Query/PoolOutstandingRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolOutstandingRewards(ctx, req.(*QueryPoolOutstandingRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorOutstandingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorOutstandingRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorOutstandingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.rewards.v1.Query/OperatorOutstandingRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorOutstandingRewards(ctx, req.(*QueryOperatorOutstandingRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceOutstandingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceOutstandingRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceOutstandingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.rewards.v1.Query/ServiceOutstandingRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceOutstandingRewards(ctx, req.(*QueryServiceOutstandingRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.rewards.v1.Query/OperatorCommission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorCommission(ctx, req.(*QueryOperatorCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolServiceTotalDelegatorShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolServiceTotalDelegatorSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolServiceTotalDelegatorShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.rewards.v1.Query/PoolServiceTotalDelegatorShares",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolServiceTotalDelegatorShares(ctx, req.(*QueryPoolServiceTotalDelegatorSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolDelegationRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolDelegationRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolDelegationRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.rewards.v1.Query/PoolDelegationRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolDelegationRewards(ctx, req.(*QueryPoolDelegationRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorDelegationRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorDelegationRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorDelegationRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.rewards.v1.Query/OperatorDelegationRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorDelegationRewards(ctx, req.(*QueryOperatorDelegationRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceDelegationRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceDelegationRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceDelegationRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.rewards.v1.Query/ServiceDelegationRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceDelegationRewards(ctx, req.(*QueryServiceDelegationRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorTotalRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorTotalRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorTotalRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.rewards.v1.Query/DelegatorTotalRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorTotalRewards(ctx, req.(*QueryDelegatorTotalRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorWithdrawAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorWithdrawAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorWithdrawAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.rewards.v1.Query/DelegatorWithdrawAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorWithdrawAddress(ctx, req.(*QueryDelegatorWithdrawAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milkyway.rewards.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "RewardsPlans",
			Handler:    _Query_RewardsPlans_Handler,
		},
		{
			MethodName: "RewardsPlan",
			Handler:    _Query_RewardsPlan_Handler,
		},
		{
			MethodName: "PoolOutstandingRewards",
			Handler:    _Query_PoolOutstandingRewards_Handler,
		},
		{
			MethodName: "OperatorOutstandingRewards",
			Handler:    _Query_OperatorOutstandingRewards_Handler,
		},
		{
			MethodName: "ServiceOutstandingRewards",
			Handler:    _Query_ServiceOutstandingRewards_Handler,
		},
		{
			MethodName: "OperatorCommission",
			Handler:    _Query_OperatorCommission_Handler,
		},
		{
			MethodName: "PoolServiceTotalDelegatorShares",
			Handler:    _Query_PoolServiceTotalDelegatorShares_Handler,
		},
		{
			MethodName: "PoolDelegationRewards",
			Handler:    _Query_PoolDelegationRewards_Handler,
		},
		{
			MethodName: "OperatorDelegationRewards",
			Handler:    _Query_OperatorDelegationRewards_Handler,
		},
		{
			MethodName: "ServiceDelegationRewards",
			Handler:    _Query_ServiceDelegationRewards_Handler,
		},
		{
			MethodName: "DelegatorTotalRewards",
			Handler:    _Query_DelegatorTotalRewards_Handler,
		},
		{
			MethodName: "DelegatorWithdrawAddress",
			Handler:    _Query_DelegatorWithdrawAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milkyway/rewards/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRewardsPlansRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsPlansRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsPlansRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsPlansResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsPlansResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsPlansResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RewardsPlans) > 0 {
		for iNdEx := len(m.RewardsPlans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardsPlans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsPlanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsPlanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsPlanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PlanId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PlanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRewardsPlanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRewardsPlanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRewardsPlanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RewardsPlan.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *QueryPoolOutstandingRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolOutstandingRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolOutstandingRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolOutstandingRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolOutstandingRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolOutstandingRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOperatorOutstandingRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorOutstandingRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorOutstandingRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorOutstandingRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorOutstandingRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorOutstandingRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryServiceOutstandingRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceOutstandingRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceOutstandingRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ServiceId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceOutstandingRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceOutstandingRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceOutstandingRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryOperatorCommissionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorCommissionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorCommissionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorCommissionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorCommissionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorCommissionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Commission.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryPoolServiceTotalDelegatorSharesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolServiceTotalDelegatorSharesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolServiceTotalDelegatorSharesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ServiceId))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolServiceTotalDelegatorSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolServiceTotalDelegatorSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolServiceTotalDelegatorSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolDelegationRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolDelegationRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolDelegationRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPoolDelegationRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPoolDelegationRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPoolDelegationRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorDelegationRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorDelegationRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorDelegationRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OperatorId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOperatorDelegationRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOperatorDelegationRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOperatorDelegationRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceDelegationRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceDelegationRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceDelegationRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ServiceId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ServiceId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryServiceDelegationRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryServiceDelegationRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryServiceDelegationRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorTotalRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorTotalRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorTotalRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorTotalRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorTotalRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorTotalRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Total) > 0 {
		for iNdEx := len(m.Total) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Total[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Rewards) > 0 {
		for iNdEx := len(m.Rewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Rewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorWithdrawAddressRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorWithdrawAddressRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorWithdrawAddressRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDelegatorWithdrawAddressResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDelegatorWithdrawAddressResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDelegatorWithdrawAddressResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawAddress) > 0 {
		i -= len(m.WithdrawAddress)
		copy(dAtA[i:], m.WithdrawAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.WithdrawAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRewardsPlansRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsPlansResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RewardsPlans) > 0 {
		for _, e := range m.RewardsPlans {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRewardsPlanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PlanId != 0 {
		n += 1 + sovQuery(uint64(m.PlanId))
	}
	return n
}

func (m *QueryRewardsPlanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RewardsPlan.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolOutstandingRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryPoolOutstandingRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rewards.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOperatorOutstandingRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovQuery(uint64(m.OperatorId))
	}
	return n
}

func (m *QueryOperatorOutstandingRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rewards.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryServiceOutstandingRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceId != 0 {
		n += 1 + sovQuery(uint64(m.ServiceId))
	}
	return n
}

func (m *QueryServiceOutstandingRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Rewards.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryOperatorCommissionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovQuery(uint64(m.OperatorId))
	}
	return n
}

func (m *QueryOperatorCommissionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Commission.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryPoolServiceTotalDelegatorSharesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.ServiceId != 0 {
		n += 1 + sovQuery(uint64(m.ServiceId))
	}
	return n
}

func (m *QueryPoolServiceTotalDelegatorSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPoolDelegationRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryPoolDelegationRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryOperatorDelegationRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.OperatorId != 0 {
		n += 1 + sovQuery(uint64(m.OperatorId))
	}
	return n
}

func (m *QueryOperatorDelegationRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryServiceDelegationRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ServiceId != 0 {
		n += 1 + sovQuery(uint64(m.ServiceId))
	}
	return n
}

func (m *QueryServiceDelegationRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDelegatorTotalRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorTotalRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rewards) > 0 {
		for _, e := range m.Rewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Total) > 0 {
		for _, e := range m.Total {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDelegatorWithdrawAddressRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDelegatorWithdrawAddressResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WithdrawAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsPlansRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsPlansRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsPlansRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsPlansResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsPlansResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsPlansResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPlans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsPlans = append(m.RewardsPlans, RewardsPlan{})
			if err := m.RewardsPlans[len(m.RewardsPlans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsPlanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsPlanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsPlanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlanId", wireType)
			}
			m.PlanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRewardsPlanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRewardsPlanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRewardsPlanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPlan", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RewardsPlan.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolOutstandingRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolOutstandingRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolOutstandingRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolOutstandingRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolOutstandingRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolOutstandingRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorOutstandingRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorOutstandingRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorOutstandingRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorOutstandingRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorOutstandingRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorOutstandingRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceOutstandingRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceOutstandingRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceOutstandingRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			m.ServiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceOutstandingRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceOutstandingRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceOutstandingRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorCommissionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorCommissionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorCommissionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorCommissionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorCommissionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorCommissionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commission", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Commission.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolServiceTotalDelegatorSharesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolServiceTotalDelegatorSharesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolServiceTotalDelegatorSharesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			m.ServiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolServiceTotalDelegatorSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolServiceTotalDelegatorSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolServiceTotalDelegatorSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, types.DecCoin{})
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolDelegationRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolDelegationRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolDelegationRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPoolDelegationRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPoolDelegationRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPoolDelegationRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, DecPool{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorDelegationRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorDelegationRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorDelegationRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOperatorDelegationRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOperatorDelegationRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOperatorDelegationRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, DecPool{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceDelegationRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceDelegationRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceDelegationRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceId", wireType)
			}
			m.ServiceId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryServiceDelegationRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryServiceDelegationRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryServiceDelegationRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, DecPool{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorTotalRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorTotalRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorTotalRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorTotalRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorTotalRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorTotalRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rewards = append(m.Rewards, DelegationDelegatorReward{})
			if err := m.Rewards[len(m.Rewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = append(m.Total, DecPool{})
			if err := m.Total[len(m.Total)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorWithdrawAddressRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorWithdrawAddressRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorWithdrawAddressRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDelegatorWithdrawAddressResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDelegatorWithdrawAddressResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDelegatorWithdrawAddressResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
