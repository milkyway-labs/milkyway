// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/rewards/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DelegatorWithdrawInfo is the address for where distributions rewards are
// withdrawn to by default this struct is only used at genesis to feed in
// default withdraw addresses.
type DelegatorWithdrawInfo struct {
	// delegator_address is the address of the delegator.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// withdraw_address is the address to withdraw the delegation rewards to.
	WithdrawAddress string `protobuf:"bytes,2,opt,name=withdraw_address,json=withdrawAddress,proto3" json:"withdraw_address,omitempty"`
}

func (m *DelegatorWithdrawInfo) Reset()         { *m = DelegatorWithdrawInfo{} }
func (m *DelegatorWithdrawInfo) String() string { return proto.CompactTextString(m) }
func (*DelegatorWithdrawInfo) ProtoMessage()    {}
func (*DelegatorWithdrawInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{0}
}
func (m *DelegatorWithdrawInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorWithdrawInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorWithdrawInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorWithdrawInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorWithdrawInfo.Merge(m, src)
}
func (m *DelegatorWithdrawInfo) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorWithdrawInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorWithdrawInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorWithdrawInfo proto.InternalMessageInfo

// PoolOutstandingRewardsRecord is used for import/export via genesis json.
type PoolOutstandingRewardsRecord struct {
	// pool_id is the ID of the pool.
	PoolID uint32 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// outstanding_rewards represents the outstanding rewards of a pool.
	OutstandingRewards github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,2,rep,name=outstanding_rewards,json=outstandingRewards,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"outstanding_rewards"`
}

func (m *PoolOutstandingRewardsRecord) Reset()         { *m = PoolOutstandingRewardsRecord{} }
func (m *PoolOutstandingRewardsRecord) String() string { return proto.CompactTextString(m) }
func (*PoolOutstandingRewardsRecord) ProtoMessage()    {}
func (*PoolOutstandingRewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{1}
}
func (m *PoolOutstandingRewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolOutstandingRewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolOutstandingRewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolOutstandingRewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolOutstandingRewardsRecord.Merge(m, src)
}
func (m *PoolOutstandingRewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *PoolOutstandingRewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolOutstandingRewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PoolOutstandingRewardsRecord proto.InternalMessageInfo

// PoolHistoricalRewardsRecord is used for import / export via genesis
// json.
type PoolHistoricalRewardsRecord struct {
	// pool_id is the ID of the pool.
	PoolID uint32 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// period defines the period the historical rewards apply to.
	Period uint64 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	// rewards defines the historical rewards of a pool.
	Rewards HistoricalRewards `protobuf:"bytes,3,opt,name=rewards,proto3" json:"rewards"`
}

func (m *PoolHistoricalRewardsRecord) Reset()         { *m = PoolHistoricalRewardsRecord{} }
func (m *PoolHistoricalRewardsRecord) String() string { return proto.CompactTextString(m) }
func (*PoolHistoricalRewardsRecord) ProtoMessage()    {}
func (*PoolHistoricalRewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{2}
}
func (m *PoolHistoricalRewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolHistoricalRewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolHistoricalRewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolHistoricalRewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolHistoricalRewardsRecord.Merge(m, src)
}
func (m *PoolHistoricalRewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *PoolHistoricalRewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolHistoricalRewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PoolHistoricalRewardsRecord proto.InternalMessageInfo

// PoolCurrentRewardsRecord is used for import / export via genesis json.
type PoolCurrentRewardsRecord struct {
	// pool_id is the ID of the pool.
	PoolID uint32 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// rewards defines the current rewards of a pool.
	Rewards CurrentRewards `protobuf:"bytes,2,opt,name=rewards,proto3" json:"rewards"`
}

func (m *PoolCurrentRewardsRecord) Reset()         { *m = PoolCurrentRewardsRecord{} }
func (m *PoolCurrentRewardsRecord) String() string { return proto.CompactTextString(m) }
func (*PoolCurrentRewardsRecord) ProtoMessage()    {}
func (*PoolCurrentRewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{3}
}
func (m *PoolCurrentRewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolCurrentRewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolCurrentRewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolCurrentRewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolCurrentRewardsRecord.Merge(m, src)
}
func (m *PoolCurrentRewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *PoolCurrentRewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolCurrentRewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PoolCurrentRewardsRecord proto.InternalMessageInfo

// PoolDelegatorStartingInfoRecord used for import / export via genesis json.
type PoolDelegatorStartingInfoRecord struct {
	// delegator_address is the address of the delegator.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// pool_id is the ID of the pool.
	PoolID uint32 `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// starting_info defines the starting info of a delegator.
	StartingInfo DelegatorStartingInfo `protobuf:"bytes,3,opt,name=starting_info,json=startingInfo,proto3" json:"starting_info"`
}

func (m *PoolDelegatorStartingInfoRecord) Reset()         { *m = PoolDelegatorStartingInfoRecord{} }
func (m *PoolDelegatorStartingInfoRecord) String() string { return proto.CompactTextString(m) }
func (*PoolDelegatorStartingInfoRecord) ProtoMessage()    {}
func (*PoolDelegatorStartingInfoRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{4}
}
func (m *PoolDelegatorStartingInfoRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolDelegatorStartingInfoRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolDelegatorStartingInfoRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolDelegatorStartingInfoRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolDelegatorStartingInfoRecord.Merge(m, src)
}
func (m *PoolDelegatorStartingInfoRecord) XXX_Size() int {
	return m.Size()
}
func (m *PoolDelegatorStartingInfoRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolDelegatorStartingInfoRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PoolDelegatorStartingInfoRecord proto.InternalMessageInfo

// OperatorOutstandingRewardsRecord is used for import/export via genesis json.
type OperatorOutstandingRewardsRecord struct {
	// operator_id is the ID of the operator.
	OperatorID uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// outstanding_rewards represents the outstanding rewards of an operator.
	OutstandingRewards DecPools `protobuf:"bytes,2,rep,name=outstanding_rewards,json=outstandingRewards,proto3,castrepeated=DecPools" json:"outstanding_rewards"`
}

func (m *OperatorOutstandingRewardsRecord) Reset()         { *m = OperatorOutstandingRewardsRecord{} }
func (m *OperatorOutstandingRewardsRecord) String() string { return proto.CompactTextString(m) }
func (*OperatorOutstandingRewardsRecord) ProtoMessage()    {}
func (*OperatorOutstandingRewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{5}
}
func (m *OperatorOutstandingRewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorOutstandingRewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorOutstandingRewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorOutstandingRewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorOutstandingRewardsRecord.Merge(m, src)
}
func (m *OperatorOutstandingRewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *OperatorOutstandingRewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorOutstandingRewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorOutstandingRewardsRecord proto.InternalMessageInfo

type OperatorAccumulatedCommissionRecord struct {
	OperatorId uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// accumulated is the accumulated commission of an operator.
	Accumulated MultiAccumulatedCommission `protobuf:"bytes,2,opt,name=accumulated,proto3" json:"accumulated"`
}

func (m *OperatorAccumulatedCommissionRecord) Reset()         { *m = OperatorAccumulatedCommissionRecord{} }
func (m *OperatorAccumulatedCommissionRecord) String() string { return proto.CompactTextString(m) }
func (*OperatorAccumulatedCommissionRecord) ProtoMessage()    {}
func (*OperatorAccumulatedCommissionRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{6}
}
func (m *OperatorAccumulatedCommissionRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorAccumulatedCommissionRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorAccumulatedCommissionRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorAccumulatedCommissionRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorAccumulatedCommissionRecord.Merge(m, src)
}
func (m *OperatorAccumulatedCommissionRecord) XXX_Size() int {
	return m.Size()
}
func (m *OperatorAccumulatedCommissionRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorAccumulatedCommissionRecord.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorAccumulatedCommissionRecord proto.InternalMessageInfo

// OperatorHistoricalRewardsRecord is used for import / export via genesis
// json.
type OperatorHistoricalRewardsRecord struct {
	// operator_id is the ID of the operator.
	OperatorID uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// period defines the period the historical rewards apply to.
	Period uint64 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	// rewards defines the historical rewards of an operator.
	Rewards MultiHistoricalRewards `protobuf:"bytes,3,opt,name=rewards,proto3" json:"rewards"`
}

func (m *OperatorHistoricalRewardsRecord) Reset()         { *m = OperatorHistoricalRewardsRecord{} }
func (m *OperatorHistoricalRewardsRecord) String() string { return proto.CompactTextString(m) }
func (*OperatorHistoricalRewardsRecord) ProtoMessage()    {}
func (*OperatorHistoricalRewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{7}
}
func (m *OperatorHistoricalRewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorHistoricalRewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorHistoricalRewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorHistoricalRewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorHistoricalRewardsRecord.Merge(m, src)
}
func (m *OperatorHistoricalRewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *OperatorHistoricalRewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorHistoricalRewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorHistoricalRewardsRecord proto.InternalMessageInfo

// OperatorCurrentRewardsRecord is used for import / export via genesis json.
type OperatorCurrentRewardsRecord struct {
	// operator_id is the ID of the operator.
	OperatorID uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// rewards defines the current rewards of an operator.
	Rewards MultiCurrentRewards `protobuf:"bytes,2,opt,name=rewards,proto3" json:"rewards"`
}

func (m *OperatorCurrentRewardsRecord) Reset()         { *m = OperatorCurrentRewardsRecord{} }
func (m *OperatorCurrentRewardsRecord) String() string { return proto.CompactTextString(m) }
func (*OperatorCurrentRewardsRecord) ProtoMessage()    {}
func (*OperatorCurrentRewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{8}
}
func (m *OperatorCurrentRewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorCurrentRewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorCurrentRewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorCurrentRewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorCurrentRewardsRecord.Merge(m, src)
}
func (m *OperatorCurrentRewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *OperatorCurrentRewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorCurrentRewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorCurrentRewardsRecord proto.InternalMessageInfo

// OperatorDelegatorStartingInfoRecord used for import / export via genesis
// json.
type OperatorDelegatorStartingInfoRecord struct {
	// delegator_address is the address of the delegator.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// operator_id is the ID of the operator.
	OperatorID uint32 `protobuf:"varint,2,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// starting_info defines the starting info of a delegator.
	StartingInfo MultiDelegatorStartingInfo `protobuf:"bytes,3,opt,name=starting_info,json=startingInfo,proto3" json:"starting_info"`
}

func (m *OperatorDelegatorStartingInfoRecord) Reset()         { *m = OperatorDelegatorStartingInfoRecord{} }
func (m *OperatorDelegatorStartingInfoRecord) String() string { return proto.CompactTextString(m) }
func (*OperatorDelegatorStartingInfoRecord) ProtoMessage()    {}
func (*OperatorDelegatorStartingInfoRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{9}
}
func (m *OperatorDelegatorStartingInfoRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorDelegatorStartingInfoRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorDelegatorStartingInfoRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorDelegatorStartingInfoRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorDelegatorStartingInfoRecord.Merge(m, src)
}
func (m *OperatorDelegatorStartingInfoRecord) XXX_Size() int {
	return m.Size()
}
func (m *OperatorDelegatorStartingInfoRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorDelegatorStartingInfoRecord.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorDelegatorStartingInfoRecord proto.InternalMessageInfo

// ServiceOutstandingRewardsRecord is used for import/export via genesis json.
type ServiceOutstandingRewardsRecord struct {
	// service_id is the ID of the service.
	ServiceID uint32 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// outstanding_rewards represents the outstanding rewards of a service.
	OutstandingRewards DecPools `protobuf:"bytes,2,rep,name=outstanding_rewards,json=outstandingRewards,proto3,castrepeated=DecPools" json:"outstanding_rewards"`
}

func (m *ServiceOutstandingRewardsRecord) Reset()         { *m = ServiceOutstandingRewardsRecord{} }
func (m *ServiceOutstandingRewardsRecord) String() string { return proto.CompactTextString(m) }
func (*ServiceOutstandingRewardsRecord) ProtoMessage()    {}
func (*ServiceOutstandingRewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{10}
}
func (m *ServiceOutstandingRewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceOutstandingRewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceOutstandingRewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceOutstandingRewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceOutstandingRewardsRecord.Merge(m, src)
}
func (m *ServiceOutstandingRewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *ServiceOutstandingRewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceOutstandingRewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceOutstandingRewardsRecord proto.InternalMessageInfo

// ServiceHistoricalRewardsRecord is used for import / export via genesis
// json.
type ServiceHistoricalRewardsRecord struct {
	// service_id is the ID of the service.
	ServiceID uint32 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// period defines the period the historical rewards apply to.
	Period uint64 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	// rewards defines the historical rewards of a service.
	Rewards MultiHistoricalRewards `protobuf:"bytes,3,opt,name=rewards,proto3" json:"rewards"`
}

func (m *ServiceHistoricalRewardsRecord) Reset()         { *m = ServiceHistoricalRewardsRecord{} }
func (m *ServiceHistoricalRewardsRecord) String() string { return proto.CompactTextString(m) }
func (*ServiceHistoricalRewardsRecord) ProtoMessage()    {}
func (*ServiceHistoricalRewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{11}
}
func (m *ServiceHistoricalRewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceHistoricalRewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceHistoricalRewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceHistoricalRewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceHistoricalRewardsRecord.Merge(m, src)
}
func (m *ServiceHistoricalRewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *ServiceHistoricalRewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceHistoricalRewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceHistoricalRewardsRecord proto.InternalMessageInfo

// ServiceCurrentRewardsRecord is used for import / export via genesis json.
type ServiceCurrentRewardsRecord struct {
	// service_id is the ID of the service.
	ServiceID uint32 `protobuf:"varint,1,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// rewards defines the current rewards of a service.
	Rewards MultiCurrentRewards `protobuf:"bytes,2,opt,name=rewards,proto3" json:"rewards"`
}

func (m *ServiceCurrentRewardsRecord) Reset()         { *m = ServiceCurrentRewardsRecord{} }
func (m *ServiceCurrentRewardsRecord) String() string { return proto.CompactTextString(m) }
func (*ServiceCurrentRewardsRecord) ProtoMessage()    {}
func (*ServiceCurrentRewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{12}
}
func (m *ServiceCurrentRewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceCurrentRewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceCurrentRewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceCurrentRewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceCurrentRewardsRecord.Merge(m, src)
}
func (m *ServiceCurrentRewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *ServiceCurrentRewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceCurrentRewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceCurrentRewardsRecord proto.InternalMessageInfo

// ServiceDelegatorStartingInfoRecord used for import / export via genesis json.
type ServiceDelegatorStartingInfoRecord struct {
	// delegator_address is the address of the delegator.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// service_id is the ID of the service.
	ServiceID uint32 `protobuf:"varint,2,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// starting_info defines the starting info of a delegator.
	StartingInfo MultiDelegatorStartingInfo `protobuf:"bytes,3,opt,name=starting_info,json=startingInfo,proto3" json:"starting_info"`
}

func (m *ServiceDelegatorStartingInfoRecord) Reset()         { *m = ServiceDelegatorStartingInfoRecord{} }
func (m *ServiceDelegatorStartingInfoRecord) String() string { return proto.CompactTextString(m) }
func (*ServiceDelegatorStartingInfoRecord) ProtoMessage()    {}
func (*ServiceDelegatorStartingInfoRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{13}
}
func (m *ServiceDelegatorStartingInfoRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ServiceDelegatorStartingInfoRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ServiceDelegatorStartingInfoRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ServiceDelegatorStartingInfoRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ServiceDelegatorStartingInfoRecord.Merge(m, src)
}
func (m *ServiceDelegatorStartingInfoRecord) XXX_Size() int {
	return m.Size()
}
func (m *ServiceDelegatorStartingInfoRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ServiceDelegatorStartingInfoRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ServiceDelegatorStartingInfoRecord proto.InternalMessageInfo

// GenesisState defines the module's genesis state.
type GenesisState struct {
	// Params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// NextRewardsPlanID represents the id to be used when creating the next
	// rewards plan.
	NextRewardsPlanID uint64 `protobuf:"varint,2,opt,name=next_rewards_plan_id,json=nextRewardsPlanId,proto3" json:"next_rewards_plan_id,omitempty"`
	// RewardsPlans defines the list of rewards plans.
	RewardsPlans              []RewardsPlan `protobuf:"bytes,3,rep,name=rewards_plans,json=rewardsPlans,proto3" json:"rewards_plans"`
	LastRewardsAllocationTime *time.Time    `protobuf:"bytes,4,opt,name=last_rewards_allocation_time,json=lastRewardsAllocationTime,proto3,stdtime" json:"last_rewards_allocation_time,omitempty"`
	// delegator_withdraw_infos defines the delegator withdraw infos at genesis.
	DelegatorWithdrawInfos []DelegatorWithdrawInfo `protobuf:"bytes,5,rep,name=delegator_withdraw_infos,json=delegatorWithdrawInfos,proto3" json:"delegator_withdraw_infos"`
	// pool_outstanding_rewards defines the outstanding rewards of all pools at
	// genesis.
	PoolOutstandingRewards []PoolOutstandingRewardsRecord `protobuf:"bytes,6,rep,name=pool_outstanding_rewards,json=poolOutstandingRewards,proto3" json:"pool_outstanding_rewards"`
	// pool_historical_rewards defines the historical rewards of all pools at
	// genesis.
	PoolHistoricalRewards []PoolHistoricalRewardsRecord `protobuf:"bytes,7,rep,name=pool_historical_rewards,json=poolHistoricalRewards,proto3" json:"pool_historical_rewards"`
	// pool_current_rewards defines the current rewards of all pools at genesis.
	PoolCurrentRewards []PoolCurrentRewardsRecord `protobuf:"bytes,8,rep,name=pool_current_rewards,json=poolCurrentRewards,proto3" json:"pool_current_rewards"`
	// pool_delegator_starting_infos defines the delegator starting infos of all
	// pools at genesis.
	PoolDelegatorStartingInfos []PoolDelegatorStartingInfoRecord `protobuf:"bytes,9,rep,name=pool_delegator_starting_infos,json=poolDelegatorStartingInfos,proto3" json:"pool_delegator_starting_infos"`
	// operator_outstanding_rewards defines the outstanding rewards of all
	// operators at genesis.
	OperatorOutstandingRewards []OperatorOutstandingRewardsRecord `protobuf:"bytes,10,rep,name=operator_outstanding_rewards,json=operatorOutstandingRewards,proto3" json:"operator_outstanding_rewards"`
	// operator_accumulated_commissions defines the accumulated commissions of all
	// operators at genesis.
	OperatorAccumulatedCommissions []OperatorAccumulatedCommissionRecord `protobuf:"bytes,11,rep,name=operator_accumulated_commissions,json=operatorAccumulatedCommissions,proto3" json:"operator_accumulated_commissions"`
	// operator_historical_rewards defines the historical rewards of all operators
	// at genesis.
	OperatorHistoricalRewards []OperatorHistoricalRewardsRecord `protobuf:"bytes,12,rep,name=operator_historical_rewards,json=operatorHistoricalRewards,proto3" json:"operator_historical_rewards"`
	// operator_current_rewards defines the current rewards of all operators at
	// genesis.
	OperatorCurrentRewards []OperatorCurrentRewardsRecord `protobuf:"bytes,13,rep,name=operator_current_rewards,json=operatorCurrentRewards,proto3" json:"operator_current_rewards"`
	// operator_delegator_starting_infos defines the delegator starting infos of
	// all operators at genesis.
	OperatorDelegatorStartingInfos []OperatorDelegatorStartingInfoRecord `protobuf:"bytes,14,rep,name=operator_delegator_starting_infos,json=operatorDelegatorStartingInfos,proto3" json:"operator_delegator_starting_infos"`
	// service_outstanding_rewards defines the outstanding rewards of all services
	// at genesis.
	ServiceOutstandingRewards []ServiceOutstandingRewardsRecord `protobuf:"bytes,15,rep,name=service_outstanding_rewards,json=serviceOutstandingRewards,proto3" json:"service_outstanding_rewards"`
	// service_historical_rewards defines the historical rewards of all services
	// at genesis.
	ServiceHistoricalRewards []ServiceHistoricalRewardsRecord `protobuf:"bytes,16,rep,name=service_historical_rewards,json=serviceHistoricalRewards,proto3" json:"service_historical_rewards"`
	// service_current_rewards defines the current rewards of all services at
	// genesis.
	ServiceCurrentRewards []ServiceCurrentRewardsRecord `protobuf:"bytes,17,rep,name=service_current_rewards,json=serviceCurrentRewards,proto3" json:"service_current_rewards"`
	// service_delegator_starting_infos defines the delegator starting infos of
	// all services at genesis.
	ServiceDelegatorStartingInfos []ServiceDelegatorStartingInfoRecord `protobuf:"bytes,18,rep,name=service_delegator_starting_infos,json=serviceDelegatorStartingInfos,proto3" json:"service_delegator_starting_infos"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{14}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetNextRewardsPlanID() uint64 {
	if m != nil {
		return m.NextRewardsPlanID
	}
	return 0
}

func (m *GenesisState) GetRewardsPlans() []RewardsPlan {
	if m != nil {
		return m.RewardsPlans
	}
	return nil
}

func (m *GenesisState) GetLastRewardsAllocationTime() *time.Time {
	if m != nil {
		return m.LastRewardsAllocationTime
	}
	return nil
}

func (m *GenesisState) GetDelegatorWithdrawInfos() []DelegatorWithdrawInfo {
	if m != nil {
		return m.DelegatorWithdrawInfos
	}
	return nil
}

func (m *GenesisState) GetPoolOutstandingRewards() []PoolOutstandingRewardsRecord {
	if m != nil {
		return m.PoolOutstandingRewards
	}
	return nil
}

func (m *GenesisState) GetPoolHistoricalRewards() []PoolHistoricalRewardsRecord {
	if m != nil {
		return m.PoolHistoricalRewards
	}
	return nil
}

func (m *GenesisState) GetPoolCurrentRewards() []PoolCurrentRewardsRecord {
	if m != nil {
		return m.PoolCurrentRewards
	}
	return nil
}

func (m *GenesisState) GetPoolDelegatorStartingInfos() []PoolDelegatorStartingInfoRecord {
	if m != nil {
		return m.PoolDelegatorStartingInfos
	}
	return nil
}

func (m *GenesisState) GetOperatorOutstandingRewards() []OperatorOutstandingRewardsRecord {
	if m != nil {
		return m.OperatorOutstandingRewards
	}
	return nil
}

func (m *GenesisState) GetOperatorAccumulatedCommissions() []OperatorAccumulatedCommissionRecord {
	if m != nil {
		return m.OperatorAccumulatedCommissions
	}
	return nil
}

func (m *GenesisState) GetOperatorHistoricalRewards() []OperatorHistoricalRewardsRecord {
	if m != nil {
		return m.OperatorHistoricalRewards
	}
	return nil
}

func (m *GenesisState) GetOperatorCurrentRewards() []OperatorCurrentRewardsRecord {
	if m != nil {
		return m.OperatorCurrentRewards
	}
	return nil
}

func (m *GenesisState) GetOperatorDelegatorStartingInfos() []OperatorDelegatorStartingInfoRecord {
	if m != nil {
		return m.OperatorDelegatorStartingInfos
	}
	return nil
}

func (m *GenesisState) GetServiceOutstandingRewards() []ServiceOutstandingRewardsRecord {
	if m != nil {
		return m.ServiceOutstandingRewards
	}
	return nil
}

func (m *GenesisState) GetServiceHistoricalRewards() []ServiceHistoricalRewardsRecord {
	if m != nil {
		return m.ServiceHistoricalRewards
	}
	return nil
}

func (m *GenesisState) GetServiceCurrentRewards() []ServiceCurrentRewardsRecord {
	if m != nil {
		return m.ServiceCurrentRewards
	}
	return nil
}

func (m *GenesisState) GetServiceDelegatorStartingInfos() []ServiceDelegatorStartingInfoRecord {
	if m != nil {
		return m.ServiceDelegatorStartingInfos
	}
	return nil
}

func init() {
	proto.RegisterType((*DelegatorWithdrawInfo)(nil), "milkyway.rewards.v1.DelegatorWithdrawInfo")
	proto.RegisterType((*PoolOutstandingRewardsRecord)(nil), "milkyway.rewards.v1.PoolOutstandingRewardsRecord")
	proto.RegisterType((*PoolHistoricalRewardsRecord)(nil), "milkyway.rewards.v1.PoolHistoricalRewardsRecord")
	proto.RegisterType((*PoolCurrentRewardsRecord)(nil), "milkyway.rewards.v1.PoolCurrentRewardsRecord")
	proto.RegisterType((*PoolDelegatorStartingInfoRecord)(nil), "milkyway.rewards.v1.PoolDelegatorStartingInfoRecord")
	proto.RegisterType((*OperatorOutstandingRewardsRecord)(nil), "milkyway.rewards.v1.OperatorOutstandingRewardsRecord")
	proto.RegisterType((*OperatorAccumulatedCommissionRecord)(nil), "milkyway.rewards.v1.OperatorAccumulatedCommissionRecord")
	proto.RegisterType((*OperatorHistoricalRewardsRecord)(nil), "milkyway.rewards.v1.OperatorHistoricalRewardsRecord")
	proto.RegisterType((*OperatorCurrentRewardsRecord)(nil), "milkyway.rewards.v1.OperatorCurrentRewardsRecord")
	proto.RegisterType((*OperatorDelegatorStartingInfoRecord)(nil), "milkyway.rewards.v1.OperatorDelegatorStartingInfoRecord")
	proto.RegisterType((*ServiceOutstandingRewardsRecord)(nil), "milkyway.rewards.v1.ServiceOutstandingRewardsRecord")
	proto.RegisterType((*ServiceHistoricalRewardsRecord)(nil), "milkyway.rewards.v1.ServiceHistoricalRewardsRecord")
	proto.RegisterType((*ServiceCurrentRewardsRecord)(nil), "milkyway.rewards.v1.ServiceCurrentRewardsRecord")
	proto.RegisterType((*ServiceDelegatorStartingInfoRecord)(nil), "milkyway.rewards.v1.ServiceDelegatorStartingInfoRecord")
	proto.RegisterType((*GenesisState)(nil), "milkyway.rewards.v1.GenesisState")
}

func init() { proto.RegisterFile("milkyway/rewards/v1/genesis.proto", fileDescriptor_95f74caade7824f2) }

var fileDescriptor_95f74caade7824f2 = []byte{
	// 1321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xdf, 0x6b, 0x1c, 0x45,
	0x1c, 0xbf, 0xb9, 0xc6, 0x6b, 0x33, 0x97, 0xb4, 0xc9, 0x34, 0xa9, 0xd7, 0x24, 0xbd, 0xbd, 0x36,
	0x20, 0xa1, 0x35, 0xbb, 0x5e, 0xaa, 0x58, 0x7d, 0xcb, 0xe5, 0xd4, 0x1e, 0xa5, 0x36, 0x5c, 0x04,
	0xa1, 0x08, 0xc7, 0xdc, 0xee, 0xe4, 0xb2, 0x76, 0x6f, 0x67, 0xd9, 0xd9, 0xcb, 0x0f, 0x10, 0x0a,
	0x22, 0x58, 0x10, 0xa5, 0xe0, 0x3f, 0xd0, 0x07, 0x1f, 0x8a, 0xa0, 0x58, 0xf0, 0x5d, 0x50, 0x90,
	0x3e, 0x16, 0x5f, 0xf4, 0x29, 0x95, 0xcb, 0x83, 0xbe, 0xfb, 0x0f, 0xc8, 0xce, 0xce, 0xee, 0xed,
	0x5d, 0x66, 0xf7, 0x72, 0x41, 0xd3, 0x97, 0x36, 0x3b, 0xf3, 0x99, 0xf9, 0x7c, 0xbe, 0xfb, 0xfd,
	0x7e, 0xe6, 0xbe, 0xb3, 0xf0, 0x72, 0xdb, 0xb4, 0xee, 0xed, 0xed, 0xe0, 0x3d, 0xcd, 0x25, 0x3b,
	0xd8, 0x35, 0x98, 0xb6, 0x5d, 0xd6, 0x5a, 0xc4, 0x26, 0xcc, 0x64, 0xaa, 0xe3, 0x52, 0x8f, 0xa2,
	0xf3, 0x21, 0x44, 0x15, 0x10, 0x75, 0xbb, 0x3c, 0x37, 0x8d, 0xdb, 0xa6, 0x4d, 0x35, 0xfe, 0x6f,
	0x80, 0x9b, 0xbb, 0xa8, 0x53, 0xd6, 0xa6, 0xac, 0xc1, 0x9f, 0xb4, 0xe0, 0x41, 0x4c, 0x15, 0x83,
	0x27, 0xad, 0x89, 0x19, 0xd1, 0xb6, 0xcb, 0x4d, 0xe2, 0xe1, 0xb2, 0xa6, 0x53, 0xd3, 0x16, 0xf3,
	0x4a, 0x8b, 0xd2, 0x96, 0x45, 0x34, 0xfe, 0xd4, 0xec, 0x6c, 0x6a, 0x9e, 0xd9, 0x26, 0xcc, 0xc3,
	0x6d, 0x47, 0x00, 0x66, 0x5a, 0xb4, 0x45, 0x83, 0x8d, 0xfd, 0xbf, 0xc4, 0x68, 0x49, 0x26, 0xde,
	0xc1, 0x2e, 0x6e, 0xb3, 0x34, 0x44, 0x9b, 0x1a, 0xc4, 0x12, 0x88, 0x2b, 0xdf, 0x01, 0x38, 0x5b,
	0x25, 0x16, 0x69, 0x61, 0x8f, 0xba, 0x1f, 0x9a, 0xde, 0x96, 0xe1, 0xe2, 0x9d, 0x9a, 0xbd, 0x49,
	0xd1, 0x3b, 0x70, 0xda, 0x08, 0x27, 0x1a, 0xd8, 0x30, 0x5c, 0xc2, 0x58, 0x01, 0x94, 0xc0, 0xd2,
	0x78, 0xa5, 0xf0, 0xdb, 0x8f, 0xcb, 0x33, 0x22, 0xc2, 0xd5, 0x60, 0x66, 0xc3, 0x73, 0x4d, 0xbb,
	0x55, 0x9f, 0x8a, 0x96, 0x88, 0x71, 0xb4, 0x06, 0xa7, 0x76, 0xc4, 0xb6, 0xd1, 0x2e, 0xd9, 0x21,
	0xbb, 0x9c, 0x0b, 0x57, 0x88, 0xe1, 0xb7, 0xcf, 0x3c, 0x78, 0xa4, 0x64, 0xfe, 0x7e, 0xa4, 0x64,
	0xae, 0xfc, 0x0e, 0xe0, 0xc2, 0x3a, 0xa5, 0xd6, 0x9d, 0x8e, 0xc7, 0x3c, 0x6c, 0x1b, 0x3e, 0x3c,
	0x08, 0xad, 0x4e, 0x74, 0xea, 0x1a, 0x68, 0x11, 0x9e, 0x76, 0x28, 0xb5, 0x1a, 0xa6, 0xc1, 0xc5,
	0x4e, 0x56, 0x60, 0x77, 0x5f, 0xc9, 0xf9, 0x4b, 0x6a, 0xd5, 0x7a, 0xce, 0x9f, 0xaa, 0x19, 0xe8,
	0x73, 0x00, 0xcf, 0xd3, 0xde, 0x0e, 0x0d, 0xf1, 0x76, 0x0a, 0xd9, 0xd2, 0xa9, 0xa5, 0xfc, 0xca,
	0x82, 0x2a, 0x54, 0xf9, 0xf9, 0x52, 0x45, 0xbe, 0xd4, 0x2a, 0xd1, 0xd7, 0xa8, 0x69, 0x57, 0x6e,
	0x3c, 0xdd, 0x57, 0x32, 0xdf, 0x3e, 0x57, 0xae, 0xb5, 0x4c, 0x6f, 0xab, 0xd3, 0x54, 0x75, 0xda,
	0x16, 0xd9, 0x16, 0xff, 0x2d, 0x33, 0xe3, 0x9e, 0xe6, 0xed, 0x39, 0x84, 0x85, 0x6b, 0xd8, 0xe3,
	0xbf, 0x7e, 0xb8, 0x0a, 0xea, 0x88, 0x1e, 0x12, 0x1d, 0x8b, 0xec, 0x09, 0x80, 0xf3, 0xbe, 0xcc,
	0x9b, 0x26, 0xf3, 0xa8, 0x6b, 0xea, 0xd8, 0x3a, 0x46, 0x60, 0x17, 0x60, 0xce, 0x21, 0xae, 0x49,
	0x0d, 0xfe, 0x8e, 0xc7, 0xea, 0xe2, 0x09, 0xdd, 0x82, 0xa7, 0xc3, 0x18, 0x4f, 0x95, 0xc0, 0x52,
	0x7e, 0xe5, 0x15, 0x55, 0x52, 0xd6, 0xea, 0x21, 0xee, 0xca, 0xb8, 0x1f, 0x6d, 0x20, 0x3f, 0xdc,
	0x21, 0xa6, 0xf9, 0x6b, 0x00, 0x0b, 0xbe, 0x82, 0xb5, 0x8e, 0xeb, 0x12, 0xdb, 0x3b, 0x86, 0xe0,
	0x9b, 0x3d, 0x61, 0x59, 0x2e, 0x6c, 0x51, 0x2a, 0xac, 0x9f, 0x60, 0x88, 0xaa, 0x7f, 0x00, 0x54,
	0x7c, 0x9a, 0xa8, 0xae, 0x37, 0x3c, 0xec, 0x7a, 0xa6, 0xdd, 0xf2, 0xeb, 0x5a, 0x88, 0xfb, 0x8f,
	0xaa, 0x3b, 0x16, 0x63, 0x36, 0x31, 0xc6, 0xbb, 0x70, 0x92, 0x09, 0x05, 0x0d, 0xd3, 0xde, 0xa4,
	0x22, 0x05, 0x57, 0xa5, 0x91, 0x4a, 0x45, 0xc7, 0x03, 0x9e, 0x60, 0xb1, 0x89, 0x58, 0xd4, 0xbf,
	0x00, 0x58, 0xba, 0xe3, 0x10, 0xd7, 0x5f, 0x9b, 0xe8, 0x0e, 0x0d, 0xe6, 0xa9, 0xc0, 0xf4, 0xf2,
	0x72, 0xb6, 0xbb, 0xaf, 0xc0, 0x70, 0x69, 0xad, 0x5a, 0x87, 0x21, 0xa4, 0x66, 0x20, 0x23, 0xdd,
	0x28, 0xf2, 0x08, 0x74, 0xff, 0x05, 0x54, 0x66, 0x85, 0x51, 0xce, 0x88, 0x81, 0x23, 0xb9, 0xe0,
	0x7b, 0x00, 0x17, 0x43, 0x29, 0xab, 0xba, 0xde, 0x69, 0x77, 0x2c, 0xec, 0x11, 0x63, 0x8d, 0xb6,
	0xdb, 0x26, 0x63, 0x26, 0xb5, 0x45, 0x20, 0x8a, 0x24, 0x90, 0x3e, 0xe1, 0x1f, 0xc1, 0x3c, 0xee,
	0xad, 0x17, 0xc5, 0xa5, 0x49, 0x05, 0xdf, 0xee, 0x58, 0x9e, 0x29, 0x25, 0x8b, 0xbf, 0xf7, 0xf8,
	0x76, 0x31, 0xc1, 0xbf, 0x02, 0xa8, 0x84, 0x82, 0x93, 0xac, 0x3b, 0xf2, 0x5b, 0x4f, 0xb2, 0xf1,
	0xfa, 0xa0, 0x8d, 0xaf, 0x25, 0x07, 0x34, 0xaa, 0x97, 0x1f, 0x03, 0xb8, 0x10, 0xca, 0x91, 0xfa,
	0x79, 0xe4, 0x28, 0x6e, 0x0f, 0x7a, 0x7b, 0x29, 0x59, 0xed, 0x48, 0x06, 0x7f, 0x90, 0xed, 0x15,
	0xc9, 0x09, 0x98, 0x7c, 0x20, 0xf0, 0xec, 0xd0, 0xc0, 0x1b, 0x72, 0xc3, 0xa7, 0x54, 0xdf, 0xb1,
	0x5d, 0xff, 0x13, 0x80, 0xca, 0x06, 0x71, 0xb7, 0x4d, 0x9d, 0x24, 0x9a, 0xfe, 0x55, 0x08, 0x59,
	0x00, 0xe9, 0xe5, 0x6d, 0xb2, 0xbb, 0xaf, 0x8c, 0x8b, 0x85, 0xb5, 0x6a, 0x7d, 0x5c, 0x00, 0x5e,
	0x80, 0xe3, 0x7f, 0x06, 0xb0, 0x28, 0x84, 0x24, 0xf9, 0x67, 0xb4, 0x00, 0x5e, 0x84, 0x79, 0xbe,
	0x01, 0x70, 0x5e, 0x88, 0x91, 0x7a, 0x67, 0xb4, 0x08, 0xfe, 0x37, 0xe3, 0x7c, 0x96, 0x85, 0x57,
	0x04, 0xe3, 0x09, 0xf8, 0xa6, 0x3f, 0xe8, 0xec, 0x90, 0xa0, 0x4f, 0xd0, 0x34, 0x4f, 0xa6, 0xe0,
	0xc4, 0x7b, 0x41, 0x93, 0xbf, 0xe1, 0x61, 0x8f, 0xa0, 0xb7, 0x60, 0x2e, 0xe8, 0x9b, 0x79, 0x94,
	0xf9, 0x95, 0x79, 0x29, 0xe9, 0x3a, 0x87, 0x54, 0xc6, 0x7c, 0x82, 0xba, 0x58, 0x80, 0xde, 0x85,
	0x33, 0x36, 0xd9, 0xf5, 0x42, 0x9f, 0x34, 0x1c, 0x0b, 0xdb, 0x61, 0xb8, 0x63, 0x95, 0xd9, 0xee,
	0xbe, 0x32, 0xfd, 0x3e, 0xd9, 0x0d, 0xf3, 0xb3, 0x6e, 0x61, 0xbb, 0x56, 0xad, 0x4f, 0xdb, 0x03,
	0x43, 0x7e, 0x87, 0x36, 0x19, 0xdf, 0xc2, 0xaf, 0x51, 0xdf, 0x70, 0x25, 0xa9, 0x92, 0xd8, 0x52,
	0x21, 0x67, 0xc2, 0xed, 0x0d, 0x31, 0x84, 0xe1, 0x82, 0x85, 0x59, 0x4f, 0x14, 0xb6, 0x2c, 0xaa,
	0x63, 0xcf, 0xa4, 0x76, 0xc3, 0xbf, 0x5a, 0x14, 0xc6, 0x78, 0x94, 0x73, 0x6a, 0x70, 0xef, 0x50,
	0xc3, 0x7b, 0x87, 0xfa, 0x41, 0x78, 0xef, 0xa8, 0x8c, 0x3d, 0x7c, 0xae, 0x80, 0xfa, 0x45, 0x7f,
	0x17, 0x41, 0xb6, 0x1a, 0xed, 0xe1, 0xa3, 0x10, 0x85, 0x85, 0x5e, 0x8d, 0x44, 0x1d, 0xbe, 0x9f,
	0x38, 0x56, 0x78, 0x89, 0x4b, 0x1f, 0xd2, 0xdf, 0xc4, 0x2f, 0x1b, 0xf1, 0xa4, 0x5d, 0x30, 0x64,
	0x08, 0x86, 0xb6, 0x61, 0x81, 0xb7, 0x5a, 0xb2, 0xc3, 0x29, 0xc7, 0x09, 0xcb, 0xf2, 0xac, 0xa5,
	0xdc, 0x16, 0xfa, 0x78, 0x1d, 0x29, 0x10, 0x31, 0xf8, 0x32, 0xe7, 0xdd, 0x8a, 0x8e, 0x84, 0x88,
	0xf6, 0x34, 0xa7, 0x7d, 0x2d, 0x91, 0x36, 0xe1, 0x3c, 0x8b, 0xb3, 0xce, 0x3a, 0x32, 0x1c, 0xfa,
	0x18, 0xce, 0x70, 0x52, 0x3d, 0x70, 0x77, 0xc4, 0x78, 0x86, 0x33, 0x2e, 0x27, 0x32, 0xca, 0x0e,
	0x9f, 0x38, 0x1d, 0x72, 0x0e, 0x81, 0xd0, 0xa7, 0x00, 0x5e, 0xe2, 0x64, 0xbd, 0x7c, 0xf6, 0x19,
	0x91, 0x15, 0xc6, 0x39, 0xeb, 0xeb, 0x89, 0xac, 0x29, 0x67, 0x49, 0x9c, 0x7c, 0xce, 0x49, 0xc2,
	0x72, 0x11, 0x0b, 0xd1, 0x8f, 0xac, 0x2c, 0xc5, 0x90, 0x6b, 0x78, 0x43, 0xaa, 0x61, 0x58, 0xdb,
	0xdb, 0x27, 0x82, 0x26, 0x82, 0xd1, 0x97, 0x00, 0x96, 0x22, 0x11, 0xb1, 0x76, 0xaf, 0xa1, 0x47,
	0x1d, 0x21, 0x2b, 0xe4, 0xb9, 0x90, 0x1b, 0xa9, 0x42, 0x52, 0x3a, 0xd7, 0xb8, 0x96, 0x22, 0x4d,
	0xc3, 0x33, 0x74, 0x1f, 0xce, 0x47, 0x72, 0x24, 0xe5, 0x37, 0x91, 0x92, 0x96, 0x21, 0x2d, 0x69,
	0x5c, 0xc5, 0x45, 0x9a, 0x84, 0xf5, 0x3d, 0x17, 0x09, 0x18, 0x2c, 0xc5, 0xc9, 0x14, 0xcf, 0xa5,
	0xf5, 0x91, 0x7d, 0x9e, 0xa3, 0x52, 0x20, 0xfa, 0x0a, 0xc0, 0xcb, 0x11, 0x71, 0x62, 0x59, 0x9e,
	0x3d, 0x42, 0x26, 0x8e, 0x58, 0x9a, 0x51, 0x26, 0x12, 0xca, 0xf3, 0x3e, 0x9c, 0x0f, 0x7f, 0xca,
	0x64, 0xc5, 0x79, 0x2e, 0x25, 0x13, 0x43, 0xba, 0xb3, 0xbe, 0x4c, 0xb0, 0x24, 0x2c, 0xfa, 0x04,
	0xce, 0x85, 0x02, 0x24, 0x95, 0x30, 0xc5, 0xf9, 0xaf, 0xa7, 0xf1, 0x1f, 0xa1, 0x10, 0x0a, 0x2c,
	0x01, 0xea, 0x9f, 0x81, 0x21, 0xfb, 0x60, 0x19, 0x4c, 0xa7, 0x9c, 0x81, 0x29, 0x1d, 0x51, 0xdf,
	0x19, 0xc8, 0x64, 0x38, 0xf4, 0x05, 0x80, 0xa5, 0x90, 0x35, 0xb1, 0x06, 0x10, 0xa7, 0x7f, 0x33,
	0x8d, 0xfe, 0x88, 0x25, 0x70, 0x89, 0xa5, 0xc0, 0x59, 0xe5, 0xd6, 0xd3, 0x6e, 0x11, 0x3c, 0xeb,
	0x16, 0xc1, 0x9f, 0xdd, 0x22, 0x78, 0x78, 0x50, 0xcc, 0x3c, 0x3b, 0x28, 0x66, 0xfe, 0x38, 0x28,
	0x66, 0xee, 0x96, 0x63, 0x1f, 0x82, 0x42, 0x19, 0xcb, 0x16, 0x6e, 0xb2, 0xe8, 0x49, 0xdb, 0x8d,
	0xbe, 0xbf, 0xf1, 0xef, 0x42, 0xcd, 0x1c, 0xff, 0xc5, 0xbd, 0xfe, 0x6f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x4b, 0xa3, 0x13, 0x14, 0x7f, 0x14, 0x00, 0x00,
}

func (m *DelegatorWithdrawInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorWithdrawInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorWithdrawInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawAddress) > 0 {
		i -= len(m.WithdrawAddress)
		copy(dAtA[i:], m.WithdrawAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.WithdrawAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolOutstandingRewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolOutstandingRewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolOutstandingRewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutstandingRewards) > 0 {
		for iNdEx := len(m.OutstandingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutstandingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.PoolID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolHistoricalRewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolHistoricalRewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolHistoricalRewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Period != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolCurrentRewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolCurrentRewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolCurrentRewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.PoolID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolDelegatorStartingInfoRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolDelegatorStartingInfoRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolDelegatorStartingInfoRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StartingInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.PoolID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PoolID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OperatorOutstandingRewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorOutstandingRewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorOutstandingRewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutstandingRewards) > 0 {
		for iNdEx := len(m.OutstandingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutstandingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.OperatorID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OperatorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperatorAccumulatedCommissionRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorAccumulatedCommissionRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorAccumulatedCommissionRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Accumulated.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.OperatorId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperatorHistoricalRewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorHistoricalRewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorHistoricalRewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Period != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if m.OperatorID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OperatorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperatorCurrentRewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorCurrentRewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorCurrentRewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.OperatorID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OperatorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OperatorDelegatorStartingInfoRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorDelegatorStartingInfoRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorDelegatorStartingInfoRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StartingInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.OperatorID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OperatorID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ServiceOutstandingRewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceOutstandingRewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceOutstandingRewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutstandingRewards) > 0 {
		for iNdEx := len(m.OutstandingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutstandingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ServiceID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServiceHistoricalRewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceHistoricalRewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceHistoricalRewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Period != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if m.ServiceID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServiceCurrentRewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceCurrentRewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceCurrentRewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.ServiceID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ServiceDelegatorStartingInfoRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ServiceDelegatorStartingInfoRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ServiceDelegatorStartingInfoRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StartingInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.ServiceID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ServiceDelegatorStartingInfos) > 0 {
		for iNdEx := len(m.ServiceDelegatorStartingInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceDelegatorStartingInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
	}
	if len(m.ServiceCurrentRewards) > 0 {
		for iNdEx := len(m.ServiceCurrentRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceCurrentRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
	}
	if len(m.ServiceHistoricalRewards) > 0 {
		for iNdEx := len(m.ServiceHistoricalRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceHistoricalRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.ServiceOutstandingRewards) > 0 {
		for iNdEx := len(m.ServiceOutstandingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ServiceOutstandingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x7a
		}
	}
	if len(m.OperatorDelegatorStartingInfos) > 0 {
		for iNdEx := len(m.OperatorDelegatorStartingInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorDelegatorStartingInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.OperatorCurrentRewards) > 0 {
		for iNdEx := len(m.OperatorCurrentRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorCurrentRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.OperatorHistoricalRewards) > 0 {
		for iNdEx := len(m.OperatorHistoricalRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorHistoricalRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.OperatorAccumulatedCommissions) > 0 {
		for iNdEx := len(m.OperatorAccumulatedCommissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorAccumulatedCommissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.OperatorOutstandingRewards) > 0 {
		for iNdEx := len(m.OperatorOutstandingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorOutstandingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.PoolDelegatorStartingInfos) > 0 {
		for iNdEx := len(m.PoolDelegatorStartingInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolDelegatorStartingInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.PoolCurrentRewards) > 0 {
		for iNdEx := len(m.PoolCurrentRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolCurrentRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.PoolHistoricalRewards) > 0 {
		for iNdEx := len(m.PoolHistoricalRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolHistoricalRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.PoolOutstandingRewards) > 0 {
		for iNdEx := len(m.PoolOutstandingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolOutstandingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.DelegatorWithdrawInfos) > 0 {
		for iNdEx := len(m.DelegatorWithdrawInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegatorWithdrawInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.LastRewardsAllocationTime != nil {
		n11, err11 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.LastRewardsAllocationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastRewardsAllocationTime):])
		if err11 != nil {
			return 0, err11
		}
		i -= n11
		i = encodeVarintGenesis(dAtA, i, uint64(n11))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RewardsPlans) > 0 {
		for iNdEx := len(m.RewardsPlans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardsPlans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NextRewardsPlanID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextRewardsPlanID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegatorWithdrawInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.WithdrawAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *PoolOutstandingRewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovGenesis(uint64(m.PoolID))
	}
	if len(m.OutstandingRewards) > 0 {
		for _, e := range m.OutstandingRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *PoolHistoricalRewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovGenesis(uint64(m.PoolID))
	}
	if m.Period != 0 {
		n += 1 + sovGenesis(uint64(m.Period))
	}
	l = m.Rewards.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *PoolCurrentRewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolID != 0 {
		n += 1 + sovGenesis(uint64(m.PoolID))
	}
	l = m.Rewards.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *PoolDelegatorStartingInfoRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.PoolID != 0 {
		n += 1 + sovGenesis(uint64(m.PoolID))
	}
	l = m.StartingInfo.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *OperatorOutstandingRewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorID != 0 {
		n += 1 + sovGenesis(uint64(m.OperatorID))
	}
	if len(m.OutstandingRewards) > 0 {
		for _, e := range m.OutstandingRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *OperatorAccumulatedCommissionRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorId != 0 {
		n += 1 + sovGenesis(uint64(m.OperatorId))
	}
	l = m.Accumulated.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *OperatorHistoricalRewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorID != 0 {
		n += 1 + sovGenesis(uint64(m.OperatorID))
	}
	if m.Period != 0 {
		n += 1 + sovGenesis(uint64(m.Period))
	}
	l = m.Rewards.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *OperatorCurrentRewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorID != 0 {
		n += 1 + sovGenesis(uint64(m.OperatorID))
	}
	l = m.Rewards.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *OperatorDelegatorStartingInfoRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.OperatorID != 0 {
		n += 1 + sovGenesis(uint64(m.OperatorID))
	}
	l = m.StartingInfo.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *ServiceOutstandingRewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceID != 0 {
		n += 1 + sovGenesis(uint64(m.ServiceID))
	}
	if len(m.OutstandingRewards) > 0 {
		for _, e := range m.OutstandingRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *ServiceHistoricalRewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceID != 0 {
		n += 1 + sovGenesis(uint64(m.ServiceID))
	}
	if m.Period != 0 {
		n += 1 + sovGenesis(uint64(m.Period))
	}
	l = m.Rewards.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *ServiceCurrentRewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ServiceID != 0 {
		n += 1 + sovGenesis(uint64(m.ServiceID))
	}
	l = m.Rewards.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *ServiceDelegatorStartingInfoRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.ServiceID != 0 {
		n += 1 + sovGenesis(uint64(m.ServiceID))
	}
	l = m.StartingInfo.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.NextRewardsPlanID != 0 {
		n += 1 + sovGenesis(uint64(m.NextRewardsPlanID))
	}
	if len(m.RewardsPlans) > 0 {
		for _, e := range m.RewardsPlans {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.LastRewardsAllocationTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastRewardsAllocationTime)
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.DelegatorWithdrawInfos) > 0 {
		for _, e := range m.DelegatorWithdrawInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PoolOutstandingRewards) > 0 {
		for _, e := range m.PoolOutstandingRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PoolHistoricalRewards) > 0 {
		for _, e := range m.PoolHistoricalRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PoolCurrentRewards) > 0 {
		for _, e := range m.PoolCurrentRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PoolDelegatorStartingInfos) > 0 {
		for _, e := range m.PoolDelegatorStartingInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OperatorOutstandingRewards) > 0 {
		for _, e := range m.OperatorOutstandingRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OperatorAccumulatedCommissions) > 0 {
		for _, e := range m.OperatorAccumulatedCommissions {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OperatorHistoricalRewards) > 0 {
		for _, e := range m.OperatorHistoricalRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OperatorCurrentRewards) > 0 {
		for _, e := range m.OperatorCurrentRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.OperatorDelegatorStartingInfos) > 0 {
		for _, e := range m.OperatorDelegatorStartingInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ServiceOutstandingRewards) > 0 {
		for _, e := range m.ServiceOutstandingRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ServiceHistoricalRewards) > 0 {
		for _, e := range m.ServiceHistoricalRewards {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ServiceCurrentRewards) > 0 {
		for _, e := range m.ServiceCurrentRewards {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.ServiceDelegatorStartingInfos) > 0 {
		for _, e := range m.ServiceDelegatorStartingInfos {
			l = e.Size()
			n += 2 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegatorWithdrawInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorWithdrawInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorWithdrawInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolOutstandingRewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolOutstandingRewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolOutstandingRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutstandingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutstandingRewards = append(m.OutstandingRewards, types.DecCoin{})
			if err := m.OutstandingRewards[len(m.OutstandingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolHistoricalRewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolHistoricalRewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolHistoricalRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolCurrentRewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolCurrentRewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolCurrentRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolDelegatorStartingInfoRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolDelegatorStartingInfoRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolDelegatorStartingInfoRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolID", wireType)
			}
			m.PoolID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorOutstandingRewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorOutstandingRewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorOutstandingRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorID", wireType)
			}
			m.OperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutstandingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutstandingRewards = append(m.OutstandingRewards, DecPool{})
			if err := m.OutstandingRewards[len(m.OutstandingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorAccumulatedCommissionRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorAccumulatedCommissionRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorAccumulatedCommissionRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accumulated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Accumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorHistoricalRewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorHistoricalRewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorHistoricalRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorID", wireType)
			}
			m.OperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorCurrentRewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorCurrentRewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorCurrentRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorID", wireType)
			}
			m.OperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorDelegatorStartingInfoRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorDelegatorStartingInfoRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorDelegatorStartingInfoRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorID", wireType)
			}
			m.OperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceOutstandingRewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceOutstandingRewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceOutstandingRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutstandingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutstandingRewards = append(m.OutstandingRewards, DecPool{})
			if err := m.OutstandingRewards[len(m.OutstandingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceHistoricalRewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceHistoricalRewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceHistoricalRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceCurrentRewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceCurrentRewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceCurrentRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ServiceDelegatorStartingInfoRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ServiceDelegatorStartingInfoRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ServiceDelegatorStartingInfoRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRewardsPlanID", wireType)
			}
			m.NextRewardsPlanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRewardsPlanID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPlans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsPlans = append(m.RewardsPlans, RewardsPlan{})
			if err := m.RewardsPlans[len(m.RewardsPlans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRewardsAllocationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastRewardsAllocationTime == nil {
				m.LastRewardsAllocationTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.LastRewardsAllocationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorWithdrawInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorWithdrawInfos = append(m.DelegatorWithdrawInfos, DelegatorWithdrawInfo{})
			if err := m.DelegatorWithdrawInfos[len(m.DelegatorWithdrawInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolOutstandingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolOutstandingRewards = append(m.PoolOutstandingRewards, PoolOutstandingRewardsRecord{})
			if err := m.PoolOutstandingRewards[len(m.PoolOutstandingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolHistoricalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolHistoricalRewards = append(m.PoolHistoricalRewards, PoolHistoricalRewardsRecord{})
			if err := m.PoolHistoricalRewards[len(m.PoolHistoricalRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCurrentRewards = append(m.PoolCurrentRewards, PoolCurrentRewardsRecord{})
			if err := m.PoolCurrentRewards[len(m.PoolCurrentRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolDelegatorStartingInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolDelegatorStartingInfos = append(m.PoolDelegatorStartingInfos, PoolDelegatorStartingInfoRecord{})
			if err := m.PoolDelegatorStartingInfos[len(m.PoolDelegatorStartingInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorOutstandingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorOutstandingRewards = append(m.OperatorOutstandingRewards, OperatorOutstandingRewardsRecord{})
			if err := m.OperatorOutstandingRewards[len(m.OperatorOutstandingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccumulatedCommissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccumulatedCommissions = append(m.OperatorAccumulatedCommissions, OperatorAccumulatedCommissionRecord{})
			if err := m.OperatorAccumulatedCommissions[len(m.OperatorAccumulatedCommissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorHistoricalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorHistoricalRewards = append(m.OperatorHistoricalRewards, OperatorHistoricalRewardsRecord{})
			if err := m.OperatorHistoricalRewards[len(m.OperatorHistoricalRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorCurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorCurrentRewards = append(m.OperatorCurrentRewards, OperatorCurrentRewardsRecord{})
			if err := m.OperatorCurrentRewards[len(m.OperatorCurrentRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorDelegatorStartingInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorDelegatorStartingInfos = append(m.OperatorDelegatorStartingInfos, OperatorDelegatorStartingInfoRecord{})
			if err := m.OperatorDelegatorStartingInfos[len(m.OperatorDelegatorStartingInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceOutstandingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceOutstandingRewards = append(m.ServiceOutstandingRewards, ServiceOutstandingRewardsRecord{})
			if err := m.ServiceOutstandingRewards[len(m.ServiceOutstandingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceHistoricalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceHistoricalRewards = append(m.ServiceHistoricalRewards, ServiceHistoricalRewardsRecord{})
			if err := m.ServiceHistoricalRewards[len(m.ServiceHistoricalRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceCurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceCurrentRewards = append(m.ServiceCurrentRewards, ServiceCurrentRewardsRecord{})
			if err := m.ServiceCurrentRewards[len(m.ServiceCurrentRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceDelegatorStartingInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceDelegatorStartingInfos = append(m.ServiceDelegatorStartingInfos, ServiceDelegatorStartingInfoRecord{})
			if err := m.ServiceDelegatorStartingInfos[len(m.ServiceDelegatorStartingInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
