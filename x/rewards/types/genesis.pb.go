// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/rewards/v1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// DelegatorWithdrawInfo is the address for where distributions rewards are
// withdrawn to by default this struct is only used at genesis to feed in
// default withdraw addresses.
type DelegatorWithdrawInfo struct {
	// delegator_address is the address of the delegator.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// withdraw_address is the address to withdraw the delegation rewards to.
	WithdrawAddress string `protobuf:"bytes,2,opt,name=withdraw_address,json=withdrawAddress,proto3" json:"withdraw_address,omitempty"`
}

func (m *DelegatorWithdrawInfo) Reset()         { *m = DelegatorWithdrawInfo{} }
func (m *DelegatorWithdrawInfo) String() string { return proto.CompactTextString(m) }
func (*DelegatorWithdrawInfo) ProtoMessage()    {}
func (*DelegatorWithdrawInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{0}
}
func (m *DelegatorWithdrawInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorWithdrawInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorWithdrawInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorWithdrawInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorWithdrawInfo.Merge(m, src)
}
func (m *DelegatorWithdrawInfo) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorWithdrawInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorWithdrawInfo.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorWithdrawInfo proto.InternalMessageInfo

// OutstandingRewardsRecord is used for import/export via genesis json.
type OutstandingRewardsRecord struct {
	// delegation_target_id is the ID of the delegation target.
	DelegationTargetID uint32 `protobuf:"varint,1,opt,name=delegation_target_id,json=delegationTargetId,proto3" json:"delegation_target_id,omitempty"`
	// outstanding_rewards represents the outstanding rewards of the delegation
	// target.
	OutstandingRewards DecPools `protobuf:"bytes,2,rep,name=outstanding_rewards,json=outstandingRewards,proto3,castrepeated=DecPools" json:"outstanding_rewards"`
}

func (m *OutstandingRewardsRecord) Reset()         { *m = OutstandingRewardsRecord{} }
func (m *OutstandingRewardsRecord) String() string { return proto.CompactTextString(m) }
func (*OutstandingRewardsRecord) ProtoMessage()    {}
func (*OutstandingRewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{1}
}
func (m *OutstandingRewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutstandingRewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutstandingRewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutstandingRewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutstandingRewardsRecord.Merge(m, src)
}
func (m *OutstandingRewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *OutstandingRewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_OutstandingRewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_OutstandingRewardsRecord proto.InternalMessageInfo

// HistoricalRewardsRecord is used for import / export via genesis
// json.
type HistoricalRewardsRecord struct {
	// delegation_target_id is the ID of the delegation target.
	DelegationTargetID uint32 `protobuf:"varint,1,opt,name=delegation_target_id,json=delegationTargetId,proto3" json:"delegation_target_id,omitempty"`
	// period defines the period the historical rewards apply to.
	Period uint64 `protobuf:"varint,2,opt,name=period,proto3" json:"period,omitempty"`
	// rewards defines the historical rewards of the delegation target.
	Rewards HistoricalRewards `protobuf:"bytes,3,opt,name=rewards,proto3" json:"rewards"`
}

func (m *HistoricalRewardsRecord) Reset()         { *m = HistoricalRewardsRecord{} }
func (m *HistoricalRewardsRecord) String() string { return proto.CompactTextString(m) }
func (*HistoricalRewardsRecord) ProtoMessage()    {}
func (*HistoricalRewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{2}
}
func (m *HistoricalRewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HistoricalRewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HistoricalRewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HistoricalRewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HistoricalRewardsRecord.Merge(m, src)
}
func (m *HistoricalRewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *HistoricalRewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_HistoricalRewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_HistoricalRewardsRecord proto.InternalMessageInfo

// CurrentRewardsRecord is used for import / export via genesis json.
type CurrentRewardsRecord struct {
	// delegation_target_id is the ID of the delegation target.
	DelegationTargetID uint32 `protobuf:"varint,1,opt,name=delegation_target_id,json=delegationTargetId,proto3" json:"delegation_target_id,omitempty"`
	// rewards defines the current rewards of the delegation target.
	Rewards CurrentRewards `protobuf:"bytes,2,opt,name=rewards,proto3" json:"rewards"`
}

func (m *CurrentRewardsRecord) Reset()         { *m = CurrentRewardsRecord{} }
func (m *CurrentRewardsRecord) String() string { return proto.CompactTextString(m) }
func (*CurrentRewardsRecord) ProtoMessage()    {}
func (*CurrentRewardsRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{3}
}
func (m *CurrentRewardsRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CurrentRewardsRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CurrentRewardsRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CurrentRewardsRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CurrentRewardsRecord.Merge(m, src)
}
func (m *CurrentRewardsRecord) XXX_Size() int {
	return m.Size()
}
func (m *CurrentRewardsRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_CurrentRewardsRecord.DiscardUnknown(m)
}

var xxx_messageInfo_CurrentRewardsRecord proto.InternalMessageInfo

// DelegatorStartingInfoRecord used for import / export via genesis json.
type DelegatorStartingInfoRecord struct {
	// delegator_address is the address of the delegator.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// delegation_target_id is the ID of the delegation target.
	DelegationTargetID uint32 `protobuf:"varint,2,opt,name=delegation_target_id,json=delegationTargetId,proto3" json:"delegation_target_id,omitempty"`
	// starting_info defines the starting info of a delegator.
	StartingInfo DelegatorStartingInfo `protobuf:"bytes,3,opt,name=starting_info,json=startingInfo,proto3" json:"starting_info"`
}

func (m *DelegatorStartingInfoRecord) Reset()         { *m = DelegatorStartingInfoRecord{} }
func (m *DelegatorStartingInfoRecord) String() string { return proto.CompactTextString(m) }
func (*DelegatorStartingInfoRecord) ProtoMessage()    {}
func (*DelegatorStartingInfoRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{4}
}
func (m *DelegatorStartingInfoRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegatorStartingInfoRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegatorStartingInfoRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegatorStartingInfoRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegatorStartingInfoRecord.Merge(m, src)
}
func (m *DelegatorStartingInfoRecord) XXX_Size() int {
	return m.Size()
}
func (m *DelegatorStartingInfoRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegatorStartingInfoRecord.DiscardUnknown(m)
}

var xxx_messageInfo_DelegatorStartingInfoRecord proto.InternalMessageInfo

type OperatorAccumulatedCommissionRecord struct {
	OperatorID uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	// accumulated is the accumulated commission of an operator.
	Accumulated AccumulatedCommission `protobuf:"bytes,2,opt,name=accumulated,proto3" json:"accumulated"`
}

func (m *OperatorAccumulatedCommissionRecord) Reset()         { *m = OperatorAccumulatedCommissionRecord{} }
func (m *OperatorAccumulatedCommissionRecord) String() string { return proto.CompactTextString(m) }
func (*OperatorAccumulatedCommissionRecord) ProtoMessage()    {}
func (*OperatorAccumulatedCommissionRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{5}
}
func (m *OperatorAccumulatedCommissionRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OperatorAccumulatedCommissionRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OperatorAccumulatedCommissionRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OperatorAccumulatedCommissionRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OperatorAccumulatedCommissionRecord.Merge(m, src)
}
func (m *OperatorAccumulatedCommissionRecord) XXX_Size() int {
	return m.Size()
}
func (m *OperatorAccumulatedCommissionRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_OperatorAccumulatedCommissionRecord.DiscardUnknown(m)
}

var xxx_messageInfo_OperatorAccumulatedCommissionRecord proto.InternalMessageInfo

// DelegationTypeRecords groups various genesis records under the same type
// of delegation target.
type DelegationTypeRecords struct {
	// outstanding_rewards defines the outstanding rewards of all delegation
	// targets with the same delegation type at genesis.
	OutstandingRewards []OutstandingRewardsRecord `protobuf:"bytes,1,rep,name=outstanding_rewards,json=outstandingRewards,proto3" json:"outstanding_rewards"`
	// historical_rewards defines the historical rewards of all delegation targets
	// with the same delegation type at genesis.
	HistoricalRewards []HistoricalRewardsRecord `protobuf:"bytes,2,rep,name=historical_rewards,json=historicalRewards,proto3" json:"historical_rewards"`
	// current_rewards defines the current rewards of all delegation targets with
	// the same delegation type at genesis.
	CurrentRewards []CurrentRewardsRecord `protobuf:"bytes,3,rep,name=current_rewards,json=currentRewards,proto3" json:"current_rewards"`
	// delegator_starting_infos defines the delegator starting infos of all
	// delegation targets with the same delegation type at genesis.
	DelegatorStartingInfos []DelegatorStartingInfoRecord `protobuf:"bytes,4,rep,name=delegator_starting_infos,json=delegatorStartingInfos,proto3" json:"delegator_starting_infos"`
}

func (m *DelegationTypeRecords) Reset()         { *m = DelegationTypeRecords{} }
func (m *DelegationTypeRecords) String() string { return proto.CompactTextString(m) }
func (*DelegationTypeRecords) ProtoMessage()    {}
func (*DelegationTypeRecords) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{6}
}
func (m *DelegationTypeRecords) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelegationTypeRecords) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelegationTypeRecords.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelegationTypeRecords) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelegationTypeRecords.Merge(m, src)
}
func (m *DelegationTypeRecords) XXX_Size() int {
	return m.Size()
}
func (m *DelegationTypeRecords) XXX_DiscardUnknown() {
	xxx_messageInfo_DelegationTypeRecords.DiscardUnknown(m)
}

var xxx_messageInfo_DelegationTypeRecords proto.InternalMessageInfo

func (m *DelegationTypeRecords) GetOutstandingRewards() []OutstandingRewardsRecord {
	if m != nil {
		return m.OutstandingRewards
	}
	return nil
}

func (m *DelegationTypeRecords) GetHistoricalRewards() []HistoricalRewardsRecord {
	if m != nil {
		return m.HistoricalRewards
	}
	return nil
}

func (m *DelegationTypeRecords) GetCurrentRewards() []CurrentRewardsRecord {
	if m != nil {
		return m.CurrentRewards
	}
	return nil
}

func (m *DelegationTypeRecords) GetDelegatorStartingInfos() []DelegatorStartingInfoRecord {
	if m != nil {
		return m.DelegatorStartingInfos
	}
	return nil
}

// GenesisState defines the module's genesis state.
type GenesisState struct {
	// Params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// NextRewardsPlanID represents the id to be used when creating the next
	// rewards plan.
	NextRewardsPlanID uint64 `protobuf:"varint,2,opt,name=next_rewards_plan_id,json=nextRewardsPlanId,proto3" json:"next_rewards_plan_id,omitempty"`
	// RewardsPlans defines the list of rewards plans.
	RewardsPlans              []RewardsPlan `protobuf:"bytes,3,rep,name=rewards_plans,json=rewardsPlans,proto3" json:"rewards_plans"`
	LastRewardsAllocationTime *time.Time    `protobuf:"bytes,4,opt,name=last_rewards_allocation_time,json=lastRewardsAllocationTime,proto3,stdtime" json:"last_rewards_allocation_time,omitempty"`
	// delegator_withdraw_infos defines the delegator withdraw infos at genesis.
	DelegatorWithdrawInfos []DelegatorWithdrawInfo `protobuf:"bytes,5,rep,name=delegator_withdraw_infos,json=delegatorWithdrawInfos,proto3" json:"delegator_withdraw_infos"`
	// pools_records defines a group of genesis records of all pools at genesis.
	PoolsRecords DelegationTypeRecords `protobuf:"bytes,6,opt,name=pools_records,json=poolsRecords,proto3" json:"pools_records"`
	// operators_records defines a group of genesis records of all operators at
	// genesis.
	OperatorsRecords DelegationTypeRecords `protobuf:"bytes,7,opt,name=operators_records,json=operatorsRecords,proto3" json:"operators_records"`
	// services_records defines a group of genesis records of all services at
	// genesis.
	ServicesRecords DelegationTypeRecords `protobuf:"bytes,8,opt,name=services_records,json=servicesRecords,proto3" json:"services_records"`
	// operator_accumulated_commissions defines the accumulated commissions of all
	// operators at genesis.
	OperatorAccumulatedCommissions []OperatorAccumulatedCommissionRecord `protobuf:"bytes,9,rep,name=operator_accumulated_commissions,json=operatorAccumulatedCommissions,proto3" json:"operator_accumulated_commissions"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_95f74caade7824f2, []int{7}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetNextRewardsPlanID() uint64 {
	if m != nil {
		return m.NextRewardsPlanID
	}
	return 0
}

func (m *GenesisState) GetRewardsPlans() []RewardsPlan {
	if m != nil {
		return m.RewardsPlans
	}
	return nil
}

func (m *GenesisState) GetLastRewardsAllocationTime() *time.Time {
	if m != nil {
		return m.LastRewardsAllocationTime
	}
	return nil
}

func (m *GenesisState) GetDelegatorWithdrawInfos() []DelegatorWithdrawInfo {
	if m != nil {
		return m.DelegatorWithdrawInfos
	}
	return nil
}

func (m *GenesisState) GetPoolsRecords() DelegationTypeRecords {
	if m != nil {
		return m.PoolsRecords
	}
	return DelegationTypeRecords{}
}

func (m *GenesisState) GetOperatorsRecords() DelegationTypeRecords {
	if m != nil {
		return m.OperatorsRecords
	}
	return DelegationTypeRecords{}
}

func (m *GenesisState) GetServicesRecords() DelegationTypeRecords {
	if m != nil {
		return m.ServicesRecords
	}
	return DelegationTypeRecords{}
}

func (m *GenesisState) GetOperatorAccumulatedCommissions() []OperatorAccumulatedCommissionRecord {
	if m != nil {
		return m.OperatorAccumulatedCommissions
	}
	return nil
}

func init() {
	proto.RegisterType((*DelegatorWithdrawInfo)(nil), "milkyway.rewards.v1.DelegatorWithdrawInfo")
	proto.RegisterType((*OutstandingRewardsRecord)(nil), "milkyway.rewards.v1.OutstandingRewardsRecord")
	proto.RegisterType((*HistoricalRewardsRecord)(nil), "milkyway.rewards.v1.HistoricalRewardsRecord")
	proto.RegisterType((*CurrentRewardsRecord)(nil), "milkyway.rewards.v1.CurrentRewardsRecord")
	proto.RegisterType((*DelegatorStartingInfoRecord)(nil), "milkyway.rewards.v1.DelegatorStartingInfoRecord")
	proto.RegisterType((*OperatorAccumulatedCommissionRecord)(nil), "milkyway.rewards.v1.OperatorAccumulatedCommissionRecord")
	proto.RegisterType((*DelegationTypeRecords)(nil), "milkyway.rewards.v1.DelegationTypeRecords")
	proto.RegisterType((*GenesisState)(nil), "milkyway.rewards.v1.GenesisState")
}

func init() { proto.RegisterFile("milkyway/rewards/v1/genesis.proto", fileDescriptor_95f74caade7824f2) }

var fileDescriptor_95f74caade7824f2 = []byte{
	// 995 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xf6, 0x3a, 0xc6, 0x4d, 0xc6, 0x49, 0x13, 0x4f, 0x9d, 0xe0, 0xa6, 0x95, 0x6d, 0x52, 0x09,
	0x85, 0x8a, 0xec, 0xe2, 0x70, 0x01, 0x6e, 0x75, 0x0c, 0xc4, 0xaa, 0x44, 0xa3, 0x4d, 0xa5, 0x4a,
	0x95, 0xd0, 0x32, 0xde, 0x9d, 0x6c, 0x46, 0xec, 0xee, 0xac, 0x66, 0xc6, 0xf9, 0xf8, 0x07, 0x5c,
	0x90, 0x7a, 0xe0, 0x07, 0xf4, 0x88, 0x90, 0x90, 0x38, 0xf4, 0xc2, 0x8d, 0x63, 0x8f, 0x55, 0xc5,
	0x81, 0x53, 0x8a, 0x1c, 0x24, 0xf8, 0x19, 0x68, 0x77, 0x67, 0x76, 0xd7, 0xf1, 0xa6, 0x0e, 0x2a,
	0xbd, 0x58, 0x9e, 0x99, 0x67, 0xde, 0xf7, 0x79, 0xbf, 0x9e, 0x1d, 0xf0, 0x9e, 0x4f, 0xbc, 0x6f,
	0x4f, 0x8f, 0xd1, 0xa9, 0xc1, 0xf0, 0x31, 0x62, 0x0e, 0x37, 0x8e, 0xba, 0x86, 0x8b, 0x03, 0xcc,
	0x09, 0xd7, 0x43, 0x46, 0x05, 0x85, 0x37, 0x14, 0x44, 0x97, 0x10, 0xfd, 0xa8, 0xbb, 0x5e, 0x47,
	0x3e, 0x09, 0xa8, 0x11, 0xff, 0x26, 0xb8, 0xf5, 0x9b, 0x36, 0xe5, 0x3e, 0xe5, 0x56, 0xbc, 0x32,
	0x92, 0x85, 0x3c, 0x6a, 0x25, 0x2b, 0x63, 0x88, 0x38, 0x36, 0x8e, 0xba, 0x43, 0x2c, 0x50, 0xd7,
	0xb0, 0x29, 0x09, 0xe4, 0x79, 0xdb, 0xa5, 0xd4, 0xf5, 0xb0, 0x11, 0xaf, 0x86, 0xa3, 0x03, 0x43,
	0x10, 0x1f, 0x73, 0x81, 0xfc, 0x50, 0x02, 0x1a, 0x2e, 0x75, 0x69, 0x62, 0x38, 0xfa, 0x27, 0x77,
	0x3b, 0x45, 0xe4, 0x43, 0xc4, 0x90, 0xcf, 0x5f, 0x87, 0xf0, 0xa9, 0x83, 0x3d, 0x89, 0xd8, 0xf8,
	0x59, 0x03, 0xab, 0x7d, 0xec, 0x61, 0x17, 0x09, 0xca, 0x1e, 0x11, 0x71, 0xe8, 0x30, 0x74, 0x3c,
	0x08, 0x0e, 0x28, 0xfc, 0x1c, 0xd4, 0x1d, 0x75, 0x60, 0x21, 0xc7, 0x61, 0x98, 0xf3, 0xa6, 0xd6,
	0xd1, 0x36, 0x17, 0x7a, 0xcd, 0x97, 0xcf, 0xb6, 0x1a, 0x32, 0xc2, 0x7b, 0xc9, 0xc9, 0xbe, 0x60,
	0x24, 0x70, 0xcd, 0x95, 0xf4, 0x8a, 0xdc, 0x87, 0x3b, 0x60, 0xe5, 0x58, 0x9a, 0x4d, 0xad, 0x94,
	0x67, 0x58, 0x59, 0x56, 0x37, 0xe4, 0xf6, 0x67, 0xf3, 0xdf, 0x3d, 0x6d, 0x97, 0xfe, 0x79, 0xda,
	0x2e, 0x6d, 0xfc, 0xae, 0x81, 0xe6, 0x83, 0x91, 0xe0, 0x02, 0x05, 0x4e, 0x04, 0x4d, 0xc2, 0x32,
	0xb1, 0x4d, 0x99, 0x03, 0x77, 0x41, 0x43, 0xfa, 0x27, 0x34, 0xb0, 0x04, 0x62, 0x2e, 0x16, 0x16,
	0x71, 0x62, 0xd6, 0x4b, 0xbd, 0xb5, 0xf1, 0x59, 0x1b, 0xf6, 0xd3, 0xf3, 0x87, 0xf1, 0xf1, 0xa0,
	0x6f, 0x42, 0xe7, 0xe2, 0x9e, 0x03, 0x1d, 0x70, 0x83, 0x66, 0x5e, 0x2c, 0x99, 0xbd, 0x66, 0xb9,
	0x33, 0xb7, 0x59, 0xdb, 0xbe, 0xad, 0x17, 0xb4, 0x84, 0xde, 0xc7, 0xf6, 0x1e, 0xa5, 0x5e, 0x6f,
	0xf5, 0xf9, 0x59, 0xbb, 0xf4, 0xd3, 0xab, 0xf6, 0xbc, 0xdc, 0xe0, 0x3f, 0xfe, 0xfd, 0xcb, 0x5d,
	0xcd, 0x84, 0x74, 0x8a, 0x75, 0x2e, 0xac, 0x97, 0x1a, 0x78, 0x77, 0x97, 0x70, 0x41, 0x19, 0xb1,
	0x91, 0xf7, 0xb6, 0xa2, 0x5a, 0x03, 0xd5, 0x10, 0x33, 0x42, 0x9d, 0xb8, 0x02, 0x15, 0x53, 0xae,
	0xe0, 0x7d, 0x70, 0x4d, 0x45, 0x38, 0xd7, 0xd1, 0x36, 0x6b, 0xdb, 0xef, 0x17, 0x46, 0x38, 0x45,
	0xb0, 0xb7, 0x10, 0xc5, 0x9a, 0xc4, 0xa7, 0x2c, 0xe4, 0x82, 0x7a, 0xa6, 0x81, 0xc6, 0xce, 0x88,
	0x31, 0x1c, 0x88, 0xb7, 0x15, 0xd1, 0x6e, 0xc6, 0xbc, 0x1c, 0x33, 0xbf, 0x53, 0xc8, 0x7c, 0x92,
	0xc5, 0x0c, 0xda, 0x3f, 0x94, 0xc1, 0xad, 0x74, 0x24, 0xf6, 0x05, 0x62, 0x82, 0x04, 0x6e, 0x34,
	0x12, 0x92, 0xfd, 0xff, 0x34, 0x18, 0x97, 0x25, 0xa1, 0xfc, 0x9f, 0x93, 0xf0, 0x18, 0x2c, 0x71,
	0x49, 0xd3, 0x22, 0xc1, 0x01, 0x95, 0x45, 0xbc, 0x7b, 0x49, 0x9b, 0x16, 0x44, 0x96, 0xcf, 0xc8,
	0x22, 0xcf, 0x1d, 0xe4, 0xd2, 0xf2, 0xab, 0x06, 0xee, 0x3c, 0x08, 0x31, 0x8b, 0x63, 0xb0, 0xed,
	0x91, 0x3f, 0xf2, 0x90, 0xc0, 0xce, 0x0e, 0xf5, 0x7d, 0xc2, 0x39, 0xa1, 0x81, 0x4c, 0x8f, 0x01,
	0x6a, 0x54, 0xc2, 0xb2, 0x9a, 0x5e, 0x1f, 0x9f, 0xb5, 0x81, 0xba, 0x3d, 0xe8, 0x9b, 0x40, 0x41,
	0x06, 0x0e, 0x7c, 0x04, 0x6a, 0x28, 0xb3, 0x27, 0xeb, 0x58, 0x4c, 0xbe, 0xd0, 0x6f, 0x9e, 0x7c,
	0xde, 0x52, 0x8e, 0xfb, 0x6f, 0x73, 0xa9, 0xca, 0x45, 0x89, 0x3b, 0x0d, 0x71, 0x42, 0x96, 0x43,
	0x52, 0x3c, 0xe8, 0x5a, 0x3c, 0xe8, 0x5b, 0x85, 0x24, 0x2e, 0x93, 0x9f, 0x3c, 0x8f, 0x82, 0x69,
	0x87, 0x07, 0x00, 0x1e, 0xa6, 0x13, 0x74, 0x41, 0x52, 0x3e, 0xbc, 0xda, 0xc0, 0x4d, 0x3b, 0xaa,
	0x1f, 0x5e, 0xc4, 0xc0, 0xaf, 0xc1, 0xb2, 0x9d, 0xf4, 0xbb, 0x95, 0x4d, 0x75, 0xe4, 0xe4, 0x83,
	0x2b, 0xcc, 0xc6, 0xb4, 0x87, 0xeb, 0xf6, 0x04, 0x00, 0x8e, 0x40, 0x33, 0x6b, 0xff, 0x89, 0xbe,
	0xe3, 0xcd, 0x4a, 0xec, 0xe7, 0xa3, 0xab, 0x37, 0xde, 0xb4, 0xbb, 0x35, 0xa7, 0x08, 0xc7, 0x37,
	0xfe, 0xaa, 0x82, 0xc5, 0x2f, 0x93, 0x0f, 0xf3, 0xbe, 0x40, 0x02, 0xc3, 0x4f, 0x41, 0x35, 0xf9,
	0xd6, 0xc5, 0x2d, 0x56, 0xdb, 0xbe, 0x55, 0xe8, 0x75, 0x2f, 0x86, 0xf4, 0x2a, 0x91, 0x03, 0x53,
	0x5e, 0x80, 0x5f, 0x80, 0x46, 0x80, 0x4f, 0xd2, 0xf4, 0x58, 0xa1, 0x87, 0x02, 0x35, 0x7a, 0x95,
	0xde, 0xea, 0xf8, 0xac, 0x5d, 0xff, 0x0a, 0x9f, 0xa8, 0x88, 0xf7, 0x3c, 0x14, 0x0c, 0xfa, 0x66,
	0x3d, 0xb8, 0xb0, 0x15, 0xe9, 0xe6, 0x52, 0xde, 0x84, 0xca, 0x73, 0xa7, 0x90, 0x49, 0xee, 0xaa,
	0xa4, 0xb3, 0xc8, 0xb2, 0x2d, 0x0e, 0x11, 0xb8, 0xed, 0x21, 0x9e, 0x91, 0x42, 0x9e, 0x47, 0x6d,
	0x29, 0x0e, 0xc4, 0xc7, 0xcd, 0x4a, 0x1c, 0xe5, 0xba, 0x9e, 0xbc, 0x15, 0x74, 0xf5, 0x56, 0xd0,
	0x1f, 0xaa, 0xb7, 0x42, 0xaf, 0xf2, 0xe4, 0x55, 0x5b, 0x33, 0x6f, 0x46, 0x56, 0xa4, 0xb3, 0x7b,
	0xa9, 0x8d, 0x08, 0x05, 0x69, 0xbe, 0x74, 0xe9, 0x57, 0x39, 0x29, 0xdd, 0x3b, 0x31, 0xf5, 0x19,
	0x9a, 0x91, 0x7f, 0x20, 0x14, 0x17, 0x2d, 0x8f, 0xe0, 0x91, 0x32, 0x85, 0xd1, 0x27, 0xd0, 0x62,
	0xc9, 0xb8, 0x35, 0xab, 0xb3, 0x95, 0x69, 0x72, 0x40, 0x27, 0x94, 0x29, 0xb6, 0xa5, 0x26, 0x77,
	0x08, 0xea, 0x4a, 0x44, 0x32, 0xfb, 0xd7, 0xde, 0xc4, 0xfe, 0x4a, 0x6a, 0x4f, 0xf9, 0xf8, 0x06,
	0xac, 0x70, 0xcc, 0x8e, 0x88, 0x8d, 0x33, 0x17, 0xf3, 0x6f, 0xe2, 0x62, 0x59, 0x99, 0x53, 0x1e,
	0xbe, 0xd7, 0x40, 0x27, 0x95, 0xcb, 0x9c, 0x78, 0x59, 0x76, 0xaa, 0x6f, 0xbc, 0xb9, 0x10, 0xd7,
	0xe6, 0x93, 0x62, 0x35, 0x9a, 0x2d, 0xc9, 0x79, 0x02, 0x2d, 0xfa, 0x3a, 0x3c, 0xef, 0xdd, 0x7f,
	0x3e, 0x6e, 0x69, 0x2f, 0xc6, 0x2d, 0xed, 0xcf, 0x71, 0x4b, 0x7b, 0x72, 0xde, 0x2a, 0xbd, 0x38,
	0x6f, 0x95, 0xfe, 0x38, 0x6f, 0x95, 0x1e, 0x77, 0x5d, 0x22, 0x0e, 0x47, 0x43, 0xdd, 0xa6, 0xbe,
	0xa1, 0x88, 0x6c, 0x79, 0x68, 0xc8, 0xd3, 0x95, 0x71, 0x92, 0x3e, 0x33, 0xc5, 0x69, 0x88, 0xf9,
	0xb0, 0x1a, 0x37, 0xe9, 0xc7, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x66, 0xe7, 0xf9, 0xbf, 0x66,
	0x0b, 0x00, 0x00,
}

func (m *DelegatorWithdrawInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorWithdrawInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorWithdrawInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WithdrawAddress) > 0 {
		i -= len(m.WithdrawAddress)
		copy(dAtA[i:], m.WithdrawAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.WithdrawAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutstandingRewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutstandingRewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutstandingRewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutstandingRewards) > 0 {
		for iNdEx := len(m.OutstandingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutstandingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DelegationTargetID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DelegationTargetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *HistoricalRewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HistoricalRewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HistoricalRewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.Period != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.Period))
		i--
		dAtA[i] = 0x10
	}
	if m.DelegationTargetID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DelegationTargetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CurrentRewardsRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CurrentRewardsRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CurrentRewardsRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Rewards.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.DelegationTargetID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DelegationTargetID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegatorStartingInfoRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegatorStartingInfoRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegatorStartingInfoRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.StartingInfo.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.DelegationTargetID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.DelegationTargetID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OperatorAccumulatedCommissionRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OperatorAccumulatedCommissionRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OperatorAccumulatedCommissionRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Accumulated.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.OperatorID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.OperatorID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelegationTypeRecords) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelegationTypeRecords) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelegationTypeRecords) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorStartingInfos) > 0 {
		for iNdEx := len(m.DelegatorStartingInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegatorStartingInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.CurrentRewards) > 0 {
		for iNdEx := len(m.CurrentRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CurrentRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.HistoricalRewards) > 0 {
		for iNdEx := len(m.HistoricalRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HistoricalRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.OutstandingRewards) > 0 {
		for iNdEx := len(m.OutstandingRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutstandingRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OperatorAccumulatedCommissions) > 0 {
		for iNdEx := len(m.OperatorAccumulatedCommissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OperatorAccumulatedCommissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	{
		size, err := m.ServicesRecords.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	{
		size, err := m.OperatorsRecords.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.PoolsRecords.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.DelegatorWithdrawInfos) > 0 {
		for iNdEx := len(m.DelegatorWithdrawInfos) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegatorWithdrawInfos[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.LastRewardsAllocationTime != nil {
		n8, err8 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.LastRewardsAllocationTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastRewardsAllocationTime):])
		if err8 != nil {
			return 0, err8
		}
		i -= n8
		i = encodeVarintGenesis(dAtA, i, uint64(n8))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RewardsPlans) > 0 {
		for iNdEx := len(m.RewardsPlans) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RewardsPlans[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.NextRewardsPlanID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextRewardsPlanID))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DelegatorWithdrawInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = len(m.WithdrawAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *OutstandingRewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegationTargetID != 0 {
		n += 1 + sovGenesis(uint64(m.DelegationTargetID))
	}
	if len(m.OutstandingRewards) > 0 {
		for _, e := range m.OutstandingRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *HistoricalRewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegationTargetID != 0 {
		n += 1 + sovGenesis(uint64(m.DelegationTargetID))
	}
	if m.Period != 0 {
		n += 1 + sovGenesis(uint64(m.Period))
	}
	l = m.Rewards.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *CurrentRewardsRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DelegationTargetID != 0 {
		n += 1 + sovGenesis(uint64(m.DelegationTargetID))
	}
	l = m.Rewards.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *DelegatorStartingInfoRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.DelegationTargetID != 0 {
		n += 1 + sovGenesis(uint64(m.DelegationTargetID))
	}
	l = m.StartingInfo.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *OperatorAccumulatedCommissionRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OperatorID != 0 {
		n += 1 + sovGenesis(uint64(m.OperatorID))
	}
	l = m.Accumulated.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *DelegationTypeRecords) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.OutstandingRewards) > 0 {
		for _, e := range m.OutstandingRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.HistoricalRewards) > 0 {
		for _, e := range m.HistoricalRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.CurrentRewards) > 0 {
		for _, e := range m.CurrentRewards {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.DelegatorStartingInfos) > 0 {
		for _, e := range m.DelegatorStartingInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.NextRewardsPlanID != 0 {
		n += 1 + sovGenesis(uint64(m.NextRewardsPlanID))
	}
	if len(m.RewardsPlans) > 0 {
		for _, e := range m.RewardsPlans {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.LastRewardsAllocationTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.LastRewardsAllocationTime)
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.DelegatorWithdrawInfos) > 0 {
		for _, e := range m.DelegatorWithdrawInfos {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.PoolsRecords.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.OperatorsRecords.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.ServicesRecords.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.OperatorAccumulatedCommissions) > 0 {
		for _, e := range m.OperatorAccumulatedCommissions {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DelegatorWithdrawInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorWithdrawInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorWithdrawInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithdrawAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WithdrawAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutstandingRewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutstandingRewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutstandingRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationTargetID", wireType)
			}
			m.DelegationTargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationTargetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutstandingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutstandingRewards = append(m.OutstandingRewards, DecPool{})
			if err := m.OutstandingRewards[len(m.OutstandingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *HistoricalRewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HistoricalRewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HistoricalRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationTargetID", wireType)
			}
			m.DelegationTargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationTargetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Period", wireType)
			}
			m.Period = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Period |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CurrentRewardsRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CurrentRewardsRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CurrentRewardsRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationTargetID", wireType)
			}
			m.DelegationTargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationTargetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Rewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegatorStartingInfoRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegatorStartingInfoRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegatorStartingInfoRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationTargetID", wireType)
			}
			m.DelegationTargetID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DelegationTargetID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartingInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartingInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OperatorAccumulatedCommissionRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OperatorAccumulatedCommissionRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OperatorAccumulatedCommissionRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorID", wireType)
			}
			m.OperatorID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accumulated", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Accumulated.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelegationTypeRecords) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelegationTypeRecords: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelegationTypeRecords: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutstandingRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutstandingRewards = append(m.OutstandingRewards, OutstandingRewardsRecord{})
			if err := m.OutstandingRewards[len(m.OutstandingRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoricalRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoricalRewards = append(m.HistoricalRewards, HistoricalRewardsRecord{})
			if err := m.HistoricalRewards[len(m.HistoricalRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CurrentRewards = append(m.CurrentRewards, CurrentRewardsRecord{})
			if err := m.CurrentRewards[len(m.CurrentRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorStartingInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorStartingInfos = append(m.DelegatorStartingInfos, DelegatorStartingInfoRecord{})
			if err := m.DelegatorStartingInfos[len(m.DelegatorStartingInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRewardsPlanID", wireType)
			}
			m.NextRewardsPlanID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRewardsPlanID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPlans", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsPlans = append(m.RewardsPlans, RewardsPlan{})
			if err := m.RewardsPlans[len(m.RewardsPlans)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRewardsAllocationTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastRewardsAllocationTime == nil {
				m.LastRewardsAllocationTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.LastRewardsAllocationTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorWithdrawInfos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorWithdrawInfos = append(m.DelegatorWithdrawInfos, DelegatorWithdrawInfo{})
			if err := m.DelegatorWithdrawInfos[len(m.DelegatorWithdrawInfos)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolsRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolsRecords.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorsRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorsRecords.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServicesRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ServicesRecords.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorAccumulatedCommissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorAccumulatedCommissions = append(m.OperatorAccumulatedCommissions, OperatorAccumulatedCommissionRecord{})
			if err := m.OperatorAccumulatedCommissions[len(m.OperatorAccumulatedCommissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
