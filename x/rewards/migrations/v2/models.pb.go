// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/rewards/v1/models.proto

package v2

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	types1 "github.com/milkyway-labs/milkyway/v10/x/rewards/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RewardsPlan represents a rewards allocation plan.
type RewardsPlan struct {
	// ID is the unique identifier of the plan.
	ID uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Description is the description of the plan.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// ServiceID is the service ID which the plan is related to.
	ServiceID uint32 `protobuf:"varint,3,opt,name=service_id,json=serviceId,proto3" json:"service_id,omitempty"`
	// AmountPerDay is the amount of rewards to be distributed, per day.
	// The rewards amount for every block will be calculated based on this.
	AmountPerDay github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,4,rep,name=amount_per_day,json=amountPerDay,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount_per_day"`
	// StartTime is the starting time of the plan.
	StartTime time.Time `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	// EndTime is the ending time of the plan.
	EndTime time.Time `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	// RewardsPool is the address where rewards to be distributed are stored.
	// If the rewards pool doesn't have enough funds to be distributed, then
	// the rewards allocation for this plan will be skipped.
	RewardsPool string `protobuf:"bytes,7,opt,name=rewards_pool,json=rewardsPool,proto3" json:"rewards_pool,omitempty"`
	// PoolsDistribution is the rewards distribution parameters for pools.
	PoolsDistribution types1.Distribution `protobuf:"bytes,8,opt,name=pools_distribution,json=poolsDistribution,proto3" json:"pools_distribution"`
	// OperatorsDistribution is the rewards distribution parameters for operators.
	OperatorsDistribution types1.Distribution `protobuf:"bytes,9,opt,name=operators_distribution,json=operatorsDistribution,proto3" json:"operators_distribution"`
	// UsersDistribution is the rewards distribution parameters for users.
	UsersDistribution types1.UsersDistribution `protobuf:"bytes,10,opt,name=users_distribution,json=usersDistribution,proto3" json:"users_distribution"`
}

func (m *RewardsPlan) Reset()         { *m = RewardsPlan{} }
func (m *RewardsPlan) String() string { return proto.CompactTextString(m) }
func (*RewardsPlan) ProtoMessage()    {}
func (*RewardsPlan) Descriptor() ([]byte, []int) {
	return fileDescriptor_fcf66d1f3415f5b6, []int{0}
}
func (m *RewardsPlan) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RewardsPlan) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RewardsPlan.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RewardsPlan) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RewardsPlan.Merge(m, src)
}
func (m *RewardsPlan) XXX_Size() int {
	return m.Size()
}
func (m *RewardsPlan) XXX_DiscardUnknown() {
	xxx_messageInfo_RewardsPlan.DiscardUnknown(m)
}

var xxx_messageInfo_RewardsPlan proto.InternalMessageInfo

func init() { proto.RegisterFile("milkyway/rewards/v1/models.proto", fileDescriptor_fcf66d1f3415f5b6) }

var fileDescriptor_fcf66d1f3415f5b6 = []byte{
	// 568 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x9b, 0xae, 0xfb, 0x53, 0x77, 0x43, 0x22, 0x8c, 0x29, 0xdb, 0x21, 0x09, 0x1c, 0x50,
	0x0e, 0xcc, 0xa6, 0xe5, 0x80, 0x04, 0x48, 0x88, 0xac, 0x97, 0xdd, 0xa6, 0x0c, 0x38, 0x0c, 0x89,
	0xc8, 0xa9, 0x4d, 0xb0, 0x96, 0xc4, 0xc1, 0x76, 0x3a, 0xfa, 0x2d, 0xf6, 0x11, 0x38, 0x73, 0xe6,
	0x33, 0xa0, 0x1d, 0x27, 0x4e, 0x9c, 0x36, 0x68, 0x2f, 0x7c, 0x0c, 0x94, 0xc4, 0xad, 0xba, 0xd2,
	0xcb, 0x4e, 0xc9, 0xfb, 0xbe, 0xcf, 0xfb, 0xf3, 0xeb, 0xc7, 0x36, 0x70, 0x53, 0x96, 0x9c, 0x8e,
	0xce, 0xf0, 0x08, 0x09, 0x7a, 0x86, 0x05, 0x91, 0x68, 0xd8, 0x45, 0x29, 0x27, 0x34, 0x91, 0x30,
	0x17, 0x5c, 0x71, 0xf3, 0xde, 0x54, 0x01, 0xb5, 0x02, 0x0e, 0xbb, 0x7b, 0xf6, 0x80, 0xcb, 0x94,
	0x4b, 0x14, 0x61, 0x49, 0xd1, 0xb0, 0x1b, 0x51, 0x85, 0xbb, 0x68, 0xc0, 0x59, 0x56, 0x37, 0xed,
	0xed, 0xd6, 0xf5, 0xb0, 0x8a, 0x50, 0x1d, 0xe8, 0xd2, 0x76, 0xcc, 0x63, 0x5e, 0xe7, 0xcb, 0x3f,
	0x9d, 0x75, 0x62, 0xce, 0xe3, 0x84, 0xa2, 0x2a, 0x8a, 0x8a, 0x8f, 0x48, 0xb1, 0x94, 0x4a, 0x85,
	0xd3, 0x5c, 0x0b, 0x96, 0x0c, 0xda, 0xbb, 0x31, 0xe8, 0xc3, 0x1f, 0xab, 0xa0, 0x13, 0xd4, 0xb5,
	0xa3, 0x04, 0x67, 0xe6, 0x0e, 0x68, 0x32, 0x62, 0x19, 0xae, 0xe1, 0xb5, 0xfc, 0xb5, 0xf1, 0x95,
	0xd3, 0x3c, 0xec, 0x07, 0x4d, 0x46, 0x4c, 0x17, 0x74, 0x08, 0x95, 0x03, 0xc1, 0x72, 0xc5, 0x78,
	0x66, 0x35, 0x5d, 0xc3, 0x6b, 0x07, 0xf3, 0x29, 0xf3, 0x31, 0x00, 0x92, 0x8a, 0x21, 0x1b, 0xd0,
	0x90, 0x11, 0x6b, 0xc5, 0x35, 0xbc, 0x2d, 0x7f, 0x6b, 0x7c, 0xe5, 0xb4, 0x8f, 0xeb, 0xec, 0x61,
	0x3f, 0x68, 0x6b, 0xc1, 0x21, 0x31, 0x3f, 0x83, 0x3b, 0x38, 0xe5, 0x45, 0xa6, 0xc2, 0x9c, 0x8a,
	0x90, 0xe0, 0x91, 0xd5, 0x72, 0x57, 0xbc, 0x4e, 0x6f, 0x17, 0xea, 0x7d, 0x97, 0x26, 0x41, 0x6d,
	0x12, 0x3c, 0xe0, 0x2c, 0xf3, 0x9f, 0x5c, 0x5c, 0x39, 0x8d, 0x6f, 0xd7, 0x8e, 0x17, 0x33, 0xf5,
	0xa9, 0x88, 0xe0, 0x80, 0xa7, 0xda, 0x24, 0xfd, 0xd9, 0x97, 0xe4, 0x14, 0xa9, 0x51, 0x4e, 0x65,
	0xd5, 0x20, 0x83, 0xcd, 0x7a, 0x89, 0x23, 0x2a, 0xfa, 0x78, 0x64, 0x1e, 0x00, 0x20, 0x15, 0x16,
	0x2a, 0x2c, 0x5d, 0xb2, 0x56, 0x5d, 0xc3, 0xeb, 0xf4, 0xf6, 0x60, 0x6d, 0x21, 0x9c, 0x5a, 0x08,
	0xdf, 0x4c, 0x2d, 0xf4, 0x37, 0xca, 0xf5, 0xce, 0xaf, 0x1d, 0x23, 0x68, 0x57, 0x7d, 0x65, 0xc5,
	0x7c, 0x05, 0x36, 0x68, 0x46, 0x6a, 0xc4, 0xda, 0x2d, 0x10, 0xeb, 0x34, 0x23, 0x15, 0xe0, 0x05,
	0xd8, 0xd4, 0x67, 0x11, 0xe6, 0x9c, 0x27, 0xd6, 0x7a, 0xe9, 0xa4, 0x6f, 0xfd, 0xfc, 0xbe, 0xbf,
	0xad, 0x77, 0xfe, 0x9a, 0x10, 0x41, 0xa5, 0x3c, 0x56, 0x82, 0x65, 0x71, 0xd0, 0xd1, 0xea, 0x23,
	0xce, 0x13, 0xf3, 0x1d, 0x30, 0xcb, 0x26, 0x19, 0x12, 0x26, 0x95, 0x60, 0x51, 0x51, 0x1d, 0xc6,
	0x46, 0x35, 0xc7, 0x03, 0xf8, 0xff, 0x9d, 0xeb, 0xc1, 0xfe, 0x9c, 0xd0, 0x6f, 0x95, 0xe3, 0x04,
	0x77, 0x2b, 0xc4, 0x7c, 0xc1, 0xfc, 0x00, 0x76, 0x78, 0x4e, 0x05, 0x56, 0x5c, 0x2c, 0xb0, 0xdb,
	0xb7, 0x63, 0xdf, 0x9f, 0x61, 0x6e, 0xf0, 0xdf, 0x03, 0xb3, 0x90, 0x74, 0x91, 0x0d, 0x2a, 0xf6,
	0xa3, 0xa5, 0xec, 0xb7, 0xa5, 0x7c, 0xd9, 0xf0, 0xc5, 0x62, 0xe1, 0x79, 0xeb, 0xef, 0x57, 0xc7,
	0xf0, 0x4f, 0x2e, 0xfe, 0xd8, 0x8d, 0x8b, 0xb1, 0x6d, 0x5c, 0x8e, 0x6d, 0xe3, 0xf7, 0xd8, 0x36,
	0xce, 0x27, 0x76, 0xe3, 0x72, 0x62, 0x37, 0x7e, 0x4d, 0xec, 0xc6, 0xc9, 0xcb, 0xb9, 0x3b, 0x33,
	0x5d, 0x6e, 0x3f, 0xc1, 0x91, 0x9c, 0x45, 0x68, 0xf8, 0x0c, 0x7d, 0x99, 0x3d, 0x93, 0x94, 0xc5,
	0x02, 0x97, 0xf4, 0xf2, 0xc5, 0x44, 0x6b, 0xd5, 0xd1, 0x3e, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff,
	0x69, 0xf9, 0x22, 0xa6, 0xf8, 0x03, 0x00, 0x00,
}

func (this *RewardsPlan) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*RewardsPlan)
	if !ok {
		that2, ok := that.(RewardsPlan)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ID != that1.ID {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if this.ServiceID != that1.ServiceID {
		return false
	}
	if len(this.AmountPerDay) != len(that1.AmountPerDay) {
		return false
	}
	for i := range this.AmountPerDay {
		if !this.AmountPerDay[i].Equal(&that1.AmountPerDay[i]) {
			return false
		}
	}
	if !this.StartTime.Equal(that1.StartTime) {
		return false
	}
	if !this.EndTime.Equal(that1.EndTime) {
		return false
	}
	if this.RewardsPool != that1.RewardsPool {
		return false
	}
	if !this.PoolsDistribution.Equal(&that1.PoolsDistribution) {
		return false
	}
	if !this.OperatorsDistribution.Equal(&that1.OperatorsDistribution) {
		return false
	}
	if !this.UsersDistribution.Equal(&that1.UsersDistribution) {
		return false
	}
	return true
}
func (m *RewardsPlan) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RewardsPlan) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RewardsPlan) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UsersDistribution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.OperatorsDistribution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.PoolsDistribution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModels(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if len(m.RewardsPool) > 0 {
		i -= len(m.RewardsPool)
		copy(dAtA[i:], m.RewardsPool)
		i = encodeVarintModels(dAtA, i, uint64(len(m.RewardsPool)))
		i--
		dAtA[i] = 0x3a
	}
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintModels(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x32
	n5, err5 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err5 != nil {
		return 0, err5
	}
	i -= n5
	i = encodeVarintModels(dAtA, i, uint64(n5))
	i--
	dAtA[i] = 0x2a
	if len(m.AmountPerDay) > 0 {
		for iNdEx := len(m.AmountPerDay) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AmountPerDay[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.ServiceID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.ServiceID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintModels(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintModels(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RewardsPlan) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovModels(uint64(m.ID))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.ServiceID != 0 {
		n += 1 + sovModels(uint64(m.ServiceID))
	}
	if len(m.AmountPerDay) > 0 {
		for _, e := range m.AmountPerDay {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovModels(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovModels(uint64(l))
	l = len(m.RewardsPool)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = m.PoolsDistribution.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.OperatorsDistribution.Size()
	n += 1 + l + sovModels(uint64(l))
	l = m.UsersDistribution.Size()
	n += 1 + l + sovModels(uint64(l))
	return n
}

func sovModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RewardsPlan) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RewardsPlan: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RewardsPlan: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceID", wireType)
			}
			m.ServiceID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ServiceID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountPerDay", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AmountPerDay = append(m.AmountPerDay, types.Coin{})
			if err := m.AmountPerDay[len(m.AmountPerDay)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RewardsPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RewardsPool = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolsDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolsDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorsDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OperatorsDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsersDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UsersDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModels = fmt.Errorf("proto: unexpected end of group")
)
