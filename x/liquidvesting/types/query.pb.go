// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/liquidvesting/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryUserInsuranceFundRequest is the request type for the
// Query/UserInsuranceFund RPC method.
type QueryUserInsuranceFundRequest struct {
	// user_address is the address of the user to query.
	UserAddress string `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
}

func (m *QueryUserInsuranceFundRequest) Reset()         { *m = QueryUserInsuranceFundRequest{} }
func (m *QueryUserInsuranceFundRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserInsuranceFundRequest) ProtoMessage()    {}
func (*QueryUserInsuranceFundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b32b8fa870c8abf, []int{0}
}
func (m *QueryUserInsuranceFundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserInsuranceFundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserInsuranceFundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserInsuranceFundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserInsuranceFundRequest.Merge(m, src)
}
func (m *QueryUserInsuranceFundRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserInsuranceFundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserInsuranceFundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserInsuranceFundRequest proto.InternalMessageInfo

func (m *QueryUserInsuranceFundRequest) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

// QueryUserInsuranceFundResponse is the response type for the
// Query/UserInsuranceFund RPC method.
type QueryUserInsuranceFundResponse struct {
	// balance is the amount of tokens that is in the user's insurance fund.
	Balance github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balance"`
	// used is the amount of tokens is being used to cover the user's
	// restaked assets.
	Used github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=used,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"used"`
}

func (m *QueryUserInsuranceFundResponse) Reset()         { *m = QueryUserInsuranceFundResponse{} }
func (m *QueryUserInsuranceFundResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserInsuranceFundResponse) ProtoMessage()    {}
func (*QueryUserInsuranceFundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b32b8fa870c8abf, []int{1}
}
func (m *QueryUserInsuranceFundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserInsuranceFundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserInsuranceFundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserInsuranceFundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserInsuranceFundResponse.Merge(m, src)
}
func (m *QueryUserInsuranceFundResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserInsuranceFundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserInsuranceFundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserInsuranceFundResponse proto.InternalMessageInfo

func (m *QueryUserInsuranceFundResponse) GetBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *QueryUserInsuranceFundResponse) GetUsed() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Used
	}
	return nil
}

// QueryUserInsuranceFundsRequest is the request type for the
// Query/UserInsuranceFunds RPC method.
type QueryUserInsuranceFundsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUserInsuranceFundsRequest) Reset()         { *m = QueryUserInsuranceFundsRequest{} }
func (m *QueryUserInsuranceFundsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserInsuranceFundsRequest) ProtoMessage()    {}
func (*QueryUserInsuranceFundsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b32b8fa870c8abf, []int{2}
}
func (m *QueryUserInsuranceFundsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserInsuranceFundsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserInsuranceFundsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserInsuranceFundsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserInsuranceFundsRequest.Merge(m, src)
}
func (m *QueryUserInsuranceFundsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserInsuranceFundsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserInsuranceFundsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserInsuranceFundsRequest proto.InternalMessageInfo

func (m *QueryUserInsuranceFundsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// UserInsuranceFundData is the structure that contains the information about
// a user's insurance fund.
type UserInsuranceFundData struct {
	// user_address is the address of who owns the insurance fund.
	UserAddress string `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// balance is the amount of tokens that is in the user's insurance fund.
	Balance github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balance"`
	// used is the amount of tokens that is to cover the user's
	// restaked assets.
	Used github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=used,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"used"`
}

func (m *UserInsuranceFundData) Reset()         { *m = UserInsuranceFundData{} }
func (m *UserInsuranceFundData) String() string { return proto.CompactTextString(m) }
func (*UserInsuranceFundData) ProtoMessage()    {}
func (*UserInsuranceFundData) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b32b8fa870c8abf, []int{3}
}
func (m *UserInsuranceFundData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInsuranceFundData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInsuranceFundData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInsuranceFundData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInsuranceFundData.Merge(m, src)
}
func (m *UserInsuranceFundData) XXX_Size() int {
	return m.Size()
}
func (m *UserInsuranceFundData) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInsuranceFundData.DiscardUnknown(m)
}

var xxx_messageInfo_UserInsuranceFundData proto.InternalMessageInfo

func (m *UserInsuranceFundData) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *UserInsuranceFundData) GetBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *UserInsuranceFundData) GetUsed() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Used
	}
	return nil
}

// QueryUserInsuranceFundsResponse is the response type for the
// Query/UserInsuranceFunds RPC method.
type QueryUserInsuranceFundsResponse struct {
	// insurance_funds is the list of users insurance funds.
	InsuranceFunds []UserInsuranceFundData `protobuf:"bytes,1,rep,name=insurance_funds,json=insuranceFunds,proto3" json:"insurance_funds"`
	// Pagination defines the pagination response
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryUserInsuranceFundsResponse) Reset()         { *m = QueryUserInsuranceFundsResponse{} }
func (m *QueryUserInsuranceFundsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserInsuranceFundsResponse) ProtoMessage()    {}
func (*QueryUserInsuranceFundsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b32b8fa870c8abf, []int{4}
}
func (m *QueryUserInsuranceFundsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserInsuranceFundsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserInsuranceFundsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserInsuranceFundsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserInsuranceFundsResponse.Merge(m, src)
}
func (m *QueryUserInsuranceFundsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserInsuranceFundsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserInsuranceFundsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserInsuranceFundsResponse proto.InternalMessageInfo

func (m *QueryUserInsuranceFundsResponse) GetInsuranceFunds() []UserInsuranceFundData {
	if m != nil {
		return m.InsuranceFunds
	}
	return nil
}

func (m *QueryUserInsuranceFundsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryUserRestakableAssetsRequest is the request type for the
// Query/UserRestakableAssets RPC method.
type QueryUserRestakableAssetsRequest struct {
	// user_address is the address of the user to query.
	UserAddress string `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
}

func (m *QueryUserRestakableAssetsRequest) Reset()         { *m = QueryUserRestakableAssetsRequest{} }
func (m *QueryUserRestakableAssetsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUserRestakableAssetsRequest) ProtoMessage()    {}
func (*QueryUserRestakableAssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b32b8fa870c8abf, []int{5}
}
func (m *QueryUserRestakableAssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserRestakableAssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserRestakableAssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserRestakableAssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserRestakableAssetsRequest.Merge(m, src)
}
func (m *QueryUserRestakableAssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserRestakableAssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserRestakableAssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserRestakableAssetsRequest proto.InternalMessageInfo

func (m *QueryUserRestakableAssetsRequest) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

// QueryUserRestakableAssetsResponse is the response type for the
// Query/UserRestakableAssets RPC method.
type QueryUserRestakableAssetsResponse struct {
	// amount is the amount of tokens that the user can restake.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *QueryUserRestakableAssetsResponse) Reset()         { *m = QueryUserRestakableAssetsResponse{} }
func (m *QueryUserRestakableAssetsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserRestakableAssetsResponse) ProtoMessage()    {}
func (*QueryUserRestakableAssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b32b8fa870c8abf, []int{6}
}
func (m *QueryUserRestakableAssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserRestakableAssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserRestakableAssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserRestakableAssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserRestakableAssetsResponse.Merge(m, src)
}
func (m *QueryUserRestakableAssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserRestakableAssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserRestakableAssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserRestakableAssetsResponse proto.InternalMessageInfo

func (m *QueryUserRestakableAssetsResponse) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// QueryInsuranceFundRequest is the request type for the
// Query/InsuranceFund RPC method.
type QueryInsuranceFundRequest struct {
}

func (m *QueryInsuranceFundRequest) Reset()         { *m = QueryInsuranceFundRequest{} }
func (m *QueryInsuranceFundRequest) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceFundRequest) ProtoMessage()    {}
func (*QueryInsuranceFundRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b32b8fa870c8abf, []int{7}
}
func (m *QueryInsuranceFundRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceFundRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceFundRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceFundRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceFundRequest.Merge(m, src)
}
func (m *QueryInsuranceFundRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceFundRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceFundRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceFundRequest proto.InternalMessageInfo

// QueryInsuranceFundResponse is the response type for the
// Query/InsuranceFund RPC method.
type QueryInsuranceFundResponse struct {
	// amount is the amount of tokens that are in the insurance fund.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *QueryInsuranceFundResponse) Reset()         { *m = QueryInsuranceFundResponse{} }
func (m *QueryInsuranceFundResponse) String() string { return proto.CompactTextString(m) }
func (*QueryInsuranceFundResponse) ProtoMessage()    {}
func (*QueryInsuranceFundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b32b8fa870c8abf, []int{8}
}
func (m *QueryInsuranceFundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryInsuranceFundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryInsuranceFundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryInsuranceFundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryInsuranceFundResponse.Merge(m, src)
}
func (m *QueryInsuranceFundResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryInsuranceFundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryInsuranceFundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryInsuranceFundResponse proto.InternalMessageInfo

func (m *QueryInsuranceFundResponse) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b32b8fa870c8abf, []int{9}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b32b8fa870c8abf, []int{10}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QueryUserInsuranceFundRequest)(nil), "milkyway.liquidvesting.v1.QueryUserInsuranceFundRequest")
	proto.RegisterType((*QueryUserInsuranceFundResponse)(nil), "milkyway.liquidvesting.v1.QueryUserInsuranceFundResponse")
	proto.RegisterType((*QueryUserInsuranceFundsRequest)(nil), "milkyway.liquidvesting.v1.QueryUserInsuranceFundsRequest")
	proto.RegisterType((*UserInsuranceFundData)(nil), "milkyway.liquidvesting.v1.UserInsuranceFundData")
	proto.RegisterType((*QueryUserInsuranceFundsResponse)(nil), "milkyway.liquidvesting.v1.QueryUserInsuranceFundsResponse")
	proto.RegisterType((*QueryUserRestakableAssetsRequest)(nil), "milkyway.liquidvesting.v1.QueryUserRestakableAssetsRequest")
	proto.RegisterType((*QueryUserRestakableAssetsResponse)(nil), "milkyway.liquidvesting.v1.QueryUserRestakableAssetsResponse")
	proto.RegisterType((*QueryInsuranceFundRequest)(nil), "milkyway.liquidvesting.v1.QueryInsuranceFundRequest")
	proto.RegisterType((*QueryInsuranceFundResponse)(nil), "milkyway.liquidvesting.v1.QueryInsuranceFundResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "milkyway.liquidvesting.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "milkyway.liquidvesting.v1.QueryParamsResponse")
}

func init() {
	proto.RegisterFile("milkyway/liquidvesting/v1/query.proto", fileDescriptor_0b32b8fa870c8abf)
}

var fileDescriptor_0b32b8fa870c8abf = []byte{
	// 772 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x4f, 0x4f, 0x13, 0x4d,
	0x18, 0xef, 0x14, 0xde, 0x12, 0x86, 0xf7, 0x7d, 0x0d, 0x23, 0x26, 0x50, 0x75, 0xa1, 0x35, 0x22,
	0x60, 0xd8, 0x61, 0x51, 0xe3, 0x1f, 0x8c, 0x42, 0x55, 0xd4, 0x1b, 0x6e, 0x82, 0x07, 0x2f, 0xcd,
	0x6c, 0x77, 0x5c, 0x36, 0xb4, 0x3b, 0x65, 0x67, 0xb7, 0xda, 0x18, 0x0f, 0x72, 0xf2, 0x68, 0xf4,
	0x4b, 0x18, 0x2f, 0xfa, 0x21, 0x8c, 0xe1, 0xd8, 0xc4, 0x8b, 0x89, 0x89, 0x1a, 0x30, 0xd1, 0x8f,
	0x61, 0x76, 0x76, 0x16, 0xba, 0xd0, 0x6d, 0x29, 0x11, 0x2e, 0xed, 0x66, 0x9e, 0xe7, 0xf9, 0xcd,
	0xef, 0xf7, 0xfc, 0xdb, 0x85, 0x67, 0x2b, 0x76, 0x79, 0xb5, 0xfe, 0x84, 0xd4, 0x71, 0xd9, 0x5e,
	0xf3, 0x6d, 0xb3, 0x46, 0xb9, 0x67, 0x3b, 0x16, 0xae, 0x69, 0x78, 0xcd, 0xa7, 0x6e, 0x5d, 0xad,
	0xba, 0xcc, 0x63, 0x68, 0x24, 0x72, 0x53, 0x63, 0x6e, 0x6a, 0x4d, 0xcb, 0x0e, 0x92, 0x8a, 0xed,
	0x30, 0x2c, 0x7e, 0x43, 0xef, 0xec, 0x54, 0x89, 0xf1, 0x0a, 0xe3, 0xd8, 0x20, 0x9c, 0x86, 0x30,
	0xb8, 0xa6, 0x19, 0xd4, 0x23, 0x1a, 0xae, 0x12, 0xcb, 0x76, 0x88, 0x67, 0x33, 0x47, 0xfa, 0x2a,
	0xcd, 0xbe, 0x91, 0x57, 0x89, 0xd9, 0x91, 0x7d, 0xc8, 0x62, 0x16, 0x13, 0x8f, 0x38, 0x78, 0x92,
	0xa7, 0xa7, 0x2c, 0xc6, 0xac, 0x32, 0xc5, 0xa4, 0x6a, 0x63, 0xe2, 0x38, 0xcc, 0x13, 0x90, 0x5c,
	0x5a, 0xc7, 0x93, 0x45, 0x55, 0x89, 0x4b, 0x2a, 0xd2, 0x2f, 0x5f, 0x80, 0xa7, 0x1f, 0x04, 0xec,
	0x96, 0x39, 0x75, 0xef, 0x3b, 0xdc, 0x77, 0x89, 0x53, 0xa2, 0x8b, 0xbe, 0x63, 0xea, 0x74, 0xcd,
	0xa7, 0xdc, 0x43, 0x39, 0xf8, 0xaf, 0xcf, 0xa9, 0x5b, 0x24, 0xa6, 0xe9, 0x52, 0xce, 0x87, 0xc1,
	0x18, 0x98, 0xe8, 0xd7, 0x07, 0x82, 0xb3, 0x85, 0xf0, 0x28, 0xff, 0x1b, 0x40, 0x25, 0x09, 0x84,
	0x57, 0x99, 0xc3, 0x29, 0xa2, 0xb0, 0xcf, 0x20, 0xe5, 0xe0, 0x78, 0x18, 0x8c, 0xf5, 0x4c, 0x0c,
	0xcc, 0x8e, 0xa8, 0xa1, 0x68, 0x35, 0x10, 0xad, 0x4a, 0xd1, 0xea, 0x2d, 0x66, 0x3b, 0x85, 0x99,
	0x8d, 0x6f, 0xa3, 0xa9, 0x77, 0xdf, 0x47, 0x27, 0x2c, 0xdb, 0x5b, 0xf1, 0x0d, 0xb5, 0xc4, 0x2a,
	0x58, 0x66, 0x28, 0xfc, 0x9b, 0xe6, 0xe6, 0x2a, 0xf6, 0xea, 0x55, 0xca, 0x45, 0x00, 0xd7, 0x23,
	0x6c, 0x54, 0x84, 0xbd, 0x3e, 0xa7, 0xe6, 0x70, 0xfa, 0xef, 0xdf, 0x21, 0x80, 0xf3, 0x2b, 0x49,
	0x4a, 0x79, 0x94, 0xaf, 0x45, 0x08, 0x77, 0x0a, 0x2c, 0xb2, 0x35, 0x30, 0x3b, 0x1e, 0x23, 0x12,
	0x36, 0x55, 0x44, 0x67, 0x89, 0x58, 0x54, 0xc6, 0xea, 0x4d, 0x91, 0xf9, 0xf5, 0x34, 0x3c, 0xb1,
	0xe7, 0x96, 0xdb, 0xc4, 0x23, 0xfb, 0xa8, 0x48, 0x73, 0xba, 0xd3, 0x47, 0x90, 0xee, 0x9e, 0xc3,
	0x4a, 0x77, 0x03, 0xc0, 0xd1, 0xc4, 0x7c, 0xcb, 0xd6, 0x32, 0xe1, 0x31, 0x3b, 0xb2, 0x14, 0x1f,
	0x07, 0x26, 0xd9, 0x62, 0x33, 0x6a, 0xe2, 0xc4, 0xaa, 0x2d, 0x33, 0x5b, 0xe8, 0x0f, 0x68, 0xbe,
	0xfd, 0xf5, 0x61, 0x0a, 0xe8, 0xff, 0xdb, 0xb1, 0xdb, 0xd0, 0xdd, 0x58, 0x59, 0xd3, 0xa2, 0xac,
	0xe7, 0x3a, 0x96, 0x35, 0xa4, 0x18, 0xab, 0xeb, 0x1d, 0x38, 0xb6, 0xad, 0x48, 0xa7, 0xdc, 0x23,
	0xab, 0xc4, 0x28, 0xd3, 0x05, 0xce, 0xa9, 0xc7, 0xbb, 0x98, 0xb9, 0x97, 0x00, 0xe6, 0xda, 0xe0,
	0xc8, 0xdc, 0x94, 0x60, 0x86, 0x54, 0x98, 0xef, 0x78, 0x87, 0x31, 0x75, 0x12, 0x3a, 0x7f, 0x12,
	0x8e, 0x08, 0x26, 0xad, 0xd6, 0x47, 0xfe, 0x05, 0x80, 0xd9, 0x56, 0xd6, 0xa3, 0x24, 0x38, 0x04,
	0x91, 0xa0, 0xb0, 0x24, 0x16, 0x5f, 0xc4, 0xec, 0x21, 0x3c, 0x1e, 0x3b, 0x95, 0x8c, 0x6e, 0xc2,
	0x4c, 0xb8, 0x20, 0xe5, 0xec, 0xe6, 0xda, 0x74, 0x51, 0x18, 0x5a, 0xe8, 0x0d, 0x98, 0xe9, 0x32,
	0x6c, 0xf6, 0x53, 0x1f, 0xfc, 0x47, 0x00, 0xa3, 0x06, 0x80, 0x83, 0x7b, 0x1a, 0x0d, 0x5d, 0x69,
	0x03, 0xd8, 0x76, 0x15, 0x67, 0xaf, 0x1e, 0x20, 0x32, 0x54, 0x95, 0x5f, 0x5c, 0xff, 0xfc, 0xf3,
	0x4d, 0x7a, 0x1e, 0xdd, 0xc0, 0xc9, 0xef, 0x05, 0xd1, 0x72, 0xbb, 0x46, 0x09, 0x3f, 0x6b, 0x6e,
	0xc4, 0xe7, 0xe8, 0x23, 0x80, 0x68, 0xef, 0x2c, 0xa2, 0xee, 0x99, 0x45, 0x65, 0xc8, 0x5e, 0x3b,
	0x48, 0xa8, 0x54, 0x75, 0x59, 0xa8, 0xd2, 0x10, 0xee, 0x52, 0x15, 0xfa, 0x0a, 0xe0, 0x50, 0xab,
	0xc1, 0x41, 0x73, 0xfb, 0x61, 0x93, 0x30, 0xb6, 0xd9, 0xeb, 0x07, 0x0b, 0x96, 0x62, 0xee, 0x09,
	0x31, 0x05, 0x34, 0xdf, 0x49, 0x8c, 0xbb, 0x8d, 0x50, 0x24, 0x02, 0x62, 0x77, 0x91, 0xde, 0x03,
	0xf8, 0x5f, 0xbc, 0xe7, 0x2e, 0x76, 0x62, 0xd6, 0xb2, 0xdf, 0x2e, 0x75, 0x19, 0x25, 0x85, 0x68,
	0x42, 0xc8, 0x79, 0x34, 0xd9, 0x46, 0x48, 0xbc, 0x20, 0xe8, 0x35, 0x80, 0x99, 0x70, 0x98, 0xd0,
	0x74, 0xa7, 0x4b, 0x63, 0x53, 0x9c, 0x55, 0xf7, 0xeb, 0x2e, 0xc9, 0x4d, 0x0a, 0x72, 0x67, 0x50,
	0x0e, 0x77, 0xfa, 0x40, 0x2a, 0x2c, 0x6f, 0x6c, 0x2a, 0xa0, 0xb1, 0xa9, 0x80, 0x1f, 0x9b, 0x0a,
	0x78, 0xb5, 0xa5, 0xa4, 0x1a, 0x5b, 0x4a, 0xea, 0xcb, 0x96, 0x92, 0x7a, 0x34, 0xd7, 0xb4, 0x82,
	0x22, 0x98, 0xe9, 0x32, 0x31, 0xf8, 0x0e, 0x68, 0x4d, 0xd3, 0xf0, 0xd3, 0x5d, 0xd0, 0x62, 0x37,
	0x19, 0x19, 0xf1, 0xe1, 0x75, 0xe1, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xcf, 0x07, 0x14,
	0x77, 0x0a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// UserInsuranceFund defines a gRPC query method that returns the user's
	// insurance fund balance given their address.
	UserInsuranceFund(ctx context.Context, in *QueryUserInsuranceFundRequest, opts ...grpc.CallOption) (*QueryUserInsuranceFundResponse, error)
	// UserInsuranceFunds defines a gRPC query method that returns all user's
	// insurance fund balance.
	UserInsuranceFunds(ctx context.Context, in *QueryUserInsuranceFundsRequest, opts ...grpc.CallOption) (*QueryUserInsuranceFundsResponse, error)
	// UserRestakableAssets defines a gRPC query method that returns
	// the amount of assets that can be restaked from the one minted by this
	// module.
	UserRestakableAssets(ctx context.Context, in *QueryUserRestakableAssetsRequest, opts ...grpc.CallOption) (*QueryUserRestakableAssetsResponse, error)
	// InsuranceFund defines a gRPC query method that returns the amount of tokens
	// that are in the insurance fund.
	InsuranceFund(ctx context.Context, in *QueryInsuranceFundRequest, opts ...grpc.CallOption) (*QueryInsuranceFundResponse, error)
	// Params defines a gRPC query method that returns the parameters of the
	// module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) UserInsuranceFund(ctx context.Context, in *QueryUserInsuranceFundRequest, opts ...grpc.CallOption) (*QueryUserInsuranceFundResponse, error) {
	out := new(QueryUserInsuranceFundResponse)
	err := c.cc.Invoke(ctx, "/milkyway.liquidvesting.v1.Query/UserInsuranceFund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserInsuranceFunds(ctx context.Context, in *QueryUserInsuranceFundsRequest, opts ...grpc.CallOption) (*QueryUserInsuranceFundsResponse, error) {
	out := new(QueryUserInsuranceFundsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.liquidvesting.v1.Query/UserInsuranceFunds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserRestakableAssets(ctx context.Context, in *QueryUserRestakableAssetsRequest, opts ...grpc.CallOption) (*QueryUserRestakableAssetsResponse, error) {
	out := new(QueryUserRestakableAssetsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.liquidvesting.v1.Query/UserRestakableAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InsuranceFund(ctx context.Context, in *QueryInsuranceFundRequest, opts ...grpc.CallOption) (*QueryInsuranceFundResponse, error) {
	out := new(QueryInsuranceFundResponse)
	err := c.cc.Invoke(ctx, "/milkyway.liquidvesting.v1.Query/InsuranceFund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.liquidvesting.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// UserInsuranceFund defines a gRPC query method that returns the user's
	// insurance fund balance given their address.
	UserInsuranceFund(context.Context, *QueryUserInsuranceFundRequest) (*QueryUserInsuranceFundResponse, error)
	// UserInsuranceFunds defines a gRPC query method that returns all user's
	// insurance fund balance.
	UserInsuranceFunds(context.Context, *QueryUserInsuranceFundsRequest) (*QueryUserInsuranceFundsResponse, error)
	// UserRestakableAssets defines a gRPC query method that returns
	// the amount of assets that can be restaked from the one minted by this
	// module.
	UserRestakableAssets(context.Context, *QueryUserRestakableAssetsRequest) (*QueryUserRestakableAssetsResponse, error)
	// InsuranceFund defines a gRPC query method that returns the amount of tokens
	// that are in the insurance fund.
	InsuranceFund(context.Context, *QueryInsuranceFundRequest) (*QueryInsuranceFundResponse, error)
	// Params defines a gRPC query method that returns the parameters of the
	// module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) UserInsuranceFund(ctx context.Context, req *QueryUserInsuranceFundRequest) (*QueryUserInsuranceFundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInsuranceFund not implemented")
}
func (*UnimplementedQueryServer) UserInsuranceFunds(ctx context.Context, req *QueryUserInsuranceFundsRequest) (*QueryUserInsuranceFundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserInsuranceFunds not implemented")
}
func (*UnimplementedQueryServer) UserRestakableAssets(ctx context.Context, req *QueryUserRestakableAssetsRequest) (*QueryUserRestakableAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRestakableAssets not implemented")
}
func (*UnimplementedQueryServer) InsuranceFund(ctx context.Context, req *QueryInsuranceFundRequest) (*QueryInsuranceFundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsuranceFund not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_UserInsuranceFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserInsuranceFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserInsuranceFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.liquidvesting.v1.Query/UserInsuranceFund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserInsuranceFund(ctx, req.(*QueryUserInsuranceFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserInsuranceFunds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserInsuranceFundsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserInsuranceFunds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.liquidvesting.v1.Query/UserInsuranceFunds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserInsuranceFunds(ctx, req.(*QueryUserInsuranceFundsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserRestakableAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserRestakableAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserRestakableAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.liquidvesting.v1.Query/UserRestakableAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserRestakableAssets(ctx, req.(*QueryUserRestakableAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InsuranceFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryInsuranceFundRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InsuranceFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.liquidvesting.v1.Query/InsuranceFund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InsuranceFund(ctx, req.(*QueryInsuranceFundRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.liquidvesting.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var Query_serviceDesc = _Query_serviceDesc
var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milkyway.liquidvesting.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UserInsuranceFund",
			Handler:    _Query_UserInsuranceFund_Handler,
		},
		{
			MethodName: "UserInsuranceFunds",
			Handler:    _Query_UserInsuranceFunds_Handler,
		},
		{
			MethodName: "UserRestakableAssets",
			Handler:    _Query_UserRestakableAssets_Handler,
		},
		{
			MethodName: "InsuranceFund",
			Handler:    _Query_InsuranceFund_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milkyway/liquidvesting/v1/query.proto",
}

func (m *QueryUserInsuranceFundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserInsuranceFundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserInsuranceFundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserInsuranceFundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserInsuranceFundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserInsuranceFundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Used) > 0 {
		for iNdEx := len(m.Used) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Used[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserInsuranceFundsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserInsuranceFundsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserInsuranceFundsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserInsuranceFundData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInsuranceFundData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInsuranceFundData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Used) > 0 {
		for iNdEx := len(m.Used) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Used[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserInsuranceFundsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserInsuranceFundsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserInsuranceFundsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InsuranceFunds) > 0 {
		for iNdEx := len(m.InsuranceFunds) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InsuranceFunds[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserRestakableAssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserRestakableAssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserRestakableAssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserRestakableAssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserRestakableAssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserRestakableAssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceFundRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceFundRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceFundRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryInsuranceFundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryInsuranceFundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryInsuranceFundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryUserInsuranceFundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserInsuranceFundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Used) > 0 {
		for _, e := range m.Used {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUserInsuranceFundsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *UserInsuranceFundData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.Used) > 0 {
		for _, e := range m.Used {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryUserInsuranceFundsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InsuranceFunds) > 0 {
		for _, e := range m.InsuranceFunds {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserRestakableAssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserRestakableAssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryInsuranceFundRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryInsuranceFundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryUserInsuranceFundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserInsuranceFundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserInsuranceFundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserInsuranceFundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserInsuranceFundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserInsuranceFundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, types.Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Used = append(m.Used, types.Coin{})
			if err := m.Used[len(m.Used)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserInsuranceFundsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserInsuranceFundsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserInsuranceFundsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInsuranceFundData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInsuranceFundData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInsuranceFundData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, types.Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Used", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Used = append(m.Used, types.Coin{})
			if err := m.Used[len(m.Used)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserInsuranceFundsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserInsuranceFundsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserInsuranceFundsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsuranceFunds", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InsuranceFunds = append(m.InsuranceFunds, UserInsuranceFundData{})
			if err := m.InsuranceFunds[len(m.InsuranceFunds)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserRestakableAssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserRestakableAssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserRestakableAssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserRestakableAssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserRestakableAssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserRestakableAssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceFundRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceFundRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceFundRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryInsuranceFundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryInsuranceFundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryInsuranceFundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
