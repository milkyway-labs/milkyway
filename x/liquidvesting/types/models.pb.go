// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/liquidvesting/v1/models.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// UserInsuranceFund defines a user's insurance fund.
type UserInsuranceFund struct {
	// Amount of coins deposited into the user's insurance fund.
	Balance github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balance"`
}

func (m *UserInsuranceFund) Reset()         { *m = UserInsuranceFund{} }
func (m *UserInsuranceFund) String() string { return proto.CompactTextString(m) }
func (*UserInsuranceFund) ProtoMessage()    {}
func (*UserInsuranceFund) Descriptor() ([]byte, []int) {
	return fileDescriptor_2106835df08f3d44, []int{0}
}
func (m *UserInsuranceFund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInsuranceFund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInsuranceFund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInsuranceFund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInsuranceFund.Merge(m, src)
}
func (m *UserInsuranceFund) XXX_Size() int {
	return m.Size()
}
func (m *UserInsuranceFund) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInsuranceFund.DiscardUnknown(m)
}

var xxx_messageInfo_UserInsuranceFund proto.InternalMessageInfo

func (m *UserInsuranceFund) GetBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balance
	}
	return nil
}

// BurnCoins is a struct that contains the information about the coins to burn
// once the unbonding period of the locked representation tokens ends.
type BurnCoins struct {
	// Address of who has delegated the coins.
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	// CompletionTime is the unix time for unbonding completion.
	CompletionTime time.Time `protobuf:"bytes,2,opt,name=completion_time,json=completionTime,proto3,stdtime" json:"completion_time"`
	// Amount of coins to be burned from the delegator address.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *BurnCoins) Reset()         { *m = BurnCoins{} }
func (m *BurnCoins) String() string { return proto.CompactTextString(m) }
func (*BurnCoins) ProtoMessage()    {}
func (*BurnCoins) Descriptor() ([]byte, []int) {
	return fileDescriptor_2106835df08f3d44, []int{1}
}
func (m *BurnCoins) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnCoins) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnCoins.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BurnCoins) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnCoins.Merge(m, src)
}
func (m *BurnCoins) XXX_Size() int {
	return m.Size()
}
func (m *BurnCoins) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnCoins.DiscardUnknown(m)
}

var xxx_messageInfo_BurnCoins proto.InternalMessageInfo

// BurnCoinsList represents a list of BurnCoins.
type BurnCoinsList struct {
	Data []BurnCoins `protobuf:"bytes,1,rep,name=data,proto3" json:"data"`
}

func (m *BurnCoinsList) Reset()         { *m = BurnCoinsList{} }
func (m *BurnCoinsList) String() string { return proto.CompactTextString(m) }
func (*BurnCoinsList) ProtoMessage()    {}
func (*BurnCoinsList) Descriptor() ([]byte, []int) {
	return fileDescriptor_2106835df08f3d44, []int{2}
}
func (m *BurnCoinsList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BurnCoinsList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BurnCoinsList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BurnCoinsList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BurnCoinsList.Merge(m, src)
}
func (m *BurnCoinsList) XXX_Size() int {
	return m.Size()
}
func (m *BurnCoinsList) XXX_DiscardUnknown() {
	xxx_messageInfo_BurnCoinsList.DiscardUnknown(m)
}

var xxx_messageInfo_BurnCoinsList proto.InternalMessageInfo

func (m *BurnCoinsList) GetData() []BurnCoins {
	if m != nil {
		return m.Data
	}
	return nil
}

// UserInsuranceFundEntry represents an entry containing the data of a user
// insurance fund.
type UserInsuranceFundEntry struct {
	// Address of who owns the insurance fund.
	UserAddress string `protobuf:"bytes,1,opt,name=user_address,json=userAddress,proto3" json:"user_address,omitempty"`
	// Amount of coins deposited into the user's insurance fund.
	Balance github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=balance,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"balance"`
}

func (m *UserInsuranceFundEntry) Reset()         { *m = UserInsuranceFundEntry{} }
func (m *UserInsuranceFundEntry) String() string { return proto.CompactTextString(m) }
func (*UserInsuranceFundEntry) ProtoMessage()    {}
func (*UserInsuranceFundEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_2106835df08f3d44, []int{3}
}
func (m *UserInsuranceFundEntry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInsuranceFundEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInsuranceFundEntry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInsuranceFundEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInsuranceFundEntry.Merge(m, src)
}
func (m *UserInsuranceFundEntry) XXX_Size() int {
	return m.Size()
}
func (m *UserInsuranceFundEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInsuranceFundEntry.DiscardUnknown(m)
}

var xxx_messageInfo_UserInsuranceFundEntry proto.InternalMessageInfo

func (m *UserInsuranceFundEntry) GetUserAddress() string {
	if m != nil {
		return m.UserAddress
	}
	return ""
}

func (m *UserInsuranceFundEntry) GetBalance() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Balance
	}
	return nil
}

// CoveredLockedShares represents the total covered locked shares of each
// delegation target.
type CoveredLockedShares struct {
	// shares defines the total covered locked shares of the delegation target.
	Shares github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=shares,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"shares"`
}

func (m *CoveredLockedShares) Reset()         { *m = CoveredLockedShares{} }
func (m *CoveredLockedShares) String() string { return proto.CompactTextString(m) }
func (*CoveredLockedShares) ProtoMessage()    {}
func (*CoveredLockedShares) Descriptor() ([]byte, []int) {
	return fileDescriptor_2106835df08f3d44, []int{4}
}
func (m *CoveredLockedShares) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CoveredLockedShares) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CoveredLockedShares.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CoveredLockedShares) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CoveredLockedShares.Merge(m, src)
}
func (m *CoveredLockedShares) XXX_Size() int {
	return m.Size()
}
func (m *CoveredLockedShares) XXX_DiscardUnknown() {
	xxx_messageInfo_CoveredLockedShares.DiscardUnknown(m)
}

var xxx_messageInfo_CoveredLockedShares proto.InternalMessageInfo

func (m *CoveredLockedShares) GetShares() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.Shares
	}
	return nil
}

func init() {
	proto.RegisterType((*UserInsuranceFund)(nil), "milkyway.liquidvesting.v1.UserInsuranceFund")
	proto.RegisterType((*BurnCoins)(nil), "milkyway.liquidvesting.v1.BurnCoins")
	proto.RegisterType((*BurnCoinsList)(nil), "milkyway.liquidvesting.v1.BurnCoinsList")
	proto.RegisterType((*UserInsuranceFundEntry)(nil), "milkyway.liquidvesting.v1.UserInsuranceFundEntry")
	proto.RegisterType((*CoveredLockedShares)(nil), "milkyway.liquidvesting.v1.CoveredLockedShares")
}

func init() {
	proto.RegisterFile("milkyway/liquidvesting/v1/models.proto", fileDescriptor_2106835df08f3d44)
}

var fileDescriptor_2106835df08f3d44 = []byte{
	// 555 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xbf, 0x6f, 0xd3, 0x4e,
	0x14, 0xf7, 0xa5, 0x5f, 0xe5, 0x4b, 0x2e, 0x14, 0x88, 0xa9, 0x50, 0x12, 0x21, 0x3b, 0x8a, 0x10,
	0x8a, 0x40, 0xb9, 0x23, 0xed, 0x44, 0x99, 0x70, 0x28, 0x12, 0x52, 0xa7, 0x34, 0x2c, 0x2c, 0xd1,
	0xd9, 0x3e, 0xdc, 0x53, 0xec, 0xbb, 0xe0, 0x3b, 0x1b, 0xc2, 0xc4, 0xc8, 0xd8, 0x85, 0xbd, 0x23,
	0x62, 0x62, 0x60, 0xe4, 0x0f, 0xe8, 0x58, 0x31, 0x31, 0x51, 0x94, 0x0c, 0xf0, 0x67, 0x20, 0xdb,
	0xe7, 0x50, 0x7e, 0x49, 0x1d, 0x60, 0x49, 0xee, 0xbd, 0xf7, 0x79, 0xef, 0x7d, 0xde, 0xe7, 0x3d,
	0x19, 0x5e, 0x8f, 0x58, 0x38, 0x9d, 0x3f, 0x25, 0x73, 0x1c, 0xb2, 0x27, 0x09, 0xf3, 0x53, 0x2a,
	0x15, 0xe3, 0x01, 0x4e, 0x07, 0x38, 0x12, 0x3e, 0x0d, 0x25, 0x9a, 0xc5, 0x42, 0x09, 0xb3, 0x55,
	0xe2, 0xd0, 0x0f, 0x38, 0x94, 0x0e, 0xda, 0x0d, 0x12, 0x31, 0x2e, 0x70, 0xfe, 0x5b, 0xa0, 0xdb,
	0x96, 0x27, 0x64, 0x24, 0x24, 0x76, 0x89, 0xa4, 0x38, 0x1d, 0xb8, 0x54, 0x91, 0x01, 0xf6, 0x04,
	0xe3, 0x3a, 0xde, 0x2a, 0xe2, 0x93, 0xdc, 0xc2, 0x85, 0xa1, 0x43, 0x1b, 0x81, 0x08, 0x44, 0xe1,
	0xcf, 0x5e, 0xda, 0x6b, 0x07, 0x42, 0x04, 0x21, 0xc5, 0xb9, 0xe5, 0x26, 0x8f, 0xb1, 0x62, 0x11,
	0x95, 0x8a, 0x44, 0xb3, 0x02, 0xd0, 0x7d, 0x0e, 0x1b, 0x0f, 0x25, 0x8d, 0x1f, 0x70, 0x99, 0xc4,
	0x84, 0x7b, 0xf4, 0x7e, 0xc2, 0x7d, 0x93, 0xc2, 0xff, 0x5d, 0x12, 0x66, 0x66, 0x13, 0x74, 0xd6,
	0x7a, 0xf5, 0xcd, 0x16, 0xd2, 0xbd, 0x32, 0x62, 0x48, 0x13, 0x43, 0x43, 0xc1, 0xb8, 0x73, 0xeb,
	0xe8, 0x93, 0x6d, 0xbc, 0x39, 0xb1, 0x7b, 0x01, 0x53, 0xfb, 0x89, 0x8b, 0x3c, 0x11, 0x69, 0x62,
	0xfa, 0xaf, 0x2f, 0xfd, 0x29, 0x56, 0xf3, 0x19, 0x95, 0x79, 0x82, 0x1c, 0x95, 0xb5, 0xbb, 0xaf,
	0x2a, 0xb0, 0xe6, 0x24, 0x31, 0xcf, 0xdd, 0xe6, 0x0e, 0x6c, 0xf8, 0x34, 0xa4, 0x01, 0x51, 0x22,
	0x9e, 0x10, 0xdf, 0x8f, 0xa9, 0x94, 0x4d, 0xd0, 0x01, 0xbd, 0x9a, 0xd3, 0xfc, 0xf0, 0xae, 0xbf,
	0xa1, 0x19, 0xdc, 0x2d, 0x22, 0x7b, 0x2a, 0x66, 0x3c, 0x18, 0x5d, 0x5a, 0xa5, 0x68, 0xbf, 0x39,
	0x82, 0x17, 0x3d, 0x11, 0xcd, 0x42, 0xaa, 0x98, 0xe0, 0x93, 0x6c, 0xdc, 0x66, 0xa5, 0x03, 0x7a,
	0xf5, 0xcd, 0x36, 0x2a, 0xb4, 0x40, 0xa5, 0x16, 0x68, 0x5c, 0x6a, 0xe1, 0xac, 0x67, 0x43, 0x1c,
	0x9c, 0xd8, 0xe0, 0xf5, 0x97, 0xb7, 0x37, 0xc0, 0xe8, 0xc2, 0xf7, 0x0a, 0x19, 0xc6, 0xf4, 0x60,
	0x95, 0x44, 0x22, 0xe1, 0xaa, 0xb9, 0xf6, 0xf7, 0xe5, 0xd0, 0xa5, 0xb7, 0xcf, 0xbd, 0x3c, 0xb4,
	0x8d, 0xaf, 0x87, 0xb6, 0xd1, 0x1d, 0xc3, 0xf5, 0x95, 0x2c, 0xbb, 0x4c, 0x2a, 0x73, 0x08, 0xff,
	0xf3, 0x89, 0x22, 0x7a, 0x19, 0xd7, 0xd0, 0x1f, 0x6f, 0x0a, 0xad, 0xf2, 0x9c, 0x5a, 0x46, 0xa4,
	0x18, 0x27, 0x4f, 0xee, 0xbe, 0x07, 0xf0, 0xca, 0x2f, 0xab, 0xde, 0xe1, 0x2a, 0x9e, 0x9b, 0x77,
	0xe0, 0xf9, 0x44, 0xd2, 0xb3, 0xab, 0x5e, 0xcf, 0xd0, 0xa5, 0xe0, 0xa7, 0x8e, 0xa5, 0xf2, 0x0f,
	0x8f, 0xe5, 0x05, 0x80, 0x97, 0x87, 0x22, 0xa5, 0x31, 0xf5, 0x77, 0x85, 0x37, 0xa5, 0xfe, 0xde,
	0x3e, 0x89, 0xa9, 0x34, 0x19, 0xac, 0xca, 0xfc, 0xa5, 0xd5, 0xb9, 0xfa, 0xdb, 0xee, 0xf7, 0xa8,
	0x97, 0x13, 0xd8, 0xd2, 0x04, 0x6e, 0x9e, 0x81, 0x80, 0xce, 0x91, 0x23, 0xdd, 0xc0, 0x19, 0x1f,
	0x2d, 0x2c, 0x70, 0xbc, 0xb0, 0xc0, 0xe7, 0x85, 0x05, 0x0e, 0x96, 0x96, 0x71, 0xbc, 0xb4, 0x8c,
	0x8f, 0x4b, 0xcb, 0x78, 0xb4, 0x7d, 0xaa, 0x5c, 0xb9, 0x9c, 0x7e, 0x48, 0x5c, 0xb9, 0xb2, 0x70,
	0x7a, 0x1b, 0x3f, 0xfb, 0xe9, 0x5b, 0x91, 0xb7, 0x71, 0xab, 0xf9, 0x3d, 0x6e, 0x7d, 0x0b, 0x00,
	0x00, 0xff, 0xff, 0x92, 0x5e, 0xc4, 0xbc, 0x52, 0x04, 0x00, 0x00,
}

func (m *UserInsuranceFund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInsuranceFund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInsuranceFund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BurnCoins) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnCoins) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BurnCoins) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.CompletionTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintModels(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x12
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintModels(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BurnCoinsList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BurnCoinsList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BurnCoinsList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserInsuranceFundEntry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInsuranceFundEntry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserInsuranceFundEntry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for iNdEx := len(m.Balance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Balance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.UserAddress) > 0 {
		i -= len(m.UserAddress)
		copy(dAtA[i:], m.UserAddress)
		i = encodeVarintModels(dAtA, i, uint64(len(m.UserAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CoveredLockedShares) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CoveredLockedShares) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CoveredLockedShares) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for iNdEx := len(m.Shares) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Shares[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintModels(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintModels(dAtA []byte, offset int, v uint64) int {
	offset -= sovModels(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserInsuranceFund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *BurnCoins) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.CompletionTime)
	n += 1 + l + sovModels(uint64(l))
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *BurnCoinsList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *UserInsuranceFundEntry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UserAddress)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Balance) > 0 {
		for _, e := range m.Balance {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *CoveredLockedShares) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Shares) > 0 {
		for _, e := range m.Shares {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func sovModels(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserInsuranceFund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInsuranceFund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInsuranceFund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, types.Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurnCoins) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnCoins: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnCoins: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompletionTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.CompletionTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BurnCoinsList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BurnCoinsList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BurnCoinsList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, BurnCoins{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInsuranceFundEntry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInsuranceFundEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInsuranceFundEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = append(m.Balance, types.Coin{})
			if err := m.Balance[len(m.Balance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CoveredLockedShares) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CoveredLockedShares: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CoveredLockedShares: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModels
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shares = append(m.Shares, types.DecCoin{})
			if err := m.Shares[len(m.Shares)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModels
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModels
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModels        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModels = fmt.Errorf("proto: unexpected end of group")
)
