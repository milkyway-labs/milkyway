// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/liquidvesting/v1/messages.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgMintLockedRepresentation defines the message structure for the
// MintLockedRepresentation gRPC service method. It allows an authorized
// account to mint a user's staked locked tokens representation that can be
// used in the liquid vesting module.
type MsgMintLockedRepresentation struct {
	// User that want to trigger the tokens mint.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// User that will receive the minted tokens.
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// The amount of tokens that will be minted
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgMintLockedRepresentation) Reset()         { *m = MsgMintLockedRepresentation{} }
func (m *MsgMintLockedRepresentation) String() string { return proto.CompactTextString(m) }
func (*MsgMintLockedRepresentation) ProtoMessage()    {}
func (*MsgMintLockedRepresentation) Descriptor() ([]byte, []int) {
	return fileDescriptor_464962308475a38f, []int{0}
}
func (m *MsgMintLockedRepresentation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintLockedRepresentation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintLockedRepresentation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintLockedRepresentation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintLockedRepresentation.Merge(m, src)
}
func (m *MsgMintLockedRepresentation) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintLockedRepresentation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintLockedRepresentation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintLockedRepresentation proto.InternalMessageInfo

func (m *MsgMintLockedRepresentation) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgMintLockedRepresentation) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgMintLockedRepresentation) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// MsgMintLockedRepresentationResponse is the return value of
// MsgMintLockedRepresentation.
type MsgMintLockedRepresentationResponse struct {
}

func (m *MsgMintLockedRepresentationResponse) Reset()         { *m = MsgMintLockedRepresentationResponse{} }
func (m *MsgMintLockedRepresentationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintLockedRepresentationResponse) ProtoMessage()    {}
func (*MsgMintLockedRepresentationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_464962308475a38f, []int{1}
}
func (m *MsgMintLockedRepresentationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintLockedRepresentationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintLockedRepresentationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintLockedRepresentationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintLockedRepresentationResponse.Merge(m, src)
}
func (m *MsgMintLockedRepresentationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintLockedRepresentationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintLockedRepresentationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintLockedRepresentationResponse proto.InternalMessageInfo

// MsgBurnLockedRepresentation defines the message structure for the
// BurnLockedRepresentation gRPC service method. It allows an authorized
// account to burn a user's staked locked tokens representation.
type MsgBurnLockedRepresentation struct {
	// User that want to trigger the tokens burn.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// User from which we want to burn the tokens.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// The amount of tokens that will be burned from the user's balance.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgBurnLockedRepresentation) Reset()         { *m = MsgBurnLockedRepresentation{} }
func (m *MsgBurnLockedRepresentation) String() string { return proto.CompactTextString(m) }
func (*MsgBurnLockedRepresentation) ProtoMessage()    {}
func (*MsgBurnLockedRepresentation) Descriptor() ([]byte, []int) {
	return fileDescriptor_464962308475a38f, []int{2}
}
func (m *MsgBurnLockedRepresentation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnLockedRepresentation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnLockedRepresentation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnLockedRepresentation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnLockedRepresentation.Merge(m, src)
}
func (m *MsgBurnLockedRepresentation) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnLockedRepresentation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnLockedRepresentation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnLockedRepresentation proto.InternalMessageInfo

func (m *MsgBurnLockedRepresentation) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgBurnLockedRepresentation) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *MsgBurnLockedRepresentation) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// MsgBurnLockedRepresentationResponse is the return value of
// MsgBurnLockedRepresentation.
type MsgBurnLockedRepresentationResponse struct {
}

func (m *MsgBurnLockedRepresentationResponse) Reset()         { *m = MsgBurnLockedRepresentationResponse{} }
func (m *MsgBurnLockedRepresentationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnLockedRepresentationResponse) ProtoMessage()    {}
func (*MsgBurnLockedRepresentationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_464962308475a38f, []int{3}
}
func (m *MsgBurnLockedRepresentationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnLockedRepresentationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnLockedRepresentationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnLockedRepresentationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnLockedRepresentationResponse.Merge(m, src)
}
func (m *MsgBurnLockedRepresentationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnLockedRepresentationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnLockedRepresentationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnLockedRepresentationResponse proto.InternalMessageInfo

// MsgWithdrawInsuranceFund defines the message structure for the
// WithdrawInsuranceFund gRPC service method.
type MsgWithdrawInsuranceFund struct {
	// User that want to withdraw the tokens.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// The amount of tokens that will be withdrawn from the user's insurance fund.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgWithdrawInsuranceFund) Reset()         { *m = MsgWithdrawInsuranceFund{} }
func (m *MsgWithdrawInsuranceFund) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawInsuranceFund) ProtoMessage()    {}
func (*MsgWithdrawInsuranceFund) Descriptor() ([]byte, []int) {
	return fileDescriptor_464962308475a38f, []int{4}
}
func (m *MsgWithdrawInsuranceFund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawInsuranceFund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawInsuranceFund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawInsuranceFund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawInsuranceFund.Merge(m, src)
}
func (m *MsgWithdrawInsuranceFund) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawInsuranceFund) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawInsuranceFund.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawInsuranceFund proto.InternalMessageInfo

func (m *MsgWithdrawInsuranceFund) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgWithdrawInsuranceFund) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

type MsgWithdrawInsuranceFundResponse struct {
}

func (m *MsgWithdrawInsuranceFundResponse) Reset()         { *m = MsgWithdrawInsuranceFundResponse{} }
func (m *MsgWithdrawInsuranceFundResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawInsuranceFundResponse) ProtoMessage()    {}
func (*MsgWithdrawInsuranceFundResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_464962308475a38f, []int{5}
}
func (m *MsgWithdrawInsuranceFundResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawInsuranceFundResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawInsuranceFundResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawInsuranceFundResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawInsuranceFundResponse.Merge(m, src)
}
func (m *MsgWithdrawInsuranceFundResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawInsuranceFundResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawInsuranceFundResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawInsuranceFundResponse proto.InternalMessageInfo

// MsgUpdateParams defines the message structure for the UpdateParams gRPC
// service method. It allows the authority to update the module parameters.
type MsgUpdateParams struct {
	// Authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	// Params define the parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_464962308475a38f, []int{6}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse is the return value of MsgUpdateParams.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_464962308475a38f, []int{7}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgMintLockedRepresentation)(nil), "milkyway.liquidvesting.v1.MsgMintLockedRepresentation")
	proto.RegisterType((*MsgMintLockedRepresentationResponse)(nil), "milkyway.liquidvesting.v1.MsgMintLockedRepresentationResponse")
	proto.RegisterType((*MsgBurnLockedRepresentation)(nil), "milkyway.liquidvesting.v1.MsgBurnLockedRepresentation")
	proto.RegisterType((*MsgBurnLockedRepresentationResponse)(nil), "milkyway.liquidvesting.v1.MsgBurnLockedRepresentationResponse")
	proto.RegisterType((*MsgWithdrawInsuranceFund)(nil), "milkyway.liquidvesting.v1.MsgWithdrawInsuranceFund")
	proto.RegisterType((*MsgWithdrawInsuranceFundResponse)(nil), "milkyway.liquidvesting.v1.MsgWithdrawInsuranceFundResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "milkyway.liquidvesting.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "milkyway.liquidvesting.v1.MsgUpdateParamsResponse")
}

func init() {
	proto.RegisterFile("milkyway/liquidvesting/v1/messages.proto", fileDescriptor_464962308475a38f)
}

var fileDescriptor_464962308475a38f = []byte{
	// 679 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x95, 0x4f, 0x6b, 0x13, 0x4f,
	0x18, 0xc7, 0xb3, 0x6d, 0x7f, 0xe1, 0xd7, 0x69, 0x41, 0x5d, 0x2a, 0x4d, 0x22, 0x6c, 0xdb, 0xf5,
	0x0f, 0x21, 0xb4, 0xbb, 0x26, 0x2d, 0x82, 0x11, 0x94, 0x46, 0x10, 0x14, 0x03, 0x12, 0x15, 0xc1,
	0x4b, 0x99, 0xec, 0x0e, 0xdb, 0xa1, 0xd9, 0x99, 0xb8, 0xcf, 0x6c, 0x6a, 0x6e, 0xe2, 0x4d, 0x4f,
	0xe2, 0xd1, 0x77, 0xa0, 0xa7, 0x28, 0xbe, 0x88, 0x1e, 0x8b, 0x27, 0xbd, 0x54, 0x69, 0x0f, 0xb9,
	0x0b, 0xde, 0x65, 0x77, 0x27, 0xdb, 0x36, 0x74, 0x37, 0x25, 0x88, 0x78, 0x49, 0x32, 0xf3, 0x3c,
	0xdf, 0xe7, 0xcf, 0x87, 0x79, 0x9e, 0xa0, 0xa2, 0x4b, 0x5b, 0x5b, 0xdd, 0x6d, 0xdc, 0x35, 0x5b,
	0xf4, 0x99, 0x4f, 0xed, 0x0e, 0x01, 0x41, 0x99, 0x63, 0x76, 0xca, 0xa6, 0x4b, 0x00, 0xb0, 0x43,
	0xc0, 0x68, 0x7b, 0x5c, 0x70, 0x35, 0x3f, 0xf0, 0x34, 0x8e, 0x79, 0x1a, 0x9d, 0x72, 0xe1, 0x1c,
	0x76, 0x29, 0xe3, 0x66, 0xf8, 0x19, 0x79, 0x17, 0xf2, 0x16, 0x07, 0x97, 0xc3, 0x46, 0x78, 0x32,
	0xa3, 0x83, 0x34, 0xcd, 0x47, 0x27, 0xd3, 0x85, 0x28, 0x0d, 0x38, 0xd2, 0xa0, 0x49, 0x43, 0x13,
	0x03, 0x31, 0x3b, 0xe5, 0x26, 0x11, 0xb8, 0x6c, 0x5a, 0x9c, 0x32, 0x69, 0x9f, 0x73, 0xb8, 0xc3,
	0xa3, 0x80, 0xc1, 0x2f, 0x79, 0x7b, 0x25, 0xb9, 0x83, 0x36, 0xf6, 0xb0, 0x2b, 0xd3, 0xea, 0x1f,
	0x27, 0xd0, 0x85, 0x3a, 0x38, 0x75, 0xca, 0xc4, 0x7d, 0x6e, 0x6d, 0x11, 0xbb, 0x41, 0xda, 0x1e,
	0x01, 0xc2, 0x04, 0x16, 0x94, 0x33, 0xf5, 0x2a, 0xca, 0x02, 0x61, 0x36, 0xf1, 0x72, 0xca, 0xa2,
	0x52, 0x9c, 0xae, 0xe5, 0xbe, 0x7c, 0x5e, 0x99, 0x93, 0x85, 0xaf, 0xdb, 0xb6, 0x47, 0x00, 0x1e,
	0x0a, 0x8f, 0x32, 0xa7, 0x21, 0xfd, 0xd4, 0x35, 0xf4, 0xbf, 0x47, 0x2c, 0x42, 0x3b, 0xc4, 0xcb,
	0x4d, 0x8c, 0xd0, 0xc4, 0x9e, 0xaa, 0x40, 0x59, 0xec, 0x72, 0x9f, 0x89, 0xdc, 0xe4, 0xe2, 0x64,
	0x71, 0xa6, 0x92, 0x37, 0xa4, 0x20, 0x68, 0xdb, 0x90, 0x6d, 0x1b, 0xb7, 0x39, 0x65, 0xb5, 0xf5,
	0x9d, 0xbd, 0x85, 0xcc, 0x87, 0xef, 0x0b, 0x45, 0x87, 0x8a, 0x4d, 0xbf, 0x69, 0x58, 0xdc, 0x95,
	0x28, 0xe5, 0xd7, 0x0a, 0xd8, 0x5b, 0xa6, 0xe8, 0xb6, 0x09, 0x84, 0x02, 0x78, 0xd7, 0xef, 0x95,
	0x66, 0x5b, 0xc4, 0xc1, 0x56, 0x77, 0x23, 0x00, 0x07, 0x0d, 0x99, 0xab, 0xba, 0xf6, 0xb2, 0xdf,
	0x2b, 0xc9, 0xc2, 0x5f, 0xf7, 0x7b, 0xa5, 0x4b, 0x31, 0xb5, 0x14, 0x26, 0xfa, 0x65, 0x74, 0x31,
	0xc5, 0xdc, 0x20, 0xd0, 0xe6, 0x0c, 0x88, 0xfe, 0x3e, 0x42, 0x5b, 0xf3, 0x3d, 0xf6, 0x87, 0xd0,
	0x2e, 0xa3, 0x29, 0x1f, 0x4e, 0x81, 0x35, 0xf4, 0xfa, 0x17, 0x91, 0x26, 0xb1, 0x90, 0x48, 0x93,
	0xcc, 0x31, 0xd2, 0x5f, 0x0a, 0xca, 0xd5, 0xc1, 0x79, 0x42, 0xc5, 0xa6, 0xed, 0xe1, 0xed, 0xbb,
	0x0c, 0x7c, 0x0f, 0x33, 0x8b, 0xdc, 0xf1, 0x99, 0x3d, 0x06, 0xcf, 0x43, 0x42, 0x13, 0x7f, 0x91,
	0x50, 0x79, 0x88, 0xd0, 0xd2, 0x51, 0x42, 0x27, 0xb6, 0xa6, 0xeb, 0x68, 0x31, 0xc9, 0x16, 0xb3,
	0xf9, 0xa6, 0xa0, 0x33, 0x75, 0x70, 0x1e, 0xb7, 0x6d, 0x2c, 0xc8, 0x83, 0x70, 0xc6, 0xd5, 0x7b,
	0x68, 0x1a, 0xfb, 0x62, 0x93, 0x7b, 0x54, 0x74, 0x25, 0x95, 0xe5, 0x9f, 0x7b, 0x0b, 0x67, 0xbb,
	0xd8, 0x6d, 0x55, 0xf5, 0xd8, 0xa4, 0x27, 0x92, 0x3a, 0x94, 0xab, 0xb7, 0x50, 0x36, 0xda, 0x1c,
	0xe1, 0xf3, 0x9b, 0xa9, 0x2c, 0x19, 0x89, 0xab, 0xcf, 0x88, 0xd2, 0xd7, 0xa6, 0x02, 0x68, 0x0d,
	0x29, 0xab, 0x5e, 0x0f, 0xfa, 0x3e, 0x0c, 0x18, 0xb4, 0x9e, 0xb4, 0xa5, 0x86, 0xfa, 0xd0, 0xf3,
	0x68, 0x7e, 0xe8, 0x6a, 0xd0, 0x76, 0xe5, 0xd3, 0x14, 0x9a, 0xac, 0x83, 0xa3, 0xbe, 0x0d, 0x9e,
	0x46, 0xd2, 0x16, 0xbb, 0x96, 0x52, 0x6b, 0xca, 0x28, 0x17, 0x6e, 0x8e, 0xa7, 0x1b, 0x14, 0x17,
	0x16, 0x95, 0x38, 0xff, 0x23, 0x8a, 0x4a, 0xd2, 0x8d, 0x2a, 0x6a, 0xd4, 0x10, 0xa9, 0xaf, 0x14,
	0x74, 0xfe, 0xe4, 0x09, 0x5a, 0x4d, 0x8f, 0x7c, 0xa2, 0xa8, 0x70, 0x63, 0x0c, 0x51, 0x5c, 0x0b,
	0x43, 0xb3, 0xc7, 0x1e, 0x6c, 0x29, 0x3d, 0xd8, 0x51, 0xdf, 0x42, 0xe5, 0xf4, 0xbe, 0x83, 0x7c,
	0x85, 0xff, 0x5e, 0xf4, 0x7b, 0x25, 0xa5, 0xf6, 0x68, 0x67, 0x5f, 0x53, 0x76, 0xf7, 0x35, 0xe5,
	0xc7, 0xbe, 0xa6, 0xbc, 0x39, 0xd0, 0x32, 0xbb, 0x07, 0x5a, 0xe6, 0xeb, 0x81, 0x96, 0x79, 0x5a,
	0x3d, 0x32, 0xdf, 0x83, 0xf0, 0x2b, 0x2d, 0xdc, 0x84, 0xf8, 0x64, 0x76, 0x56, 0xcd, 0xe7, 0x43,
	0xef, 0x35, 0x9c, 0xfb, 0x66, 0x36, 0xfc, 0x4b, 0x5d, 0xfd, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x49,
	0x16, 0xdb, 0x9b, 0x3e, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// MintLockedRepresentation defines the operation to mint a user's staked
	// locked tokens representation that can be used in the liquid vesting module.
	MintLockedRepresentation(ctx context.Context, in *MsgMintLockedRepresentation, opts ...grpc.CallOption) (*MsgMintLockedRepresentationResponse, error)
	// BurnLockedRepresentation defines the operation to burn a user's staked
	// locked tokens representation.
	BurnLockedRepresentation(ctx context.Context, in *MsgBurnLockedRepresentation, opts ...grpc.CallOption) (*MsgBurnLockedRepresentationResponse, error)
	// WithdrawInsuranceFund defines the operation to withdraw an amount
	// of tokens from the user's insurance fund.
	// This can be used from the user to withdraw their funds after
	// some of their staking representations have been burned or if the
	// balance in the insurance fund is more than the required to cover all
	// their staking representations.
	WithdrawInsuranceFund(ctx context.Context, in *MsgWithdrawInsuranceFund, opts ...grpc.CallOption) (*MsgWithdrawInsuranceFundResponse, error)
	// UpdateParams defines a (governance) operation for updating the module
	// parameters.
	// The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) MintLockedRepresentation(ctx context.Context, in *MsgMintLockedRepresentation, opts ...grpc.CallOption) (*MsgMintLockedRepresentationResponse, error) {
	out := new(MsgMintLockedRepresentationResponse)
	err := c.cc.Invoke(ctx, "/milkyway.liquidvesting.v1.Msg/MintLockedRepresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnLockedRepresentation(ctx context.Context, in *MsgBurnLockedRepresentation, opts ...grpc.CallOption) (*MsgBurnLockedRepresentationResponse, error) {
	out := new(MsgBurnLockedRepresentationResponse)
	err := c.cc.Invoke(ctx, "/milkyway.liquidvesting.v1.Msg/BurnLockedRepresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawInsuranceFund(ctx context.Context, in *MsgWithdrawInsuranceFund, opts ...grpc.CallOption) (*MsgWithdrawInsuranceFundResponse, error) {
	out := new(MsgWithdrawInsuranceFundResponse)
	err := c.cc.Invoke(ctx, "/milkyway.liquidvesting.v1.Msg/WithdrawInsuranceFund", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.liquidvesting.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// MintLockedRepresentation defines the operation to mint a user's staked
	// locked tokens representation that can be used in the liquid vesting module.
	MintLockedRepresentation(context.Context, *MsgMintLockedRepresentation) (*MsgMintLockedRepresentationResponse, error)
	// BurnLockedRepresentation defines the operation to burn a user's staked
	// locked tokens representation.
	BurnLockedRepresentation(context.Context, *MsgBurnLockedRepresentation) (*MsgBurnLockedRepresentationResponse, error)
	// WithdrawInsuranceFund defines the operation to withdraw an amount
	// of tokens from the user's insurance fund.
	// This can be used from the user to withdraw their funds after
	// some of their staking representations have been burned or if the
	// balance in the insurance fund is more than the required to cover all
	// their staking representations.
	WithdrawInsuranceFund(context.Context, *MsgWithdrawInsuranceFund) (*MsgWithdrawInsuranceFundResponse, error)
	// UpdateParams defines a (governance) operation for updating the module
	// parameters.
	// The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) MintLockedRepresentation(ctx context.Context, req *MsgMintLockedRepresentation) (*MsgMintLockedRepresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintLockedRepresentation not implemented")
}
func (*UnimplementedMsgServer) BurnLockedRepresentation(ctx context.Context, req *MsgBurnLockedRepresentation) (*MsgBurnLockedRepresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnLockedRepresentation not implemented")
}
func (*UnimplementedMsgServer) WithdrawInsuranceFund(ctx context.Context, req *MsgWithdrawInsuranceFund) (*MsgWithdrawInsuranceFundResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawInsuranceFund not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_MintLockedRepresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintLockedRepresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintLockedRepresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.liquidvesting.v1.Msg/MintLockedRepresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintLockedRepresentation(ctx, req.(*MsgMintLockedRepresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnLockedRepresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnLockedRepresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnLockedRepresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.liquidvesting.v1.Msg/BurnLockedRepresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnLockedRepresentation(ctx, req.(*MsgBurnLockedRepresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawInsuranceFund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawInsuranceFund)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawInsuranceFund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.liquidvesting.v1.Msg/WithdrawInsuranceFund",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawInsuranceFund(ctx, req.(*MsgWithdrawInsuranceFund))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.liquidvesting.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milkyway.liquidvesting.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MintLockedRepresentation",
			Handler:    _Msg_MintLockedRepresentation_Handler,
		},
		{
			MethodName: "BurnLockedRepresentation",
			Handler:    _Msg_BurnLockedRepresentation_Handler,
		},
		{
			MethodName: "WithdrawInsuranceFund",
			Handler:    _Msg_WithdrawInsuranceFund_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milkyway/liquidvesting/v1/messages.proto",
}

func (m *MsgMintLockedRepresentation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintLockedRepresentation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintLockedRepresentation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintLockedRepresentationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintLockedRepresentationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintLockedRepresentationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurnLockedRepresentation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnLockedRepresentation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnLockedRepresentation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnLockedRepresentationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnLockedRepresentationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnLockedRepresentationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawInsuranceFund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawInsuranceFund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawInsuranceFund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawInsuranceFundResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawInsuranceFundResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawInsuranceFundResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMintLockedRepresentation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *MsgMintLockedRepresentationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurnLockedRepresentation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *MsgBurnLockedRepresentationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawInsuranceFund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *MsgWithdrawInsuranceFundResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovMessages(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMintLockedRepresentation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintLockedRepresentation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintLockedRepresentation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintLockedRepresentationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintLockedRepresentationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintLockedRepresentationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnLockedRepresentation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnLockedRepresentation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnLockedRepresentation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnLockedRepresentationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnLockedRepresentationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnLockedRepresentationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawInsuranceFund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawInsuranceFund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawInsuranceFund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawInsuranceFundResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawInsuranceFundResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawInsuranceFundResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
