// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: milkyway/liquidvesting/v1/messages.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgMintStakingRepresentation defines the message structure for the
// MintStakingRepresentation gRPC service method. It allows an authorized
// account to mint an user's staked vested tokens representation that can be
// used in the liquid staking module.
type MsgMintStakingRepresentation struct {
	// User that want to triger the tokens mint.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// User that will receive the minted tokens.
	Receiver string `protobuf:"bytes,2,opt,name=receiver,proto3" json:"receiver,omitempty"`
	// The amount of tokens that will be minted
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgMintStakingRepresentation) Reset()         { *m = MsgMintStakingRepresentation{} }
func (m *MsgMintStakingRepresentation) String() string { return proto.CompactTextString(m) }
func (*MsgMintStakingRepresentation) ProtoMessage()    {}
func (*MsgMintStakingRepresentation) Descriptor() ([]byte, []int) {
	return fileDescriptor_464962308475a38f, []int{0}
}
func (m *MsgMintStakingRepresentation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintStakingRepresentation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintStakingRepresentation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintStakingRepresentation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintStakingRepresentation.Merge(m, src)
}
func (m *MsgMintStakingRepresentation) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintStakingRepresentation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintStakingRepresentation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintStakingRepresentation proto.InternalMessageInfo

func (m *MsgMintStakingRepresentation) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgMintStakingRepresentation) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgMintStakingRepresentation) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// MsgMintStakingRepresentationResponse is the return value of
// MsgMintStakingRepresentation.
type MsgMintStakingRepresentationResponse struct {
}

func (m *MsgMintStakingRepresentationResponse) Reset()         { *m = MsgMintStakingRepresentationResponse{} }
func (m *MsgMintStakingRepresentationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgMintStakingRepresentationResponse) ProtoMessage()    {}
func (*MsgMintStakingRepresentationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_464962308475a38f, []int{1}
}
func (m *MsgMintStakingRepresentationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgMintStakingRepresentationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgMintStakingRepresentationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgMintStakingRepresentationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgMintStakingRepresentationResponse.Merge(m, src)
}
func (m *MsgMintStakingRepresentationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgMintStakingRepresentationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgMintStakingRepresentationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgMintStakingRepresentationResponse proto.InternalMessageInfo

// MsgBurnStakingRepresentation defines the message structure for the
// BurnStakingRepresentation gRPC service method. It allows an authorized
// account to burn an user's staked vested tokens representation.
type MsgBurnStakingRepresentation struct {
	// User that want to triger the tokens burn.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// User from which we want to burn the tokens.
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	// The amount of tokens that will be burned from the user's balance.
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *MsgBurnStakingRepresentation) Reset()         { *m = MsgBurnStakingRepresentation{} }
func (m *MsgBurnStakingRepresentation) String() string { return proto.CompactTextString(m) }
func (*MsgBurnStakingRepresentation) ProtoMessage()    {}
func (*MsgBurnStakingRepresentation) Descriptor() ([]byte, []int) {
	return fileDescriptor_464962308475a38f, []int{2}
}
func (m *MsgBurnStakingRepresentation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnStakingRepresentation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnStakingRepresentation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnStakingRepresentation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnStakingRepresentation.Merge(m, src)
}
func (m *MsgBurnStakingRepresentation) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnStakingRepresentation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnStakingRepresentation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnStakingRepresentation proto.InternalMessageInfo

func (m *MsgBurnStakingRepresentation) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgBurnStakingRepresentation) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *MsgBurnStakingRepresentation) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

// MsgBurnStakingRepresentationResponse is the return value of
// MsgBurnStakingRepresentation.
type MsgBurnStakingRepresentationResponse struct {
}

func (m *MsgBurnStakingRepresentationResponse) Reset()         { *m = MsgBurnStakingRepresentationResponse{} }
func (m *MsgBurnStakingRepresentationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgBurnStakingRepresentationResponse) ProtoMessage()    {}
func (*MsgBurnStakingRepresentationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_464962308475a38f, []int{3}
}
func (m *MsgBurnStakingRepresentationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgBurnStakingRepresentationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgBurnStakingRepresentationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgBurnStakingRepresentationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgBurnStakingRepresentationResponse.Merge(m, src)
}
func (m *MsgBurnStakingRepresentationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgBurnStakingRepresentationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgBurnStakingRepresentationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgBurnStakingRepresentationResponse proto.InternalMessageInfo

// MsgUpdateParams defines the message structure for the UpdateParams gRPC
// service method. It allows the authority to update the module parameters.
type MsgUpdateParams struct {
	// Authority is the address that controls the module (defaults to x/gov unless
	// overwritten).
	Authority string `protobuf:"bytes,1,opt,name=authority,proto3" json:"authority,omitempty" yaml:"authority"`
	// Params define the parameters to update.
	//
	// NOTE: All parameters must be supplied.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_464962308475a38f, []int{4}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetAuthority() string {
	if m != nil {
		return m.Authority
	}
	return ""
}

func (m *MsgUpdateParams) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// MsgUpdateParamsResponse is the return value of MsgUpdateParams.
type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_464962308475a38f, []int{5}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgMintStakingRepresentation)(nil), "milkyway.liquidvesting.v1.MsgMintStakingRepresentation")
	proto.RegisterType((*MsgMintStakingRepresentationResponse)(nil), "milkyway.liquidvesting.v1.MsgMintStakingRepresentationResponse")
	proto.RegisterType((*MsgBurnStakingRepresentation)(nil), "milkyway.liquidvesting.v1.MsgBurnStakingRepresentation")
	proto.RegisterType((*MsgBurnStakingRepresentationResponse)(nil), "milkyway.liquidvesting.v1.MsgBurnStakingRepresentationResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "milkyway.liquidvesting.v1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "milkyway.liquidvesting.v1.MsgUpdateParamsResponse")
}

func init() {
	proto.RegisterFile("milkyway/liquidvesting/v1/messages.proto", fileDescriptor_464962308475a38f)
}

var fileDescriptor_464962308475a38f = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0xb3, 0x4d, 0x0d, 0x76, 0x5a, 0x50, 0x97, 0x42, 0x93, 0x20, 0xdb, 0xba, 0x68, 0x09,
	0xa1, 0xd9, 0x35, 0x51, 0x29, 0xe6, 0x52, 0x1a, 0x6f, 0x42, 0x40, 0x53, 0xbc, 0x78, 0x29, 0x93,
	0xec, 0x30, 0x1d, 0x92, 0x9d, 0x59, 0xf7, 0xcd, 0x46, 0xf7, 0x26, 0x1e, 0x3d, 0x79, 0xf1, 0xe2,
	0x47, 0x50, 0x0f, 0x01, 0xfd, 0x10, 0x3d, 0x16, 0x4f, 0x7a, 0xa9, 0x92, 0x1c, 0x72, 0xf7, 0x13,
	0xc8, 0xee, 0x4e, 0xd2, 0x36, 0xb0, 0x49, 0x11, 0x0f, 0x5e, 0x92, 0xcc, 0xbc, 0xff, 0x7f, 0xde,
	0x7b, 0x3f, 0xde, 0x0b, 0x2a, 0xb9, 0xac, 0xd7, 0x0d, 0x5f, 0xe2, 0xd0, 0xee, 0xb1, 0x17, 0x01,
	0x73, 0xfa, 0x04, 0x24, 0xe3, 0xd4, 0xee, 0x57, 0x6d, 0x97, 0x00, 0x60, 0x4a, 0xc0, 0xf2, 0x7c,
	0x21, 0x85, 0x5e, 0x98, 0x28, 0xad, 0x0b, 0x4a, 0xab, 0x5f, 0x2d, 0xde, 0xc0, 0x2e, 0xe3, 0xc2,
	0x8e, 0x3f, 0x13, 0x75, 0xb1, 0xd0, 0x11, 0xe0, 0x0a, 0x38, 0x8c, 0x4f, 0x76, 0x72, 0x50, 0xa1,
	0x8d, 0xe4, 0x64, 0xbb, 0x90, 0xa4, 0x01, 0xaa, 0x02, 0x86, 0x0a, 0xb4, 0x31, 0x10, 0xbb, 0x5f,
	0x6d, 0x13, 0x89, 0xab, 0x76, 0x47, 0x30, 0xae, 0xe2, 0xeb, 0x54, 0x50, 0x91, 0x3c, 0x18, 0xfd,
	0x52, 0xb7, 0xdb, 0xe9, 0x1d, 0x78, 0xd8, 0xc7, 0xae, 0x4a, 0x6b, 0x7e, 0x59, 0x42, 0x37, 0x9b,
	0x40, 0x9b, 0x8c, 0xcb, 0x03, 0x89, 0xbb, 0x8c, 0xd3, 0x16, 0xf1, 0x7c, 0x02, 0x84, 0x4b, 0x2c,
	0x99, 0xe0, 0xfa, 0x5d, 0x94, 0x03, 0xc2, 0x1d, 0xe2, 0xe7, 0xb5, 0x2d, 0xad, 0xb4, 0xd2, 0xc8,
	0x7f, 0xfb, 0x5a, 0x59, 0x57, 0x95, 0xef, 0x3b, 0x8e, 0x4f, 0x00, 0x0e, 0xa4, 0x1f, 0xf9, 0x94,
	0x4e, 0xbf, 0x8f, 0xae, 0xfa, 0xa4, 0x43, 0x58, 0x9f, 0xf8, 0xf9, 0xa5, 0x05, 0x9e, 0xa9, 0x52,
	0x97, 0x28, 0x87, 0x5d, 0x11, 0x70, 0x99, 0xcf, 0x6e, 0x65, 0x4b, 0xab, 0xb5, 0x82, 0xa5, 0x0c,
	0x51, 0xdf, 0x96, 0xea, 0xdb, 0x7a, 0x24, 0x18, 0x6f, 0xec, 0x1f, 0x9f, 0x6e, 0x66, 0x3e, 0xfe,
	0xdc, 0x2c, 0x51, 0x26, 0x8f, 0x82, 0xb6, 0xd5, 0x11, 0xae, 0x62, 0xa9, 0xbe, 0x2a, 0xe0, 0x74,
	0x6d, 0x19, 0x7a, 0x04, 0x62, 0x03, 0x7c, 0x18, 0x0f, 0xca, 0x6b, 0x3d, 0x42, 0x71, 0x27, 0x3c,
	0x8c, 0xc8, 0x41, 0x4b, 0xe5, 0xaa, 0x3f, 0x78, 0x33, 0x1e, 0x94, 0x55, 0xe1, 0x6f, 0xc7, 0x83,
	0xf2, 0x9d, 0x29, 0xb6, 0x79, 0x50, 0xcc, 0x6d, 0x74, 0x7b, 0x5e, 0xbc, 0x45, 0xc0, 0x13, 0x1c,
	0x88, 0xf9, 0x29, 0xa1, 0xdb, 0x08, 0x7c, 0xfe, 0xaf, 0xe8, 0xee, 0xa0, 0xe5, 0x00, 0x2e, 0x41,
	0x36, 0x56, 0xfd, 0x8f, 0x54, 0x53, 0x61, 0x28, 0xaa, 0xa9, 0xf1, 0x29, 0xd5, 0x1f, 0x1a, 0xba,
	0xd6, 0x04, 0xfa, 0xcc, 0x73, 0xb0, 0x24, 0x4f, 0xe2, 0x69, 0xd6, 0x1f, 0xa3, 0x15, 0x1c, 0xc8,
	0x23, 0xe1, 0x33, 0x19, 0x2a, 0x96, 0x3b, 0xbf, 0x4f, 0x37, 0xaf, 0x87, 0xd8, 0xed, 0xd5, 0xcd,
	0x69, 0xc8, 0x4c, 0xe5, 0x75, 0x66, 0xd7, 0xf7, 0x50, 0x2e, 0xd9, 0x91, 0x18, 0xf2, 0x6a, 0xed,
	0x96, 0x95, 0xba, 0xe4, 0x56, 0x92, 0xbe, 0xb1, 0x1c, 0xc1, 0x6b, 0x29, 0x5b, 0xfd, 0x61, 0xd4,
	0xff, 0xd9, 0x83, 0x11, 0x82, 0xb4, 0x7d, 0x9c, 0xe9, 0xc3, 0x2c, 0xa0, 0x8d, 0x99, 0xab, 0x49,
	0xdb, 0xb5, 0xcf, 0x59, 0x94, 0x6d, 0x02, 0xd5, 0xdf, 0x6b, 0xa8, 0x90, 0xbe, 0xaf, 0xbb, 0x73,
	0x8a, 0x9d, 0x37, 0xb3, 0xc5, 0xbd, 0xbf, 0x34, 0x4e, 0xea, 0x8b, 0xeb, 0x4a, 0x9f, 0xf4, 0x05,
	0x75, 0xa5, 0x1a, 0x17, 0xd5, 0xb5, 0x70, 0x5c, 0x74, 0x8e, 0xd6, 0x2e, 0x8c, 0x4a, 0x79, 0xfe,
	0x83, 0xe7, 0xb5, 0xc5, 0xda, 0xe5, 0xb5, 0x93, 0x7c, 0xc5, 0x2b, 0xaf, 0xc7, 0x83, 0xb2, 0xd6,
	0x78, 0x7a, 0x3c, 0x34, 0xb4, 0x93, 0xa1, 0xa1, 0xfd, 0x1a, 0x1a, 0xda, 0xbb, 0x91, 0x91, 0x39,
	0x19, 0x19, 0x99, 0xef, 0x23, 0x23, 0xf3, 0x7c, 0xf7, 0xdc, 0x86, 0x4d, 0x9e, 0xaf, 0xf4, 0x70,
	0x1b, 0xa6, 0x27, 0xfb, 0xd5, 0xcc, 0x98, 0xc4, 0x6b, 0xd7, 0xce, 0xc5, 0xff, 0xd9, 0xf7, 0xfe,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xe6, 0x96, 0xe0, 0x3c, 0x9f, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// MintStakingRepresentation defines the operation to mint an user's staked
	// vested tokens representation that can be used in the liquid staking module.
	MintStakingRepresentation(ctx context.Context, in *MsgMintStakingRepresentation, opts ...grpc.CallOption) (*MsgMintStakingRepresentationResponse, error)
	// BurnStakingRepresentation defines the operation to burn an user's staked
	// vested tokens representation.
	BurnStakingRepresentation(ctx context.Context, in *MsgBurnStakingRepresentation, opts ...grpc.CallOption) (*MsgBurnStakingRepresentationResponse, error)
	// UpdateParams defines a (governance) operation for updating the module
	// parameters.
	// The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) MintStakingRepresentation(ctx context.Context, in *MsgMintStakingRepresentation, opts ...grpc.CallOption) (*MsgMintStakingRepresentationResponse, error) {
	out := new(MsgMintStakingRepresentationResponse)
	err := c.cc.Invoke(ctx, "/milkyway.liquidvesting.v1.Msg/MintStakingRepresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BurnStakingRepresentation(ctx context.Context, in *MsgBurnStakingRepresentation, opts ...grpc.CallOption) (*MsgBurnStakingRepresentationResponse, error) {
	out := new(MsgBurnStakingRepresentationResponse)
	err := c.cc.Invoke(ctx, "/milkyway.liquidvesting.v1.Msg/BurnStakingRepresentation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/milkyway.liquidvesting.v1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// MintStakingRepresentation defines the operation to mint an user's staked
	// vested tokens representation that can be used in the liquid staking module.
	MintStakingRepresentation(context.Context, *MsgMintStakingRepresentation) (*MsgMintStakingRepresentationResponse, error)
	// BurnStakingRepresentation defines the operation to burn an user's staked
	// vested tokens representation.
	BurnStakingRepresentation(context.Context, *MsgBurnStakingRepresentation) (*MsgBurnStakingRepresentationResponse, error)
	// UpdateParams defines a (governance) operation for updating the module
	// parameters.
	// The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) MintStakingRepresentation(ctx context.Context, req *MsgMintStakingRepresentation) (*MsgMintStakingRepresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MintStakingRepresentation not implemented")
}
func (*UnimplementedMsgServer) BurnStakingRepresentation(ctx context.Context, req *MsgBurnStakingRepresentation) (*MsgBurnStakingRepresentationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnStakingRepresentation not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_MintStakingRepresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgMintStakingRepresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).MintStakingRepresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.liquidvesting.v1.Msg/MintStakingRepresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).MintStakingRepresentation(ctx, req.(*MsgMintStakingRepresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BurnStakingRepresentation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBurnStakingRepresentation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BurnStakingRepresentation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.liquidvesting.v1.Msg/BurnStakingRepresentation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BurnStakingRepresentation(ctx, req.(*MsgBurnStakingRepresentation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milkyway.liquidvesting.v1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milkyway.liquidvesting.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MintStakingRepresentation",
			Handler:    _Msg_MintStakingRepresentation_Handler,
		},
		{
			MethodName: "BurnStakingRepresentation",
			Handler:    _Msg_BurnStakingRepresentation_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milkyway/liquidvesting/v1/messages.proto",
}

func (m *MsgMintStakingRepresentation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintStakingRepresentation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintStakingRepresentation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgMintStakingRepresentationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgMintStakingRepresentationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgMintStakingRepresentationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgBurnStakingRepresentation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnStakingRepresentation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnStakingRepresentation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMessages(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgBurnStakingRepresentationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgBurnStakingRepresentationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgBurnStakingRepresentationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintMessages(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Authority) > 0 {
		i -= len(m.Authority)
		copy(dAtA[i:], m.Authority)
		i = encodeVarintMessages(dAtA, i, uint64(len(m.Authority)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintMessages(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessages(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgMintStakingRepresentation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *MsgMintStakingRepresentationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgBurnStakingRepresentation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovMessages(uint64(l))
		}
	}
	return n
}

func (m *MsgBurnStakingRepresentationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Authority)
	if l > 0 {
		n += 1 + l + sovMessages(uint64(l))
	}
	l = m.Params.Size()
	n += 1 + l + sovMessages(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovMessages(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessages(x uint64) (n int) {
	return sovMessages(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgMintStakingRepresentation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintStakingRepresentation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintStakingRepresentation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgMintStakingRepresentationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgMintStakingRepresentationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgMintStakingRepresentationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnStakingRepresentation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnStakingRepresentation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnStakingRepresentation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgBurnStakingRepresentationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgBurnStakingRepresentationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgBurnStakingRepresentationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authority", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authority = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessages
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessages
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipMessages(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMessages
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessages(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessages
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessages
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessages
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessages
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessages
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessages        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessages          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessages = fmt.Errorf("proto: unexpected end of group")
)
