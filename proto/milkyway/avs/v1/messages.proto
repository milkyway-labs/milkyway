syntax = "proto3";
package milkyway.avs.v1;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/bank/v1beta1/bank.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "milkyway/avs/v1/params.proto";

option go_package = "github.com/milkyway-labs/milkyway/x/avs/types";

// Msg defines the avs module's gRPC message service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc RegisterAVS(MsgRegisterAVS) returns (MsgRegisterAVSResponse);
  rpc UpdateAVS(MsgUpdateAVS) returns (MsgUpdateAVSResponse);
}

// MsgRegisterAVSResponse defines the message structure for the RegisterAVS
// gRPC service method. It allows an account to register a new AVS that later on
// operators can opt to validate. It requires a sender address as well as the
// details of the AVS to be register.
message MsgRegisterAVS {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgRegisterAVS";

  // Sender is the address of the user registering the AVS
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // Name is the name of the AVS
  string name = 2 [ (gogoproto.moretags) = "yaml:\"name\"" ];

  // Description is the description of the AVS (optional)
  string description = 3 [ (gogoproto.moretags) = "yaml:\"description\"" ];

  // Website is the website of the AVS (optional)
  string website = 4 [ (gogoproto.moretags) = "yaml:\"website\"" ];

  // PictureURL is the URL of the AVS picture (optional)
  string picture_url = 5 [ (gogoproto.moretags) = "yaml:\"picture_url\"" ];
}

// MsgRegisterAVSResponse is the return value of MsgRegisterAVS.
// It returns the newly created AVS ID.
message MsgRegisterAVSResponse {
  // NewAVSID is the ID of the newly registered AVS
  uint32 new_avs_id = 1 [ (gogoproto.customname) = "NewAVSID" ];
}

// MsgUpdateAVS defines the message structure for the UpdateAVS gRPC
// service method. It allows the AVS owner to update the details of
// an existing AVS.
message MsgUpdateAVS {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgUpdateAVS";

  // Sender is the address of the user deregistering the AVS
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // ID represents the ID of the AVS to be updated
  uint64 id = 2 [ (gogoproto.customname) = "ID" ];

  // Name is the new name of the AVS (optional).
  // If it shouldn't be changed, use [do-not-modify] instead.
  string name = 3 [ (gogoproto.moretags) = "yaml:\"name\"" ];

  // Description is the new description of the AVS (optional)
  // If it shouldn't be changed, use [do-not-modify] instead.
  string description = 4 [ (gogoproto.moretags) = "yaml:\"description\"" ];

  // Website is the new website of the AVS (optional)
  // If it shouldn't be changed, use [do-not-modify] instead.
  string website = 5 [ (gogoproto.moretags) = "yaml:\"website\"" ];

  // PictureURL is the new URL of the AVS picture (optional)
  // If it shouldn't be changed, use [do-not-modify] instead.
  string picture_url = 6 [ (gogoproto.moretags) = "yaml:\"picture_url\"" ];
}

// MsgUpdateAVSResponse is the return value of MsgUpdateAVS.
message MsgUpdateAVSResponse {}