syntax = "proto3";
package milkyway.liquidvesting.v1;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "milkyway/liquidvesting/v1/params.proto";

option go_package = "github.com/milkyway-labs/milkyway/x/liquidvesting/types";

// Msg defines the services module's gRPC message service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // MintStakingRepresentation defines the operation to mint an user's staked
  // vested tokens representation that can be used in the liquid staking module.
  rpc MintStakingRepresentation(MsgMintStakingRepresentation)
      returns (MsgMintStakingRepresentationResponse);

  // BurnStakingRepresentation defines the operation to burn an user's staked
  // vested tokens representation.
  rpc BurnStakingRepresentation(MsgBurnStakingRepresentation)
      returns (MsgBurnStakingRepresentationResponse);

  // UpdateParams defines a (governance) operation for updating the module
  // parameters.
  // The authority defaults to the x/gov module account.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgMintStakingRepresentation defines the message structure for the
// MintStakingRepresentation gRPC service method. It allows an authorized
// account to mint an user's staked vested tokens representation that can be
// used in the liquid staking module.
message MsgMintStakingRepresentation {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgMintStakingRepresentation";

  // User that want to triger the tokens mint.
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // User that will receive the minted tokens.
  string receiver = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The amount of tokens that will be minted
  repeated cosmos.base.v1beta1.Coin amount = 3 [
    (amino.encoding)         = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", 
    (gogoproto.nullable) = false
  ];
}

// MsgMintStakingRepresentationResponse is the return value of
// MsgMintStakingRepresentation.
message MsgMintStakingRepresentationResponse {}

// MsgBurnStakingRepresentation defines the message structure for the
// BurnStakingRepresentation gRPC service method. It allows an authorized
// account to burn an user's staked vested tokens representation.
message MsgBurnStakingRepresentation {
  option (cosmos.msg.v1.signer) = "sender";
  option (amino.name) = "milkyway/MsgBurnStakingRepresentation";

  // User that want to triger the tokens burn.
  string sender = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // User from which we want to burn the tokens.
  string user = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // The amount of tokens that will be burned from the user's balance.
  repeated cosmos.base.v1beta1.Coin amount = 3 [
    (amino.encoding)         = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins", 
    (gogoproto.nullable) = false
  ];
}

// MsgBurnStakingRepresentationResponse is the return value of
// MsgBurnStakingRepresentation.
message MsgBurnStakingRepresentationResponse {}

// MsgUpdateParams defines the message structure for the UpdateParams gRPC
// service method. It allows the authority to update the module parameters.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "milkyway/liquidvesting/MsgUpdateParams";

  // Authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [
    (gogoproto.moretags) = "yaml:\"authority\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  // Params define the parameters to update.
  //
  // NOTE: All parameters must be supplied.
  Params params = 2 [ (gogoproto.nullable) = false ];
}

// MsgUpdateParamsResponse is the return value of MsgUpdateParams.
message MsgUpdateParamsResponse {}
