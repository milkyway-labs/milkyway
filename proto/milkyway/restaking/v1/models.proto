syntax = "proto3";
package milkyway.restaking.v1;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/milkyway-labs/milkyway/x/restaking/types";

// DelegationType defines the type of delegation.
enum DelegationType {
  option (gogoproto.goproto_enum_prefix) = false;

  DELEGATION_TYPE_UNSPECIFIED = 0;
  DELEGATION_TYPE_POOL = 1;
  DELEGATION_TYPE_OPERATOR = 2;
  DELEGATION_TYPE_SERVICE = 3;
}

// Delegation represents the bond with tokens held by an account with a
// given target.
message Delegation {
  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = false;

  // Type is the type of delegation.
  DelegationType type = 1;

  // UserAddress is the encoded address of the user.
  string user_address = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  // TargetID is the id of the target to which the delegation is associated
  // (pool, operator, service).
  uint32 target_id = 3 [ (gogoproto.customname) = "TargetID" ];

  // Shares define the delegation shares received.
  repeated cosmos.base.v1beta1.DecCoin shares = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable) = false
  ];
}

// DelegationResponse is equivalent to Delegation except that it
// contains a balance in addition to shares which is more suitable for client
// responses.
message DelegationResponse {
  option (gogoproto.equal) = false;

  Delegation delegation = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  repeated cosmos.base.v1beta1.Coin balance = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}
