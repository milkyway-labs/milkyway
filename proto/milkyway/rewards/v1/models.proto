syntax = "proto3";
package milkyway.rewards.v1;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";
import "milkyway/restaking/v1/models.proto";

option go_package = "github.com/milkyway-labs/milkyway/x/rewards/types";
option (gogoproto.goproto_getters_all) = false;

message RewardsPlan {
  // ID is the unique identifier of the plan
  uint64 id = 1 [ (gogoproto.customname) = "ID" ];

  // Description is the description of the plan
  string description = 2;

  uint32 service_id = 3 [ (gogoproto.customname) = "ServiceID" ];

  // Amount is the amount of rewards to be distributed.
  repeated cosmos.base.v1beta1.Coin amount_per_day = 4 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];

  // StartTime is the starting time of the plan
  google.protobuf.Timestamp start_time = 5
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  // EndTime is the ending time of the plan
  google.protobuf.Timestamp end_time = 6
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];

  string rewards_pool = 7 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  Distribution pools_distribution = 8 [ (gogoproto.nullable) = false ];

  Distribution operators_distribution = 9 [ (gogoproto.nullable) = false ];

  UsersDistribution users_distribution = 10 [ (gogoproto.nullable) = false ];
}

// Distribution represents distribution information for restaking
// pools/operators.
message Distribution {
  milkyway.restaking.v1.DelegationType delegation_type = 1;

  // Weight is the rewards distribution weight among other types of delegation
  // targets.
  uint32 weight = 2;

  // Type is one of basic/weighted/egalitarian distributions.
  google.protobuf.Any type = 3 [ (cosmos_proto.accepts_interface) =
                                     "milkyway.rewards.v1.DistributionType" ];
}

message DistributionTypeBasic {
  option (cosmos_proto.implements_interface) =
      "milkyway.rewards.v1.DistributionType";
}

message DistributionTypeWeighted {
  option (cosmos_proto.implements_interface) =
      "milkyway.rewards.v1.DistributionType";

  repeated DistributionWeight weights = 1 [ (gogoproto.nullable) = false ];
}

message DistributionWeight {
  uint32 delegation_target_id = 1
      [ (gogoproto.customname) = "DelegationTargetID" ];

  uint32 weight = 2;
}

message DistributionTypeEgalitarian {
  option (cosmos_proto.implements_interface) =
      "milkyway.rewards.v1.DistributionType";
}

message UsersDistribution {
  uint32 weight = 1;

  google.protobuf.Any type = 2
      [ (cosmos_proto.accepts_interface) =
            "milkyway.rewards.v1.UsersDistributionType" ];
}

message UsersDistributionTypeBasic {
  option (cosmos_proto.implements_interface) =
      "milkyway.rewards.v1.UsersDistributionType";
}

message HistoricalRewards {
  repeated DecPool cumulative_reward_ratios = 1 [
    (gogoproto.moretags) = "yaml:\"cumulative_reward_ratios\"",
    (gogoproto.castrepeated) = "DecPools",
    (gogoproto.nullable) = false
  ];
  uint32 reference_count = 2
      [ (gogoproto.moretags) = "yaml:\"reference_count\"" ];
}

message CurrentRewards {
  repeated DecPool rewards = 1 [
    (gogoproto.moretags) = "yaml:\"rewards\"",
    (gogoproto.castrepeated) = "DecPools",
    (gogoproto.nullable) = false
  ];
  uint64 period = 2;
}

message OutstandingRewards {
  repeated DecPool rewards = 1 [
    (gogoproto.moretags) = "yaml:\"rewards\"",
    (gogoproto.castrepeated) = "DecPools",
    (gogoproto.nullable) = false
  ];
}

message AccumulatedCommission {
  repeated DecPool commissions = 1 [
    (gogoproto.castrepeated) = "DecPools",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

message DelegatorStartingInfo {
  uint64 previous_period = 1
      [ (gogoproto.moretags) = "yaml:\"previous_period\"" ];
  repeated cosmos.base.v1beta1.DecCoin stakes = 2 [
    (gogoproto.moretags) = "yaml:\"stakes\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable) = false
  ];
  uint64 height = 3 [
    (gogoproto.moretags) = "yaml:\"creation_height\"",
    (gogoproto.jsontag) = "creation_height"
  ];
}

message DelegationDelegatorReward {
  milkyway.restaking.v1.DelegationType delegation_type = 1;

  uint32 delegation_target_id = 2
      [ (gogoproto.customname) = "DelegationTargetID" ];

  repeated DecPool reward = 3 [
    (gogoproto.castrepeated) = "DecPools",
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
}

// TODO: add SlashEvent

// ---------------------------------------------------------------------------

// Pool is a Coins wrapper with denom.
message Pool {
  string denom = 1 [ (gogoproto.moretags) = "yaml:\"denom\"" ];
  repeated cosmos.base.v1beta1.Coin coins = 2 [
    (gogoproto.moretags) = "yaml:\"coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

// DecPool is a DecCoins wrapper with denom.
message DecPool {
  string denom = 1 [ (gogoproto.moretags) = "yaml:\"denom\"" ];
  repeated cosmos.base.v1beta1.DecCoin dec_coins = 2 [
    (gogoproto.moretags) = "yaml:\"dec_coins\"",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoins",
    (gogoproto.nullable) = false
  ];
}
