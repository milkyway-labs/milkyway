// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: stride/records/query.proto

package records

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName                      = "/stride.records.Query/Params"
	Query_UserRedemptionRecord_FullMethodName        = "/stride.records.Query/UserRedemptionRecord"
	Query_UserRedemptionRecordAll_FullMethodName     = "/stride.records.Query/UserRedemptionRecordAll"
	Query_UserRedemptionRecordForUser_FullMethodName = "/stride.records.Query/UserRedemptionRecordForUser"
	Query_EpochUnbondingRecord_FullMethodName        = "/stride.records.Query/EpochUnbondingRecord"
	Query_EpochUnbondingRecordAll_FullMethodName     = "/stride.records.Query/EpochUnbondingRecordAll"
	Query_DepositRecord_FullMethodName               = "/stride.records.Query/DepositRecord"
	Query_DepositRecordAll_FullMethodName            = "/stride.records.Query/DepositRecordAll"
	Query_DepositRecordByHost_FullMethodName         = "/stride.records.Query/DepositRecordByHost"
	Query_LSMDeposit_FullMethodName                  = "/stride.records.Query/LSMDeposit"
	Query_LSMDeposits_FullMethodName                 = "/stride.records.Query/LSMDeposits"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a UserRedemptionRecord by id.
	UserRedemptionRecord(ctx context.Context, in *QueryGetUserRedemptionRecordRequest, opts ...grpc.CallOption) (*QueryGetUserRedemptionRecordResponse, error)
	// Queries a list of UserRedemptionRecord items.
	UserRedemptionRecordAll(ctx context.Context, in *QueryAllUserRedemptionRecordRequest, opts ...grpc.CallOption) (*QueryAllUserRedemptionRecordResponse, error)
	// Queries a list of UserRedemptionRecord items by chainId / userId pair.
	UserRedemptionRecordForUser(ctx context.Context, in *QueryAllUserRedemptionRecordForUserRequest, opts ...grpc.CallOption) (*QueryAllUserRedemptionRecordForUserResponse, error)
	// Queries a EpochUnbondingRecord by id.
	EpochUnbondingRecord(ctx context.Context, in *QueryGetEpochUnbondingRecordRequest, opts ...grpc.CallOption) (*QueryGetEpochUnbondingRecordResponse, error)
	// Queries a list of EpochUnbondingRecord items.
	EpochUnbondingRecordAll(ctx context.Context, in *QueryAllEpochUnbondingRecordRequest, opts ...grpc.CallOption) (*QueryAllEpochUnbondingRecordResponse, error)
	// Queries a DepositRecord by id.
	DepositRecord(ctx context.Context, in *QueryGetDepositRecordRequest, opts ...grpc.CallOption) (*QueryGetDepositRecordResponse, error)
	// Queries a list of DepositRecord items.
	DepositRecordAll(ctx context.Context, in *QueryAllDepositRecordRequest, opts ...grpc.CallOption) (*QueryAllDepositRecordResponse, error)
	// Queries a list of DepositRecord items for a given host zone
	DepositRecordByHost(ctx context.Context, in *QueryDepositRecordByHostRequest, opts ...grpc.CallOption) (*QueryDepositRecordByHostResponse, error)
	// Queries the existing LSMTokenDeposits for one specific deposit
	LSMDeposit(ctx context.Context, in *QueryLSMDepositRequest, opts ...grpc.CallOption) (*QueryLSMDepositResponse, error)
	// Queries the existing LSMTokenDeposits for all which match filters
	//
	//	intended use:
	//	...stakeibc/lsm_deposits?chain_id=X&validator_address=Y&status=Z
	LSMDeposits(ctx context.Context, in *QueryLSMDepositsRequest, opts ...grpc.CallOption) (*QueryLSMDepositsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserRedemptionRecord(ctx context.Context, in *QueryGetUserRedemptionRecordRequest, opts ...grpc.CallOption) (*QueryGetUserRedemptionRecordResponse, error) {
	out := new(QueryGetUserRedemptionRecordResponse)
	err := c.cc.Invoke(ctx, Query_UserRedemptionRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserRedemptionRecordAll(ctx context.Context, in *QueryAllUserRedemptionRecordRequest, opts ...grpc.CallOption) (*QueryAllUserRedemptionRecordResponse, error) {
	out := new(QueryAllUserRedemptionRecordResponse)
	err := c.cc.Invoke(ctx, Query_UserRedemptionRecordAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserRedemptionRecordForUser(ctx context.Context, in *QueryAllUserRedemptionRecordForUserRequest, opts ...grpc.CallOption) (*QueryAllUserRedemptionRecordForUserResponse, error) {
	out := new(QueryAllUserRedemptionRecordForUserResponse)
	err := c.cc.Invoke(ctx, Query_UserRedemptionRecordForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochUnbondingRecord(ctx context.Context, in *QueryGetEpochUnbondingRecordRequest, opts ...grpc.CallOption) (*QueryGetEpochUnbondingRecordResponse, error) {
	out := new(QueryGetEpochUnbondingRecordResponse)
	err := c.cc.Invoke(ctx, Query_EpochUnbondingRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EpochUnbondingRecordAll(ctx context.Context, in *QueryAllEpochUnbondingRecordRequest, opts ...grpc.CallOption) (*QueryAllEpochUnbondingRecordResponse, error) {
	out := new(QueryAllEpochUnbondingRecordResponse)
	err := c.cc.Invoke(ctx, Query_EpochUnbondingRecordAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositRecord(ctx context.Context, in *QueryGetDepositRecordRequest, opts ...grpc.CallOption) (*QueryGetDepositRecordResponse, error) {
	out := new(QueryGetDepositRecordResponse)
	err := c.cc.Invoke(ctx, Query_DepositRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositRecordAll(ctx context.Context, in *QueryAllDepositRecordRequest, opts ...grpc.CallOption) (*QueryAllDepositRecordResponse, error) {
	out := new(QueryAllDepositRecordResponse)
	err := c.cc.Invoke(ctx, Query_DepositRecordAll_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DepositRecordByHost(ctx context.Context, in *QueryDepositRecordByHostRequest, opts ...grpc.CallOption) (*QueryDepositRecordByHostResponse, error) {
	out := new(QueryDepositRecordByHostResponse)
	err := c.cc.Invoke(ctx, Query_DepositRecordByHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LSMDeposit(ctx context.Context, in *QueryLSMDepositRequest, opts ...grpc.CallOption) (*QueryLSMDepositResponse, error) {
	out := new(QueryLSMDepositResponse)
	err := c.cc.Invoke(ctx, Query_LSMDeposit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LSMDeposits(ctx context.Context, in *QueryLSMDepositsRequest, opts ...grpc.CallOption) (*QueryLSMDepositsResponse, error) {
	out := new(QueryLSMDepositsResponse)
	err := c.cc.Invoke(ctx, Query_LSMDeposits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a UserRedemptionRecord by id.
	UserRedemptionRecord(context.Context, *QueryGetUserRedemptionRecordRequest) (*QueryGetUserRedemptionRecordResponse, error)
	// Queries a list of UserRedemptionRecord items.
	UserRedemptionRecordAll(context.Context, *QueryAllUserRedemptionRecordRequest) (*QueryAllUserRedemptionRecordResponse, error)
	// Queries a list of UserRedemptionRecord items by chainId / userId pair.
	UserRedemptionRecordForUser(context.Context, *QueryAllUserRedemptionRecordForUserRequest) (*QueryAllUserRedemptionRecordForUserResponse, error)
	// Queries a EpochUnbondingRecord by id.
	EpochUnbondingRecord(context.Context, *QueryGetEpochUnbondingRecordRequest) (*QueryGetEpochUnbondingRecordResponse, error)
	// Queries a list of EpochUnbondingRecord items.
	EpochUnbondingRecordAll(context.Context, *QueryAllEpochUnbondingRecordRequest) (*QueryAllEpochUnbondingRecordResponse, error)
	// Queries a DepositRecord by id.
	DepositRecord(context.Context, *QueryGetDepositRecordRequest) (*QueryGetDepositRecordResponse, error)
	// Queries a list of DepositRecord items.
	DepositRecordAll(context.Context, *QueryAllDepositRecordRequest) (*QueryAllDepositRecordResponse, error)
	// Queries a list of DepositRecord items for a given host zone
	DepositRecordByHost(context.Context, *QueryDepositRecordByHostRequest) (*QueryDepositRecordByHostResponse, error)
	// Queries the existing LSMTokenDeposits for one specific deposit
	LSMDeposit(context.Context, *QueryLSMDepositRequest) (*QueryLSMDepositResponse, error)
	// Queries the existing LSMTokenDeposits for all which match filters
	//
	//	intended use:
	//	...stakeibc/lsm_deposits?chain_id=X&validator_address=Y&status=Z
	LSMDeposits(context.Context, *QueryLSMDepositsRequest) (*QueryLSMDepositsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) UserRedemptionRecord(context.Context, *QueryGetUserRedemptionRecordRequest) (*QueryGetUserRedemptionRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRedemptionRecord not implemented")
}
func (UnimplementedQueryServer) UserRedemptionRecordAll(context.Context, *QueryAllUserRedemptionRecordRequest) (*QueryAllUserRedemptionRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRedemptionRecordAll not implemented")
}
func (UnimplementedQueryServer) UserRedemptionRecordForUser(context.Context, *QueryAllUserRedemptionRecordForUserRequest) (*QueryAllUserRedemptionRecordForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRedemptionRecordForUser not implemented")
}
func (UnimplementedQueryServer) EpochUnbondingRecord(context.Context, *QueryGetEpochUnbondingRecordRequest) (*QueryGetEpochUnbondingRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochUnbondingRecord not implemented")
}
func (UnimplementedQueryServer) EpochUnbondingRecordAll(context.Context, *QueryAllEpochUnbondingRecordRequest) (*QueryAllEpochUnbondingRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EpochUnbondingRecordAll not implemented")
}
func (UnimplementedQueryServer) DepositRecord(context.Context, *QueryGetDepositRecordRequest) (*QueryGetDepositRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositRecord not implemented")
}
func (UnimplementedQueryServer) DepositRecordAll(context.Context, *QueryAllDepositRecordRequest) (*QueryAllDepositRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositRecordAll not implemented")
}
func (UnimplementedQueryServer) DepositRecordByHost(context.Context, *QueryDepositRecordByHostRequest) (*QueryDepositRecordByHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositRecordByHost not implemented")
}
func (UnimplementedQueryServer) LSMDeposit(context.Context, *QueryLSMDepositRequest) (*QueryLSMDepositResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LSMDeposit not implemented")
}
func (UnimplementedQueryServer) LSMDeposits(context.Context, *QueryLSMDepositsRequest) (*QueryLSMDepositsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LSMDeposits not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserRedemptionRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUserRedemptionRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserRedemptionRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserRedemptionRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserRedemptionRecord(ctx, req.(*QueryGetUserRedemptionRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserRedemptionRecordAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserRedemptionRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserRedemptionRecordAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserRedemptionRecordAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserRedemptionRecordAll(ctx, req.(*QueryAllUserRedemptionRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserRedemptionRecordForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUserRedemptionRecordForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserRedemptionRecordForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_UserRedemptionRecordForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserRedemptionRecordForUser(ctx, req.(*QueryAllUserRedemptionRecordForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochUnbondingRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetEpochUnbondingRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochUnbondingRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EpochUnbondingRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochUnbondingRecord(ctx, req.(*QueryGetEpochUnbondingRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EpochUnbondingRecordAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllEpochUnbondingRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EpochUnbondingRecordAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_EpochUnbondingRecordAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EpochUnbondingRecordAll(ctx, req.(*QueryAllEpochUnbondingRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDepositRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DepositRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositRecord(ctx, req.(*QueryGetDepositRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositRecordAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDepositRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositRecordAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DepositRecordAll_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositRecordAll(ctx, req.(*QueryAllDepositRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DepositRecordByHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDepositRecordByHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DepositRecordByHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DepositRecordByHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DepositRecordByHost(ctx, req.(*QueryDepositRecordByHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LSMDeposit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLSMDepositRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LSMDeposit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LSMDeposit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LSMDeposit(ctx, req.(*QueryLSMDepositRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LSMDeposits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLSMDepositsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LSMDeposits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LSMDeposits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LSMDeposits(ctx, req.(*QueryLSMDepositsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stride.records.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "UserRedemptionRecord",
			Handler:    _Query_UserRedemptionRecord_Handler,
		},
		{
			MethodName: "UserRedemptionRecordAll",
			Handler:    _Query_UserRedemptionRecordAll_Handler,
		},
		{
			MethodName: "UserRedemptionRecordForUser",
			Handler:    _Query_UserRedemptionRecordForUser_Handler,
		},
		{
			MethodName: "EpochUnbondingRecord",
			Handler:    _Query_EpochUnbondingRecord_Handler,
		},
		{
			MethodName: "EpochUnbondingRecordAll",
			Handler:    _Query_EpochUnbondingRecordAll_Handler,
		},
		{
			MethodName: "DepositRecord",
			Handler:    _Query_DepositRecord_Handler,
		},
		{
			MethodName: "DepositRecordAll",
			Handler:    _Query_DepositRecordAll_Handler,
		},
		{
			MethodName: "DepositRecordByHost",
			Handler:    _Query_DepositRecordByHost_Handler,
		},
		{
			MethodName: "LSMDeposit",
			Handler:    _Query_LSMDeposit_Handler,
		},
		{
			MethodName: "LSMDeposits",
			Handler:    _Query_LSMDeposits_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stride/records/query.proto",
}
