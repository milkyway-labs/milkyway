// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package stakeibc

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Params                                       protoreflect.MessageDescriptor
	fd_Params_rewards_interval                      protoreflect.FieldDescriptor
	fd_Params_delegate_interval                     protoreflect.FieldDescriptor
	fd_Params_deposit_interval                      protoreflect.FieldDescriptor
	fd_Params_redemption_rate_interval              protoreflect.FieldDescriptor
	fd_Params_stride_commission                     protoreflect.FieldDescriptor
	fd_Params_reinvest_interval                     protoreflect.FieldDescriptor
	fd_Params_ica_timeout_nanos                     protoreflect.FieldDescriptor
	fd_Params_buffer_size                           protoreflect.FieldDescriptor
	fd_Params_ibc_timeout_blocks                    protoreflect.FieldDescriptor
	fd_Params_fee_transfer_timeout_nanos            protoreflect.FieldDescriptor
	fd_Params_max_stake_ica_calls_per_epoch         protoreflect.FieldDescriptor
	fd_Params_default_min_redemption_rate_threshold protoreflect.FieldDescriptor
	fd_Params_default_max_redemption_rate_threshold protoreflect.FieldDescriptor
	fd_Params_ibc_transfer_timeout_nanos            protoreflect.FieldDescriptor
	fd_Params_validator_slash_query_threshold       protoreflect.FieldDescriptor
	fd_Params_validator_weight_cap                  protoreflect.FieldDescriptor
)

func init() {
	file_stride_stakeibc_params_proto_init()
	md_Params = File_stride_stakeibc_params_proto.Messages().ByName("Params")
	fd_Params_rewards_interval = md_Params.Fields().ByName("rewards_interval")
	fd_Params_delegate_interval = md_Params.Fields().ByName("delegate_interval")
	fd_Params_deposit_interval = md_Params.Fields().ByName("deposit_interval")
	fd_Params_redemption_rate_interval = md_Params.Fields().ByName("redemption_rate_interval")
	fd_Params_stride_commission = md_Params.Fields().ByName("stride_commission")
	fd_Params_reinvest_interval = md_Params.Fields().ByName("reinvest_interval")
	fd_Params_ica_timeout_nanos = md_Params.Fields().ByName("ica_timeout_nanos")
	fd_Params_buffer_size = md_Params.Fields().ByName("buffer_size")
	fd_Params_ibc_timeout_blocks = md_Params.Fields().ByName("ibc_timeout_blocks")
	fd_Params_fee_transfer_timeout_nanos = md_Params.Fields().ByName("fee_transfer_timeout_nanos")
	fd_Params_max_stake_ica_calls_per_epoch = md_Params.Fields().ByName("max_stake_ica_calls_per_epoch")
	fd_Params_default_min_redemption_rate_threshold = md_Params.Fields().ByName("default_min_redemption_rate_threshold")
	fd_Params_default_max_redemption_rate_threshold = md_Params.Fields().ByName("default_max_redemption_rate_threshold")
	fd_Params_ibc_transfer_timeout_nanos = md_Params.Fields().ByName("ibc_transfer_timeout_nanos")
	fd_Params_validator_slash_query_threshold = md_Params.Fields().ByName("validator_slash_query_threshold")
	fd_Params_validator_weight_cap = md_Params.Fields().ByName("validator_weight_cap")
}

var _ protoreflect.Message = (*fastReflection_Params)(nil)

type fastReflection_Params Params

func (x *Params) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Params)(x)
}

func (x *Params) slowProtoReflect() protoreflect.Message {
	mi := &file_stride_stakeibc_params_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Params_messageType fastReflection_Params_messageType
var _ protoreflect.MessageType = fastReflection_Params_messageType{}

type fastReflection_Params_messageType struct{}

func (x fastReflection_Params_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Params)(nil)
}
func (x fastReflection_Params_messageType) New() protoreflect.Message {
	return new(fastReflection_Params)
}
func (x fastReflection_Params_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Params) Descriptor() protoreflect.MessageDescriptor {
	return md_Params
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Params) Type() protoreflect.MessageType {
	return _fastReflection_Params_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Params) New() protoreflect.Message {
	return new(fastReflection_Params)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Params) Interface() protoreflect.ProtoMessage {
	return (*Params)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Params) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RewardsInterval != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RewardsInterval)
		if !f(fd_Params_rewards_interval, value) {
			return
		}
	}
	if x.DelegateInterval != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DelegateInterval)
		if !f(fd_Params_delegate_interval, value) {
			return
		}
	}
	if x.DepositInterval != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DepositInterval)
		if !f(fd_Params_deposit_interval, value) {
			return
		}
	}
	if x.RedemptionRateInterval != uint64(0) {
		value := protoreflect.ValueOfUint64(x.RedemptionRateInterval)
		if !f(fd_Params_redemption_rate_interval, value) {
			return
		}
	}
	if x.StrideCommission != uint64(0) {
		value := protoreflect.ValueOfUint64(x.StrideCommission)
		if !f(fd_Params_stride_commission, value) {
			return
		}
	}
	if x.ReinvestInterval != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ReinvestInterval)
		if !f(fd_Params_reinvest_interval, value) {
			return
		}
	}
	if x.IcaTimeoutNanos != uint64(0) {
		value := protoreflect.ValueOfUint64(x.IcaTimeoutNanos)
		if !f(fd_Params_ica_timeout_nanos, value) {
			return
		}
	}
	if x.BufferSize != uint64(0) {
		value := protoreflect.ValueOfUint64(x.BufferSize)
		if !f(fd_Params_buffer_size, value) {
			return
		}
	}
	if x.IbcTimeoutBlocks != uint64(0) {
		value := protoreflect.ValueOfUint64(x.IbcTimeoutBlocks)
		if !f(fd_Params_ibc_timeout_blocks, value) {
			return
		}
	}
	if x.FeeTransferTimeoutNanos != uint64(0) {
		value := protoreflect.ValueOfUint64(x.FeeTransferTimeoutNanos)
		if !f(fd_Params_fee_transfer_timeout_nanos, value) {
			return
		}
	}
	if x.MaxStakeIcaCallsPerEpoch != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxStakeIcaCallsPerEpoch)
		if !f(fd_Params_max_stake_ica_calls_per_epoch, value) {
			return
		}
	}
	if x.DefaultMinRedemptionRateThreshold != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DefaultMinRedemptionRateThreshold)
		if !f(fd_Params_default_min_redemption_rate_threshold, value) {
			return
		}
	}
	if x.DefaultMaxRedemptionRateThreshold != uint64(0) {
		value := protoreflect.ValueOfUint64(x.DefaultMaxRedemptionRateThreshold)
		if !f(fd_Params_default_max_redemption_rate_threshold, value) {
			return
		}
	}
	if x.IbcTransferTimeoutNanos != uint64(0) {
		value := protoreflect.ValueOfUint64(x.IbcTransferTimeoutNanos)
		if !f(fd_Params_ibc_transfer_timeout_nanos, value) {
			return
		}
	}
	if x.ValidatorSlashQueryThreshold != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ValidatorSlashQueryThreshold)
		if !f(fd_Params_validator_slash_query_threshold, value) {
			return
		}
	}
	if x.ValidatorWeightCap != uint64(0) {
		value := protoreflect.ValueOfUint64(x.ValidatorWeightCap)
		if !f(fd_Params_validator_weight_cap, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Params) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "stride.stakeibc.Params.rewards_interval":
		return x.RewardsInterval != uint64(0)
	case "stride.stakeibc.Params.delegate_interval":
		return x.DelegateInterval != uint64(0)
	case "stride.stakeibc.Params.deposit_interval":
		return x.DepositInterval != uint64(0)
	case "stride.stakeibc.Params.redemption_rate_interval":
		return x.RedemptionRateInterval != uint64(0)
	case "stride.stakeibc.Params.stride_commission":
		return x.StrideCommission != uint64(0)
	case "stride.stakeibc.Params.reinvest_interval":
		return x.ReinvestInterval != uint64(0)
	case "stride.stakeibc.Params.ica_timeout_nanos":
		return x.IcaTimeoutNanos != uint64(0)
	case "stride.stakeibc.Params.buffer_size":
		return x.BufferSize != uint64(0)
	case "stride.stakeibc.Params.ibc_timeout_blocks":
		return x.IbcTimeoutBlocks != uint64(0)
	case "stride.stakeibc.Params.fee_transfer_timeout_nanos":
		return x.FeeTransferTimeoutNanos != uint64(0)
	case "stride.stakeibc.Params.max_stake_ica_calls_per_epoch":
		return x.MaxStakeIcaCallsPerEpoch != uint64(0)
	case "stride.stakeibc.Params.default_min_redemption_rate_threshold":
		return x.DefaultMinRedemptionRateThreshold != uint64(0)
	case "stride.stakeibc.Params.default_max_redemption_rate_threshold":
		return x.DefaultMaxRedemptionRateThreshold != uint64(0)
	case "stride.stakeibc.Params.ibc_transfer_timeout_nanos":
		return x.IbcTransferTimeoutNanos != uint64(0)
	case "stride.stakeibc.Params.validator_slash_query_threshold":
		return x.ValidatorSlashQueryThreshold != uint64(0)
	case "stride.stakeibc.Params.validator_weight_cap":
		return x.ValidatorWeightCap != uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.Params"))
		}
		panic(fmt.Errorf("message stride.stakeibc.Params does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "stride.stakeibc.Params.rewards_interval":
		x.RewardsInterval = uint64(0)
	case "stride.stakeibc.Params.delegate_interval":
		x.DelegateInterval = uint64(0)
	case "stride.stakeibc.Params.deposit_interval":
		x.DepositInterval = uint64(0)
	case "stride.stakeibc.Params.redemption_rate_interval":
		x.RedemptionRateInterval = uint64(0)
	case "stride.stakeibc.Params.stride_commission":
		x.StrideCommission = uint64(0)
	case "stride.stakeibc.Params.reinvest_interval":
		x.ReinvestInterval = uint64(0)
	case "stride.stakeibc.Params.ica_timeout_nanos":
		x.IcaTimeoutNanos = uint64(0)
	case "stride.stakeibc.Params.buffer_size":
		x.BufferSize = uint64(0)
	case "stride.stakeibc.Params.ibc_timeout_blocks":
		x.IbcTimeoutBlocks = uint64(0)
	case "stride.stakeibc.Params.fee_transfer_timeout_nanos":
		x.FeeTransferTimeoutNanos = uint64(0)
	case "stride.stakeibc.Params.max_stake_ica_calls_per_epoch":
		x.MaxStakeIcaCallsPerEpoch = uint64(0)
	case "stride.stakeibc.Params.default_min_redemption_rate_threshold":
		x.DefaultMinRedemptionRateThreshold = uint64(0)
	case "stride.stakeibc.Params.default_max_redemption_rate_threshold":
		x.DefaultMaxRedemptionRateThreshold = uint64(0)
	case "stride.stakeibc.Params.ibc_transfer_timeout_nanos":
		x.IbcTransferTimeoutNanos = uint64(0)
	case "stride.stakeibc.Params.validator_slash_query_threshold":
		x.ValidatorSlashQueryThreshold = uint64(0)
	case "stride.stakeibc.Params.validator_weight_cap":
		x.ValidatorWeightCap = uint64(0)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.Params"))
		}
		panic(fmt.Errorf("message stride.stakeibc.Params does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Params) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "stride.stakeibc.Params.rewards_interval":
		value := x.RewardsInterval
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.delegate_interval":
		value := x.DelegateInterval
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.deposit_interval":
		value := x.DepositInterval
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.redemption_rate_interval":
		value := x.RedemptionRateInterval
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.stride_commission":
		value := x.StrideCommission
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.reinvest_interval":
		value := x.ReinvestInterval
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.ica_timeout_nanos":
		value := x.IcaTimeoutNanos
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.buffer_size":
		value := x.BufferSize
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.ibc_timeout_blocks":
		value := x.IbcTimeoutBlocks
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.fee_transfer_timeout_nanos":
		value := x.FeeTransferTimeoutNanos
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.max_stake_ica_calls_per_epoch":
		value := x.MaxStakeIcaCallsPerEpoch
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.default_min_redemption_rate_threshold":
		value := x.DefaultMinRedemptionRateThreshold
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.default_max_redemption_rate_threshold":
		value := x.DefaultMaxRedemptionRateThreshold
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.ibc_transfer_timeout_nanos":
		value := x.IbcTransferTimeoutNanos
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.validator_slash_query_threshold":
		value := x.ValidatorSlashQueryThreshold
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.Params.validator_weight_cap":
		value := x.ValidatorWeightCap
		return protoreflect.ValueOfUint64(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.Params"))
		}
		panic(fmt.Errorf("message stride.stakeibc.Params does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "stride.stakeibc.Params.rewards_interval":
		x.RewardsInterval = value.Uint()
	case "stride.stakeibc.Params.delegate_interval":
		x.DelegateInterval = value.Uint()
	case "stride.stakeibc.Params.deposit_interval":
		x.DepositInterval = value.Uint()
	case "stride.stakeibc.Params.redemption_rate_interval":
		x.RedemptionRateInterval = value.Uint()
	case "stride.stakeibc.Params.stride_commission":
		x.StrideCommission = value.Uint()
	case "stride.stakeibc.Params.reinvest_interval":
		x.ReinvestInterval = value.Uint()
	case "stride.stakeibc.Params.ica_timeout_nanos":
		x.IcaTimeoutNanos = value.Uint()
	case "stride.stakeibc.Params.buffer_size":
		x.BufferSize = value.Uint()
	case "stride.stakeibc.Params.ibc_timeout_blocks":
		x.IbcTimeoutBlocks = value.Uint()
	case "stride.stakeibc.Params.fee_transfer_timeout_nanos":
		x.FeeTransferTimeoutNanos = value.Uint()
	case "stride.stakeibc.Params.max_stake_ica_calls_per_epoch":
		x.MaxStakeIcaCallsPerEpoch = value.Uint()
	case "stride.stakeibc.Params.default_min_redemption_rate_threshold":
		x.DefaultMinRedemptionRateThreshold = value.Uint()
	case "stride.stakeibc.Params.default_max_redemption_rate_threshold":
		x.DefaultMaxRedemptionRateThreshold = value.Uint()
	case "stride.stakeibc.Params.ibc_transfer_timeout_nanos":
		x.IbcTransferTimeoutNanos = value.Uint()
	case "stride.stakeibc.Params.validator_slash_query_threshold":
		x.ValidatorSlashQueryThreshold = value.Uint()
	case "stride.stakeibc.Params.validator_weight_cap":
		x.ValidatorWeightCap = value.Uint()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.Params"))
		}
		panic(fmt.Errorf("message stride.stakeibc.Params does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stride.stakeibc.Params.rewards_interval":
		panic(fmt.Errorf("field rewards_interval of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.delegate_interval":
		panic(fmt.Errorf("field delegate_interval of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.deposit_interval":
		panic(fmt.Errorf("field deposit_interval of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.redemption_rate_interval":
		panic(fmt.Errorf("field redemption_rate_interval of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.stride_commission":
		panic(fmt.Errorf("field stride_commission of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.reinvest_interval":
		panic(fmt.Errorf("field reinvest_interval of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.ica_timeout_nanos":
		panic(fmt.Errorf("field ica_timeout_nanos of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.buffer_size":
		panic(fmt.Errorf("field buffer_size of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.ibc_timeout_blocks":
		panic(fmt.Errorf("field ibc_timeout_blocks of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.fee_transfer_timeout_nanos":
		panic(fmt.Errorf("field fee_transfer_timeout_nanos of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.max_stake_ica_calls_per_epoch":
		panic(fmt.Errorf("field max_stake_ica_calls_per_epoch of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.default_min_redemption_rate_threshold":
		panic(fmt.Errorf("field default_min_redemption_rate_threshold of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.default_max_redemption_rate_threshold":
		panic(fmt.Errorf("field default_max_redemption_rate_threshold of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.ibc_transfer_timeout_nanos":
		panic(fmt.Errorf("field ibc_transfer_timeout_nanos of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.validator_slash_query_threshold":
		panic(fmt.Errorf("field validator_slash_query_threshold of message stride.stakeibc.Params is not mutable"))
	case "stride.stakeibc.Params.validator_weight_cap":
		panic(fmt.Errorf("field validator_weight_cap of message stride.stakeibc.Params is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.Params"))
		}
		panic(fmt.Errorf("message stride.stakeibc.Params does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Params) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stride.stakeibc.Params.rewards_interval":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.delegate_interval":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.deposit_interval":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.redemption_rate_interval":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.stride_commission":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.reinvest_interval":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.ica_timeout_nanos":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.buffer_size":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.ibc_timeout_blocks":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.fee_transfer_timeout_nanos":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.max_stake_ica_calls_per_epoch":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.default_min_redemption_rate_threshold":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.default_max_redemption_rate_threshold":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.ibc_transfer_timeout_nanos":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.validator_slash_query_threshold":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.Params.validator_weight_cap":
		return protoreflect.ValueOfUint64(uint64(0))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.Params"))
		}
		panic(fmt.Errorf("message stride.stakeibc.Params does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Params) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in stride.stakeibc.Params", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Params) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Params) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Params) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Params) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.RewardsInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.RewardsInterval))
		}
		if x.DelegateInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.DelegateInterval))
		}
		if x.DepositInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.DepositInterval))
		}
		if x.RedemptionRateInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.RedemptionRateInterval))
		}
		if x.StrideCommission != 0 {
			n += 1 + runtime.Sov(uint64(x.StrideCommission))
		}
		if x.ReinvestInterval != 0 {
			n += 1 + runtime.Sov(uint64(x.ReinvestInterval))
		}
		if x.IcaTimeoutNanos != 0 {
			n += 1 + runtime.Sov(uint64(x.IcaTimeoutNanos))
		}
		if x.BufferSize != 0 {
			n += 1 + runtime.Sov(uint64(x.BufferSize))
		}
		if x.IbcTimeoutBlocks != 0 {
			n += 1 + runtime.Sov(uint64(x.IbcTimeoutBlocks))
		}
		if x.FeeTransferTimeoutNanos != 0 {
			n += 1 + runtime.Sov(uint64(x.FeeTransferTimeoutNanos))
		}
		if x.MaxStakeIcaCallsPerEpoch != 0 {
			n += 1 + runtime.Sov(uint64(x.MaxStakeIcaCallsPerEpoch))
		}
		if x.DefaultMinRedemptionRateThreshold != 0 {
			n += 1 + runtime.Sov(uint64(x.DefaultMinRedemptionRateThreshold))
		}
		if x.DefaultMaxRedemptionRateThreshold != 0 {
			n += 1 + runtime.Sov(uint64(x.DefaultMaxRedemptionRateThreshold))
		}
		if x.IbcTransferTimeoutNanos != 0 {
			n += 2 + runtime.Sov(uint64(x.IbcTransferTimeoutNanos))
		}
		if x.ValidatorSlashQueryThreshold != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidatorSlashQueryThreshold))
		}
		if x.ValidatorWeightCap != 0 {
			n += 2 + runtime.Sov(uint64(x.ValidatorWeightCap))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.ValidatorWeightCap != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidatorWeightCap))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
		if x.ValidatorSlashQueryThreshold != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ValidatorSlashQueryThreshold))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x98
		}
		if x.IbcTransferTimeoutNanos != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.IbcTransferTimeoutNanos))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if x.DefaultMaxRedemptionRateThreshold != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DefaultMaxRedemptionRateThreshold))
			i--
			dAtA[i] = 0x78
		}
		if x.DefaultMinRedemptionRateThreshold != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DefaultMinRedemptionRateThreshold))
			i--
			dAtA[i] = 0x70
		}
		if x.MaxStakeIcaCallsPerEpoch != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxStakeIcaCallsPerEpoch))
			i--
			dAtA[i] = 0x68
		}
		if x.FeeTransferTimeoutNanos != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.FeeTransferTimeoutNanos))
			i--
			dAtA[i] = 0x60
		}
		if x.IbcTimeoutBlocks != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.IbcTimeoutBlocks))
			i--
			dAtA[i] = 0x58
		}
		if x.BufferSize != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.BufferSize))
			i--
			dAtA[i] = 0x50
		}
		if x.IcaTimeoutNanos != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.IcaTimeoutNanos))
			i--
			dAtA[i] = 0x48
		}
		if x.ReinvestInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.ReinvestInterval))
			i--
			dAtA[i] = 0x38
		}
		if x.DelegateInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DelegateInterval))
			i--
			dAtA[i] = 0x30
		}
		if x.StrideCommission != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.StrideCommission))
			i--
			dAtA[i] = 0x20
		}
		if x.RedemptionRateInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RedemptionRateInterval))
			i--
			dAtA[i] = 0x18
		}
		if x.DepositInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.DepositInterval))
			i--
			dAtA[i] = 0x10
		}
		if x.RewardsInterval != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.RewardsInterval))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Params)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardsInterval", wireType)
				}
				x.RewardsInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RewardsInterval |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelegateInterval", wireType)
				}
				x.DelegateInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DelegateInterval |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DepositInterval", wireType)
				}
				x.DepositInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DepositInterval |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RedemptionRateInterval", wireType)
				}
				x.RedemptionRateInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.RedemptionRateInterval |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field StrideCommission", wireType)
				}
				x.StrideCommission = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.StrideCommission |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 7:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ReinvestInterval", wireType)
				}
				x.ReinvestInterval = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ReinvestInterval |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IcaTimeoutNanos", wireType)
				}
				x.IcaTimeoutNanos = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.IcaTimeoutNanos |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field BufferSize", wireType)
				}
				x.BufferSize = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.BufferSize |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IbcTimeoutBlocks", wireType)
				}
				x.IbcTimeoutBlocks = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.IbcTimeoutBlocks |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeTransferTimeoutNanos", wireType)
				}
				x.FeeTransferTimeoutNanos = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.FeeTransferTimeoutNanos |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxStakeIcaCallsPerEpoch", wireType)
				}
				x.MaxStakeIcaCallsPerEpoch = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxStakeIcaCallsPerEpoch |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultMinRedemptionRateThreshold", wireType)
				}
				x.DefaultMinRedemptionRateThreshold = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DefaultMinRedemptionRateThreshold |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DefaultMaxRedemptionRateThreshold", wireType)
				}
				x.DefaultMaxRedemptionRateThreshold = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.DefaultMaxRedemptionRateThreshold |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IbcTransferTimeoutNanos", wireType)
				}
				x.IbcTransferTimeoutNanos = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.IbcTransferTimeoutNanos |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 19:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorSlashQueryThreshold", wireType)
				}
				x.ValidatorSlashQueryThreshold = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidatorSlashQueryThreshold |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 20:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ValidatorWeightCap", wireType)
				}
				x.ValidatorWeightCap = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.ValidatorWeightCap |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: stride/stakeibc/params.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Params defines the parameters for the module.
// next id: 20
type Params struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// define epoch lengths, in stride_epochs
	RewardsInterval                   uint64 `protobuf:"varint,1,opt,name=rewards_interval,json=rewardsInterval,proto3" json:"rewards_interval,omitempty"`
	DelegateInterval                  uint64 `protobuf:"varint,6,opt,name=delegate_interval,json=delegateInterval,proto3" json:"delegate_interval,omitempty"`
	DepositInterval                   uint64 `protobuf:"varint,2,opt,name=deposit_interval,json=depositInterval,proto3" json:"deposit_interval,omitempty"`
	RedemptionRateInterval            uint64 `protobuf:"varint,3,opt,name=redemption_rate_interval,json=redemptionRateInterval,proto3" json:"redemption_rate_interval,omitempty"`
	StrideCommission                  uint64 `protobuf:"varint,4,opt,name=stride_commission,json=strideCommission,proto3" json:"stride_commission,omitempty"`
	ReinvestInterval                  uint64 `protobuf:"varint,7,opt,name=reinvest_interval,json=reinvestInterval,proto3" json:"reinvest_interval,omitempty"`
	IcaTimeoutNanos                   uint64 `protobuf:"varint,9,opt,name=ica_timeout_nanos,json=icaTimeoutNanos,proto3" json:"ica_timeout_nanos,omitempty"`
	BufferSize                        uint64 `protobuf:"varint,10,opt,name=buffer_size,json=bufferSize,proto3" json:"buffer_size,omitempty"`
	IbcTimeoutBlocks                  uint64 `protobuf:"varint,11,opt,name=ibc_timeout_blocks,json=ibcTimeoutBlocks,proto3" json:"ibc_timeout_blocks,omitempty"`
	FeeTransferTimeoutNanos           uint64 `protobuf:"varint,12,opt,name=fee_transfer_timeout_nanos,json=feeTransferTimeoutNanos,proto3" json:"fee_transfer_timeout_nanos,omitempty"`
	MaxStakeIcaCallsPerEpoch          uint64 `protobuf:"varint,13,opt,name=max_stake_ica_calls_per_epoch,json=maxStakeIcaCallsPerEpoch,proto3" json:"max_stake_ica_calls_per_epoch,omitempty"`
	DefaultMinRedemptionRateThreshold uint64 `protobuf:"varint,14,opt,name=default_min_redemption_rate_threshold,json=defaultMinRedemptionRateThreshold,proto3" json:"default_min_redemption_rate_threshold,omitempty"`
	DefaultMaxRedemptionRateThreshold uint64 `protobuf:"varint,15,opt,name=default_max_redemption_rate_threshold,json=defaultMaxRedemptionRateThreshold,proto3" json:"default_max_redemption_rate_threshold,omitempty"`
	IbcTransferTimeoutNanos           uint64 `protobuf:"varint,16,opt,name=ibc_transfer_timeout_nanos,json=ibcTransferTimeoutNanos,proto3" json:"ibc_transfer_timeout_nanos,omitempty"`
	ValidatorSlashQueryThreshold      uint64 `protobuf:"varint,19,opt,name=validator_slash_query_threshold,json=validatorSlashQueryThreshold,proto3" json:"validator_slash_query_threshold,omitempty"`
	ValidatorWeightCap                uint64 `protobuf:"varint,20,opt,name=validator_weight_cap,json=validatorWeightCap,proto3" json:"validator_weight_cap,omitempty"`
}

func (x *Params) Reset() {
	*x = Params{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stride_stakeibc_params_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_stride_stakeibc_params_proto_rawDescGZIP(), []int{0}
}

func (x *Params) GetRewardsInterval() uint64 {
	if x != nil {
		return x.RewardsInterval
	}
	return 0
}

func (x *Params) GetDelegateInterval() uint64 {
	if x != nil {
		return x.DelegateInterval
	}
	return 0
}

func (x *Params) GetDepositInterval() uint64 {
	if x != nil {
		return x.DepositInterval
	}
	return 0
}

func (x *Params) GetRedemptionRateInterval() uint64 {
	if x != nil {
		return x.RedemptionRateInterval
	}
	return 0
}

func (x *Params) GetStrideCommission() uint64 {
	if x != nil {
		return x.StrideCommission
	}
	return 0
}

func (x *Params) GetReinvestInterval() uint64 {
	if x != nil {
		return x.ReinvestInterval
	}
	return 0
}

func (x *Params) GetIcaTimeoutNanos() uint64 {
	if x != nil {
		return x.IcaTimeoutNanos
	}
	return 0
}

func (x *Params) GetBufferSize() uint64 {
	if x != nil {
		return x.BufferSize
	}
	return 0
}

func (x *Params) GetIbcTimeoutBlocks() uint64 {
	if x != nil {
		return x.IbcTimeoutBlocks
	}
	return 0
}

func (x *Params) GetFeeTransferTimeoutNanos() uint64 {
	if x != nil {
		return x.FeeTransferTimeoutNanos
	}
	return 0
}

func (x *Params) GetMaxStakeIcaCallsPerEpoch() uint64 {
	if x != nil {
		return x.MaxStakeIcaCallsPerEpoch
	}
	return 0
}

func (x *Params) GetDefaultMinRedemptionRateThreshold() uint64 {
	if x != nil {
		return x.DefaultMinRedemptionRateThreshold
	}
	return 0
}

func (x *Params) GetDefaultMaxRedemptionRateThreshold() uint64 {
	if x != nil {
		return x.DefaultMaxRedemptionRateThreshold
	}
	return 0
}

func (x *Params) GetIbcTransferTimeoutNanos() uint64 {
	if x != nil {
		return x.IbcTransferTimeoutNanos
	}
	return 0
}

func (x *Params) GetValidatorSlashQueryThreshold() uint64 {
	if x != nil {
		return x.ValidatorSlashQueryThreshold
	}
	return 0
}

func (x *Params) GetValidatorWeightCap() uint64 {
	if x != nil {
		return x.ValidatorWeightCap
	}
	return 0
}

var File_stride_stakeibc_params_proto protoreflect.FileDescriptor

var file_stride_stakeibc_params_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62,
	0x63, 0x2f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f,
	0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0x1a,
	0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x07, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x29, 0x0a, 0x10, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x11, 0x64,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x11, 0x72, 0x65,
	0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x72, 0x65, 0x69, 0x6e, 0x76, 0x65, 0x73, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x63, 0x61, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0f, 0x69, 0x63, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x61,
	0x6e, 0x6f, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
	0x53, 0x69, 0x7a, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x62, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x10, 0x69, 0x62, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x12, 0x3b, 0x0a, 0x1a, 0x66, 0x65, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6e, 0x6f, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x66, 0x65, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6e, 0x6f, 0x73, 0x12,
	0x3f, 0x0a, 0x1d, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x69, 0x63, 0x61,
	0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x49, 0x63, 0x61, 0x43, 0x61, 0x6c, 0x6c, 0x73, 0x50, 0x65, 0x72, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x50, 0x0a, 0x25, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x21, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x69, 0x6e, 0x52, 0x65, 0x64, 0x65, 0x6d,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x21, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4d, 0x61, 0x78, 0x52, 0x65, 0x64,
	0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x12, 0x3b, 0x0a, 0x1a, 0x69, 0x62, 0x63, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x65, 0x72, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6e,
	0x6f, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x69, 0x62, 0x63, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6e, 0x6f,
	0x73, 0x12, 0x45, 0x0a, 0x1f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x6c, 0x61, 0x73, 0x68, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1c, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x6c, 0x61, 0x73, 0x68, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54,
	0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x61, 0x70,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x61, 0x70, 0x3a, 0x04, 0x98, 0xa0, 0x1f, 0x00,
	0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a, 0x04, 0x08, 0x11, 0x10, 0x12, 0x4a, 0x04, 0x08, 0x12,
	0x10, 0x13, 0x42, 0xb6, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x64,
	0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0x42, 0x0b, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x69, 0x6c, 0x6b, 0x79, 0x77, 0x61, 0x79, 0x2d, 0x6c,
	0x61, 0x62, 0x73, 0x2f, 0x6d, 0x69, 0x6c, 0x6b, 0x79, 0x77, 0x61, 0x79, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63,
	0xa2, 0x02, 0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0xca, 0x02, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x64,
	0x65, 0x5c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0xe2, 0x02, 0x1b, 0x53, 0x74, 0x72,
	0x69, 0x64, 0x65, 0x5c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x53, 0x74, 0x72, 0x69, 0x64,
	0x65, 0x3a, 0x3a, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_stride_stakeibc_params_proto_rawDescOnce sync.Once
	file_stride_stakeibc_params_proto_rawDescData = file_stride_stakeibc_params_proto_rawDesc
)

func file_stride_stakeibc_params_proto_rawDescGZIP() []byte {
	file_stride_stakeibc_params_proto_rawDescOnce.Do(func() {
		file_stride_stakeibc_params_proto_rawDescData = protoimpl.X.CompressGZIP(file_stride_stakeibc_params_proto_rawDescData)
	})
	return file_stride_stakeibc_params_proto_rawDescData
}

var file_stride_stakeibc_params_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_stride_stakeibc_params_proto_goTypes = []interface{}{
	(*Params)(nil), // 0: stride.stakeibc.Params
}
var file_stride_stakeibc_params_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_stride_stakeibc_params_proto_init() }
func file_stride_stakeibc_params_proto_init() {
	if File_stride_stakeibc_params_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stride_stakeibc_params_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Params); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stride_stakeibc_params_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stride_stakeibc_params_proto_goTypes,
		DependencyIndexes: file_stride_stakeibc_params_proto_depIdxs,
		MessageInfos:      file_stride_stakeibc_params_proto_msgTypes,
	}.Build()
	File_stride_stakeibc_params_proto = out.File
	file_stride_stakeibc_params_proto_rawDesc = nil
	file_stride_stakeibc_params_proto_goTypes = nil
	file_stride_stakeibc_params_proto_depIdxs = nil
}
