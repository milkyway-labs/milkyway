// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package stakeibc

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_TradeConfig                            protoreflect.MessageDescriptor
	fd_TradeConfig_pool_id                    protoreflect.FieldDescriptor
	fd_TradeConfig_swap_price                 protoreflect.FieldDescriptor
	fd_TradeConfig_price_update_timestamp     protoreflect.FieldDescriptor
	fd_TradeConfig_max_allowed_swap_loss_rate protoreflect.FieldDescriptor
	fd_TradeConfig_min_swap_amount            protoreflect.FieldDescriptor
	fd_TradeConfig_max_swap_amount            protoreflect.FieldDescriptor
)

func init() {
	file_stride_stakeibc_trade_route_proto_init()
	md_TradeConfig = File_stride_stakeibc_trade_route_proto.Messages().ByName("TradeConfig")
	fd_TradeConfig_pool_id = md_TradeConfig.Fields().ByName("pool_id")
	fd_TradeConfig_swap_price = md_TradeConfig.Fields().ByName("swap_price")
	fd_TradeConfig_price_update_timestamp = md_TradeConfig.Fields().ByName("price_update_timestamp")
	fd_TradeConfig_max_allowed_swap_loss_rate = md_TradeConfig.Fields().ByName("max_allowed_swap_loss_rate")
	fd_TradeConfig_min_swap_amount = md_TradeConfig.Fields().ByName("min_swap_amount")
	fd_TradeConfig_max_swap_amount = md_TradeConfig.Fields().ByName("max_swap_amount")
}

var _ protoreflect.Message = (*fastReflection_TradeConfig)(nil)

type fastReflection_TradeConfig TradeConfig

func (x *TradeConfig) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TradeConfig)(x)
}

func (x *TradeConfig) slowProtoReflect() protoreflect.Message {
	mi := &file_stride_stakeibc_trade_route_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TradeConfig_messageType fastReflection_TradeConfig_messageType
var _ protoreflect.MessageType = fastReflection_TradeConfig_messageType{}

type fastReflection_TradeConfig_messageType struct{}

func (x fastReflection_TradeConfig_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TradeConfig)(nil)
}
func (x fastReflection_TradeConfig_messageType) New() protoreflect.Message {
	return new(fastReflection_TradeConfig)
}
func (x fastReflection_TradeConfig_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TradeConfig
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TradeConfig) Descriptor() protoreflect.MessageDescriptor {
	return md_TradeConfig
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TradeConfig) Type() protoreflect.MessageType {
	return _fastReflection_TradeConfig_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TradeConfig) New() protoreflect.Message {
	return new(fastReflection_TradeConfig)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TradeConfig) Interface() protoreflect.ProtoMessage {
	return (*TradeConfig)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TradeConfig) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.PoolId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PoolId)
		if !f(fd_TradeConfig_pool_id, value) {
			return
		}
	}
	if x.SwapPrice != "" {
		value := protoreflect.ValueOfString(x.SwapPrice)
		if !f(fd_TradeConfig_swap_price, value) {
			return
		}
	}
	if x.PriceUpdateTimestamp != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PriceUpdateTimestamp)
		if !f(fd_TradeConfig_price_update_timestamp, value) {
			return
		}
	}
	if x.MaxAllowedSwapLossRate != "" {
		value := protoreflect.ValueOfString(x.MaxAllowedSwapLossRate)
		if !f(fd_TradeConfig_max_allowed_swap_loss_rate, value) {
			return
		}
	}
	if x.MinSwapAmount != "" {
		value := protoreflect.ValueOfString(x.MinSwapAmount)
		if !f(fd_TradeConfig_min_swap_amount, value) {
			return
		}
	}
	if x.MaxSwapAmount != "" {
		value := protoreflect.ValueOfString(x.MaxSwapAmount)
		if !f(fd_TradeConfig_max_swap_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TradeConfig) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "stride.stakeibc.TradeConfig.pool_id":
		return x.PoolId != uint64(0)
	case "stride.stakeibc.TradeConfig.swap_price":
		return x.SwapPrice != ""
	case "stride.stakeibc.TradeConfig.price_update_timestamp":
		return x.PriceUpdateTimestamp != uint64(0)
	case "stride.stakeibc.TradeConfig.max_allowed_swap_loss_rate":
		return x.MaxAllowedSwapLossRate != ""
	case "stride.stakeibc.TradeConfig.min_swap_amount":
		return x.MinSwapAmount != ""
	case "stride.stakeibc.TradeConfig.max_swap_amount":
		return x.MaxSwapAmount != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.TradeConfig"))
		}
		panic(fmt.Errorf("message stride.stakeibc.TradeConfig does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeConfig) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "stride.stakeibc.TradeConfig.pool_id":
		x.PoolId = uint64(0)
	case "stride.stakeibc.TradeConfig.swap_price":
		x.SwapPrice = ""
	case "stride.stakeibc.TradeConfig.price_update_timestamp":
		x.PriceUpdateTimestamp = uint64(0)
	case "stride.stakeibc.TradeConfig.max_allowed_swap_loss_rate":
		x.MaxAllowedSwapLossRate = ""
	case "stride.stakeibc.TradeConfig.min_swap_amount":
		x.MinSwapAmount = ""
	case "stride.stakeibc.TradeConfig.max_swap_amount":
		x.MaxSwapAmount = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.TradeConfig"))
		}
		panic(fmt.Errorf("message stride.stakeibc.TradeConfig does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TradeConfig) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "stride.stakeibc.TradeConfig.pool_id":
		value := x.PoolId
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.TradeConfig.swap_price":
		value := x.SwapPrice
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.TradeConfig.price_update_timestamp":
		value := x.PriceUpdateTimestamp
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.TradeConfig.max_allowed_swap_loss_rate":
		value := x.MaxAllowedSwapLossRate
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.TradeConfig.min_swap_amount":
		value := x.MinSwapAmount
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.TradeConfig.max_swap_amount":
		value := x.MaxSwapAmount
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.TradeConfig"))
		}
		panic(fmt.Errorf("message stride.stakeibc.TradeConfig does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeConfig) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "stride.stakeibc.TradeConfig.pool_id":
		x.PoolId = value.Uint()
	case "stride.stakeibc.TradeConfig.swap_price":
		x.SwapPrice = value.Interface().(string)
	case "stride.stakeibc.TradeConfig.price_update_timestamp":
		x.PriceUpdateTimestamp = value.Uint()
	case "stride.stakeibc.TradeConfig.max_allowed_swap_loss_rate":
		x.MaxAllowedSwapLossRate = value.Interface().(string)
	case "stride.stakeibc.TradeConfig.min_swap_amount":
		x.MinSwapAmount = value.Interface().(string)
	case "stride.stakeibc.TradeConfig.max_swap_amount":
		x.MaxSwapAmount = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.TradeConfig"))
		}
		panic(fmt.Errorf("message stride.stakeibc.TradeConfig does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeConfig) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stride.stakeibc.TradeConfig.pool_id":
		panic(fmt.Errorf("field pool_id of message stride.stakeibc.TradeConfig is not mutable"))
	case "stride.stakeibc.TradeConfig.swap_price":
		panic(fmt.Errorf("field swap_price of message stride.stakeibc.TradeConfig is not mutable"))
	case "stride.stakeibc.TradeConfig.price_update_timestamp":
		panic(fmt.Errorf("field price_update_timestamp of message stride.stakeibc.TradeConfig is not mutable"))
	case "stride.stakeibc.TradeConfig.max_allowed_swap_loss_rate":
		panic(fmt.Errorf("field max_allowed_swap_loss_rate of message stride.stakeibc.TradeConfig is not mutable"))
	case "stride.stakeibc.TradeConfig.min_swap_amount":
		panic(fmt.Errorf("field min_swap_amount of message stride.stakeibc.TradeConfig is not mutable"))
	case "stride.stakeibc.TradeConfig.max_swap_amount":
		panic(fmt.Errorf("field max_swap_amount of message stride.stakeibc.TradeConfig is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.TradeConfig"))
		}
		panic(fmt.Errorf("message stride.stakeibc.TradeConfig does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TradeConfig) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stride.stakeibc.TradeConfig.pool_id":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.TradeConfig.swap_price":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.TradeConfig.price_update_timestamp":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.TradeConfig.max_allowed_swap_loss_rate":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.TradeConfig.min_swap_amount":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.TradeConfig.max_swap_amount":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.TradeConfig"))
		}
		panic(fmt.Errorf("message stride.stakeibc.TradeConfig does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TradeConfig) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in stride.stakeibc.TradeConfig", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TradeConfig) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeConfig) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TradeConfig) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TradeConfig) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TradeConfig)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		if x.PoolId != 0 {
			n += 1 + runtime.Sov(uint64(x.PoolId))
		}
		l = len(x.SwapPrice)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PriceUpdateTimestamp != 0 {
			n += 1 + runtime.Sov(uint64(x.PriceUpdateTimestamp))
		}
		l = len(x.MaxAllowedSwapLossRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MinSwapAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MaxSwapAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TradeConfig)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.MaxSwapAmount) > 0 {
			i -= len(x.MaxSwapAmount)
			copy(dAtA[i:], x.MaxSwapAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxSwapAmount)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.MinSwapAmount) > 0 {
			i -= len(x.MinSwapAmount)
			copy(dAtA[i:], x.MinSwapAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinSwapAmount)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.MaxAllowedSwapLossRate) > 0 {
			i -= len(x.MaxAllowedSwapLossRate)
			copy(dAtA[i:], x.MaxAllowedSwapLossRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxAllowedSwapLossRate)))
			i--
			dAtA[i] = 0x22
		}
		if x.PriceUpdateTimestamp != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PriceUpdateTimestamp))
			i--
			dAtA[i] = 0x18
		}
		if len(x.SwapPrice) > 0 {
			i -= len(x.SwapPrice)
			copy(dAtA[i:], x.SwapPrice)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.SwapPrice)))
			i--
			dAtA[i] = 0x12
		}
		if x.PoolId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PoolId))
			i--
			dAtA[i] = 0x8
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TradeConfig)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TradeConfig: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TradeConfig: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
				}
				x.PoolId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PoolId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field SwapPrice", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.SwapPrice = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PriceUpdateTimestamp", wireType)
				}
				x.PriceUpdateTimestamp = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PriceUpdateTimestamp |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxAllowedSwapLossRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxAllowedSwapLossRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinSwapAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinSwapAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxSwapAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxSwapAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var (
	md_TradeRoute                             protoreflect.MessageDescriptor
	fd_TradeRoute_reward_denom_on_host_zone   protoreflect.FieldDescriptor
	fd_TradeRoute_reward_denom_on_reward_zone protoreflect.FieldDescriptor
	fd_TradeRoute_reward_denom_on_trade_zone  protoreflect.FieldDescriptor
	fd_TradeRoute_host_denom_on_trade_zone    protoreflect.FieldDescriptor
	fd_TradeRoute_host_denom_on_host_zone     protoreflect.FieldDescriptor
	fd_TradeRoute_host_account                protoreflect.FieldDescriptor
	fd_TradeRoute_reward_account              protoreflect.FieldDescriptor
	fd_TradeRoute_trade_account               protoreflect.FieldDescriptor
	fd_TradeRoute_host_to_reward_channel_id   protoreflect.FieldDescriptor
	fd_TradeRoute_reward_to_trade_channel_id  protoreflect.FieldDescriptor
	fd_TradeRoute_trade_to_host_channel_id    protoreflect.FieldDescriptor
	fd_TradeRoute_trade_config                protoreflect.FieldDescriptor
)

func init() {
	file_stride_stakeibc_trade_route_proto_init()
	md_TradeRoute = File_stride_stakeibc_trade_route_proto.Messages().ByName("TradeRoute")
	fd_TradeRoute_reward_denom_on_host_zone = md_TradeRoute.Fields().ByName("reward_denom_on_host_zone")
	fd_TradeRoute_reward_denom_on_reward_zone = md_TradeRoute.Fields().ByName("reward_denom_on_reward_zone")
	fd_TradeRoute_reward_denom_on_trade_zone = md_TradeRoute.Fields().ByName("reward_denom_on_trade_zone")
	fd_TradeRoute_host_denom_on_trade_zone = md_TradeRoute.Fields().ByName("host_denom_on_trade_zone")
	fd_TradeRoute_host_denom_on_host_zone = md_TradeRoute.Fields().ByName("host_denom_on_host_zone")
	fd_TradeRoute_host_account = md_TradeRoute.Fields().ByName("host_account")
	fd_TradeRoute_reward_account = md_TradeRoute.Fields().ByName("reward_account")
	fd_TradeRoute_trade_account = md_TradeRoute.Fields().ByName("trade_account")
	fd_TradeRoute_host_to_reward_channel_id = md_TradeRoute.Fields().ByName("host_to_reward_channel_id")
	fd_TradeRoute_reward_to_trade_channel_id = md_TradeRoute.Fields().ByName("reward_to_trade_channel_id")
	fd_TradeRoute_trade_to_host_channel_id = md_TradeRoute.Fields().ByName("trade_to_host_channel_id")
	fd_TradeRoute_trade_config = md_TradeRoute.Fields().ByName("trade_config")
}

var _ protoreflect.Message = (*fastReflection_TradeRoute)(nil)

type fastReflection_TradeRoute TradeRoute

func (x *TradeRoute) ProtoReflect() protoreflect.Message {
	return (*fastReflection_TradeRoute)(x)
}

func (x *TradeRoute) slowProtoReflect() protoreflect.Message {
	mi := &file_stride_stakeibc_trade_route_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_TradeRoute_messageType fastReflection_TradeRoute_messageType
var _ protoreflect.MessageType = fastReflection_TradeRoute_messageType{}

type fastReflection_TradeRoute_messageType struct{}

func (x fastReflection_TradeRoute_messageType) Zero() protoreflect.Message {
	return (*fastReflection_TradeRoute)(nil)
}
func (x fastReflection_TradeRoute_messageType) New() protoreflect.Message {
	return new(fastReflection_TradeRoute)
}
func (x fastReflection_TradeRoute_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_TradeRoute
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_TradeRoute) Descriptor() protoreflect.MessageDescriptor {
	return md_TradeRoute
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_TradeRoute) Type() protoreflect.MessageType {
	return _fastReflection_TradeRoute_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_TradeRoute) New() protoreflect.Message {
	return new(fastReflection_TradeRoute)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_TradeRoute) Interface() protoreflect.ProtoMessage {
	return (*TradeRoute)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_TradeRoute) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RewardDenomOnHostZone != "" {
		value := protoreflect.ValueOfString(x.RewardDenomOnHostZone)
		if !f(fd_TradeRoute_reward_denom_on_host_zone, value) {
			return
		}
	}
	if x.RewardDenomOnRewardZone != "" {
		value := protoreflect.ValueOfString(x.RewardDenomOnRewardZone)
		if !f(fd_TradeRoute_reward_denom_on_reward_zone, value) {
			return
		}
	}
	if x.RewardDenomOnTradeZone != "" {
		value := protoreflect.ValueOfString(x.RewardDenomOnTradeZone)
		if !f(fd_TradeRoute_reward_denom_on_trade_zone, value) {
			return
		}
	}
	if x.HostDenomOnTradeZone != "" {
		value := protoreflect.ValueOfString(x.HostDenomOnTradeZone)
		if !f(fd_TradeRoute_host_denom_on_trade_zone, value) {
			return
		}
	}
	if x.HostDenomOnHostZone != "" {
		value := protoreflect.ValueOfString(x.HostDenomOnHostZone)
		if !f(fd_TradeRoute_host_denom_on_host_zone, value) {
			return
		}
	}
	if x.HostAccount != nil {
		value := protoreflect.ValueOfMessage(x.HostAccount.ProtoReflect())
		if !f(fd_TradeRoute_host_account, value) {
			return
		}
	}
	if x.RewardAccount != nil {
		value := protoreflect.ValueOfMessage(x.RewardAccount.ProtoReflect())
		if !f(fd_TradeRoute_reward_account, value) {
			return
		}
	}
	if x.TradeAccount != nil {
		value := protoreflect.ValueOfMessage(x.TradeAccount.ProtoReflect())
		if !f(fd_TradeRoute_trade_account, value) {
			return
		}
	}
	if x.HostToRewardChannelId != "" {
		value := protoreflect.ValueOfString(x.HostToRewardChannelId)
		if !f(fd_TradeRoute_host_to_reward_channel_id, value) {
			return
		}
	}
	if x.RewardToTradeChannelId != "" {
		value := protoreflect.ValueOfString(x.RewardToTradeChannelId)
		if !f(fd_TradeRoute_reward_to_trade_channel_id, value) {
			return
		}
	}
	if x.TradeToHostChannelId != "" {
		value := protoreflect.ValueOfString(x.TradeToHostChannelId)
		if !f(fd_TradeRoute_trade_to_host_channel_id, value) {
			return
		}
	}
	if x.TradeConfig != nil {
		value := protoreflect.ValueOfMessage(x.TradeConfig.ProtoReflect())
		if !f(fd_TradeRoute_trade_config, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_TradeRoute) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "stride.stakeibc.TradeRoute.reward_denom_on_host_zone":
		return x.RewardDenomOnHostZone != ""
	case "stride.stakeibc.TradeRoute.reward_denom_on_reward_zone":
		return x.RewardDenomOnRewardZone != ""
	case "stride.stakeibc.TradeRoute.reward_denom_on_trade_zone":
		return x.RewardDenomOnTradeZone != ""
	case "stride.stakeibc.TradeRoute.host_denom_on_trade_zone":
		return x.HostDenomOnTradeZone != ""
	case "stride.stakeibc.TradeRoute.host_denom_on_host_zone":
		return x.HostDenomOnHostZone != ""
	case "stride.stakeibc.TradeRoute.host_account":
		return x.HostAccount != nil
	case "stride.stakeibc.TradeRoute.reward_account":
		return x.RewardAccount != nil
	case "stride.stakeibc.TradeRoute.trade_account":
		return x.TradeAccount != nil
	case "stride.stakeibc.TradeRoute.host_to_reward_channel_id":
		return x.HostToRewardChannelId != ""
	case "stride.stakeibc.TradeRoute.reward_to_trade_channel_id":
		return x.RewardToTradeChannelId != ""
	case "stride.stakeibc.TradeRoute.trade_to_host_channel_id":
		return x.TradeToHostChannelId != ""
	case "stride.stakeibc.TradeRoute.trade_config":
		return x.TradeConfig != nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.TradeRoute"))
		}
		panic(fmt.Errorf("message stride.stakeibc.TradeRoute does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeRoute) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "stride.stakeibc.TradeRoute.reward_denom_on_host_zone":
		x.RewardDenomOnHostZone = ""
	case "stride.stakeibc.TradeRoute.reward_denom_on_reward_zone":
		x.RewardDenomOnRewardZone = ""
	case "stride.stakeibc.TradeRoute.reward_denom_on_trade_zone":
		x.RewardDenomOnTradeZone = ""
	case "stride.stakeibc.TradeRoute.host_denom_on_trade_zone":
		x.HostDenomOnTradeZone = ""
	case "stride.stakeibc.TradeRoute.host_denom_on_host_zone":
		x.HostDenomOnHostZone = ""
	case "stride.stakeibc.TradeRoute.host_account":
		x.HostAccount = nil
	case "stride.stakeibc.TradeRoute.reward_account":
		x.RewardAccount = nil
	case "stride.stakeibc.TradeRoute.trade_account":
		x.TradeAccount = nil
	case "stride.stakeibc.TradeRoute.host_to_reward_channel_id":
		x.HostToRewardChannelId = ""
	case "stride.stakeibc.TradeRoute.reward_to_trade_channel_id":
		x.RewardToTradeChannelId = ""
	case "stride.stakeibc.TradeRoute.trade_to_host_channel_id":
		x.TradeToHostChannelId = ""
	case "stride.stakeibc.TradeRoute.trade_config":
		x.TradeConfig = nil
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.TradeRoute"))
		}
		panic(fmt.Errorf("message stride.stakeibc.TradeRoute does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_TradeRoute) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "stride.stakeibc.TradeRoute.reward_denom_on_host_zone":
		value := x.RewardDenomOnHostZone
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.TradeRoute.reward_denom_on_reward_zone":
		value := x.RewardDenomOnRewardZone
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.TradeRoute.reward_denom_on_trade_zone":
		value := x.RewardDenomOnTradeZone
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.TradeRoute.host_denom_on_trade_zone":
		value := x.HostDenomOnTradeZone
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.TradeRoute.host_denom_on_host_zone":
		value := x.HostDenomOnHostZone
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.TradeRoute.host_account":
		value := x.HostAccount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "stride.stakeibc.TradeRoute.reward_account":
		value := x.RewardAccount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "stride.stakeibc.TradeRoute.trade_account":
		value := x.TradeAccount
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "stride.stakeibc.TradeRoute.host_to_reward_channel_id":
		value := x.HostToRewardChannelId
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.TradeRoute.reward_to_trade_channel_id":
		value := x.RewardToTradeChannelId
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.TradeRoute.trade_to_host_channel_id":
		value := x.TradeToHostChannelId
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.TradeRoute.trade_config":
		value := x.TradeConfig
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.TradeRoute"))
		}
		panic(fmt.Errorf("message stride.stakeibc.TradeRoute does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeRoute) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "stride.stakeibc.TradeRoute.reward_denom_on_host_zone":
		x.RewardDenomOnHostZone = value.Interface().(string)
	case "stride.stakeibc.TradeRoute.reward_denom_on_reward_zone":
		x.RewardDenomOnRewardZone = value.Interface().(string)
	case "stride.stakeibc.TradeRoute.reward_denom_on_trade_zone":
		x.RewardDenomOnTradeZone = value.Interface().(string)
	case "stride.stakeibc.TradeRoute.host_denom_on_trade_zone":
		x.HostDenomOnTradeZone = value.Interface().(string)
	case "stride.stakeibc.TradeRoute.host_denom_on_host_zone":
		x.HostDenomOnHostZone = value.Interface().(string)
	case "stride.stakeibc.TradeRoute.host_account":
		x.HostAccount = value.Message().Interface().(*ICAAccount)
	case "stride.stakeibc.TradeRoute.reward_account":
		x.RewardAccount = value.Message().Interface().(*ICAAccount)
	case "stride.stakeibc.TradeRoute.trade_account":
		x.TradeAccount = value.Message().Interface().(*ICAAccount)
	case "stride.stakeibc.TradeRoute.host_to_reward_channel_id":
		x.HostToRewardChannelId = value.Interface().(string)
	case "stride.stakeibc.TradeRoute.reward_to_trade_channel_id":
		x.RewardToTradeChannelId = value.Interface().(string)
	case "stride.stakeibc.TradeRoute.trade_to_host_channel_id":
		x.TradeToHostChannelId = value.Interface().(string)
	case "stride.stakeibc.TradeRoute.trade_config":
		x.TradeConfig = value.Message().Interface().(*TradeConfig)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.TradeRoute"))
		}
		panic(fmt.Errorf("message stride.stakeibc.TradeRoute does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeRoute) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stride.stakeibc.TradeRoute.host_account":
		if x.HostAccount == nil {
			x.HostAccount = new(ICAAccount)
		}
		return protoreflect.ValueOfMessage(x.HostAccount.ProtoReflect())
	case "stride.stakeibc.TradeRoute.reward_account":
		if x.RewardAccount == nil {
			x.RewardAccount = new(ICAAccount)
		}
		return protoreflect.ValueOfMessage(x.RewardAccount.ProtoReflect())
	case "stride.stakeibc.TradeRoute.trade_account":
		if x.TradeAccount == nil {
			x.TradeAccount = new(ICAAccount)
		}
		return protoreflect.ValueOfMessage(x.TradeAccount.ProtoReflect())
	case "stride.stakeibc.TradeRoute.trade_config":
		if x.TradeConfig == nil {
			x.TradeConfig = new(TradeConfig)
		}
		return protoreflect.ValueOfMessage(x.TradeConfig.ProtoReflect())
	case "stride.stakeibc.TradeRoute.reward_denom_on_host_zone":
		panic(fmt.Errorf("field reward_denom_on_host_zone of message stride.stakeibc.TradeRoute is not mutable"))
	case "stride.stakeibc.TradeRoute.reward_denom_on_reward_zone":
		panic(fmt.Errorf("field reward_denom_on_reward_zone of message stride.stakeibc.TradeRoute is not mutable"))
	case "stride.stakeibc.TradeRoute.reward_denom_on_trade_zone":
		panic(fmt.Errorf("field reward_denom_on_trade_zone of message stride.stakeibc.TradeRoute is not mutable"))
	case "stride.stakeibc.TradeRoute.host_denom_on_trade_zone":
		panic(fmt.Errorf("field host_denom_on_trade_zone of message stride.stakeibc.TradeRoute is not mutable"))
	case "stride.stakeibc.TradeRoute.host_denom_on_host_zone":
		panic(fmt.Errorf("field host_denom_on_host_zone of message stride.stakeibc.TradeRoute is not mutable"))
	case "stride.stakeibc.TradeRoute.host_to_reward_channel_id":
		panic(fmt.Errorf("field host_to_reward_channel_id of message stride.stakeibc.TradeRoute is not mutable"))
	case "stride.stakeibc.TradeRoute.reward_to_trade_channel_id":
		panic(fmt.Errorf("field reward_to_trade_channel_id of message stride.stakeibc.TradeRoute is not mutable"))
	case "stride.stakeibc.TradeRoute.trade_to_host_channel_id":
		panic(fmt.Errorf("field trade_to_host_channel_id of message stride.stakeibc.TradeRoute is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.TradeRoute"))
		}
		panic(fmt.Errorf("message stride.stakeibc.TradeRoute does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_TradeRoute) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stride.stakeibc.TradeRoute.reward_denom_on_host_zone":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.TradeRoute.reward_denom_on_reward_zone":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.TradeRoute.reward_denom_on_trade_zone":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.TradeRoute.host_denom_on_trade_zone":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.TradeRoute.host_denom_on_host_zone":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.TradeRoute.host_account":
		m := new(ICAAccount)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "stride.stakeibc.TradeRoute.reward_account":
		m := new(ICAAccount)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "stride.stakeibc.TradeRoute.trade_account":
		m := new(ICAAccount)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "stride.stakeibc.TradeRoute.host_to_reward_channel_id":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.TradeRoute.reward_to_trade_channel_id":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.TradeRoute.trade_to_host_channel_id":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.TradeRoute.trade_config":
		m := new(TradeConfig)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.TradeRoute"))
		}
		panic(fmt.Errorf("message stride.stakeibc.TradeRoute does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_TradeRoute) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in stride.stakeibc.TradeRoute", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_TradeRoute) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_TradeRoute) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_TradeRoute) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_TradeRoute) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*TradeRoute)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.RewardDenomOnHostZone)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RewardDenomOnRewardZone)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RewardDenomOnTradeZone)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.HostDenomOnTradeZone)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.HostDenomOnHostZone)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.HostAccount != nil {
			l = options.Size(x.HostAccount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.RewardAccount != nil {
			l = options.Size(x.RewardAccount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TradeAccount != nil {
			l = options.Size(x.TradeAccount)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.HostToRewardChannelId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RewardToTradeChannelId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TradeToHostChannelId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.TradeConfig != nil {
			l = options.Size(x.TradeConfig)
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*TradeRoute)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.TradeConfig != nil {
			encoded, err := options.Marshal(x.TradeConfig)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.TradeToHostChannelId) > 0 {
			i -= len(x.TradeToHostChannelId)
			copy(dAtA[i:], x.TradeToHostChannelId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TradeToHostChannelId)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.RewardToTradeChannelId) > 0 {
			i -= len(x.RewardToTradeChannelId)
			copy(dAtA[i:], x.RewardToTradeChannelId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardToTradeChannelId)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.HostToRewardChannelId) > 0 {
			i -= len(x.HostToRewardChannelId)
			copy(dAtA[i:], x.HostToRewardChannelId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HostToRewardChannelId)))
			i--
			dAtA[i] = 0x4a
		}
		if x.TradeAccount != nil {
			encoded, err := options.Marshal(x.TradeAccount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x42
		}
		if x.RewardAccount != nil {
			encoded, err := options.Marshal(x.RewardAccount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x3a
		}
		if x.HostAccount != nil {
			encoded, err := options.Marshal(x.HostAccount)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x32
		}
		if len(x.HostDenomOnHostZone) > 0 {
			i -= len(x.HostDenomOnHostZone)
			copy(dAtA[i:], x.HostDenomOnHostZone)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HostDenomOnHostZone)))
			i--
			dAtA[i] = 0x2a
		}
		if len(x.HostDenomOnTradeZone) > 0 {
			i -= len(x.HostDenomOnTradeZone)
			copy(dAtA[i:], x.HostDenomOnTradeZone)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HostDenomOnTradeZone)))
			i--
			dAtA[i] = 0x22
		}
		if len(x.RewardDenomOnTradeZone) > 0 {
			i -= len(x.RewardDenomOnTradeZone)
			copy(dAtA[i:], x.RewardDenomOnTradeZone)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardDenomOnTradeZone)))
			i--
			dAtA[i] = 0x1a
		}
		if len(x.RewardDenomOnRewardZone) > 0 {
			i -= len(x.RewardDenomOnRewardZone)
			copy(dAtA[i:], x.RewardDenomOnRewardZone)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardDenomOnRewardZone)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.RewardDenomOnHostZone) > 0 {
			i -= len(x.RewardDenomOnHostZone)
			copy(dAtA[i:], x.RewardDenomOnHostZone)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RewardDenomOnHostZone)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*TradeRoute)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TradeRoute: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: TradeRoute: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardDenomOnHostZone", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardDenomOnHostZone = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardDenomOnRewardZone", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardDenomOnRewardZone = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardDenomOnTradeZone", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardDenomOnTradeZone = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 4:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HostDenomOnTradeZone", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HostDenomOnTradeZone = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 5:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HostDenomOnHostZone", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HostDenomOnHostZone = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HostAccount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.HostAccount == nil {
					x.HostAccount = &ICAAccount{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.HostAccount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardAccount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.RewardAccount == nil {
					x.RewardAccount = &ICAAccount{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.RewardAccount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeAccount", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TradeAccount == nil {
					x.TradeAccount = &ICAAccount{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TradeAccount); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HostToRewardChannelId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HostToRewardChannelId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RewardToTradeChannelId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RewardToTradeChannelId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeToHostChannelId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TradeToHostChannelId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeConfig", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.TradeConfig == nil {
					x.TradeConfig = &TradeConfig{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.TradeConfig); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: stride/stakeibc/trade_route.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Stores pool information needed to execute the swap along a trade route
type TradeConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Currently Osmosis is the only trade chain so this is an osmosis pool id
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// Spot price in the pool to convert the reward denom to the host denom
	// output_tokens = swap_price * input tokens
	// This value may be slightly stale as it is updated by an ICQ
	SwapPrice string `protobuf:"bytes,2,opt,name=swap_price,json=swapPrice,proto3" json:"swap_price,omitempty"`
	// unix time in seconds that the price was last updated
	PriceUpdateTimestamp uint64 `protobuf:"varint,3,opt,name=price_update_timestamp,json=priceUpdateTimestamp,proto3" json:"price_update_timestamp,omitempty"`
	// Threshold defining the percentage of tokens that could be lost in the trade
	// This captures both the loss from slippage and from a stale price on stride
	// 0.05 means the output from the trade can be no less than a 5% deviation
	// from the current value
	MaxAllowedSwapLossRate string `protobuf:"bytes,4,opt,name=max_allowed_swap_loss_rate,json=maxAllowedSwapLossRate,proto3" json:"max_allowed_swap_loss_rate,omitempty"`
	// min and max set boundaries of reward denom on trade chain we will swap
	// min also decides when reward token transfers are worth it (transfer fees)
	MinSwapAmount string `protobuf:"bytes,5,opt,name=min_swap_amount,json=minSwapAmount,proto3" json:"min_swap_amount,omitempty"`
	MaxSwapAmount string `protobuf:"bytes,6,opt,name=max_swap_amount,json=maxSwapAmount,proto3" json:"max_swap_amount,omitempty"`
}

func (x *TradeConfig) Reset() {
	*x = TradeConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stride_stakeibc_trade_route_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeConfig) ProtoMessage() {}

// Deprecated: Use TradeConfig.ProtoReflect.Descriptor instead.
func (*TradeConfig) Descriptor() ([]byte, []int) {
	return file_stride_stakeibc_trade_route_proto_rawDescGZIP(), []int{0}
}

func (x *TradeConfig) GetPoolId() uint64 {
	if x != nil {
		return x.PoolId
	}
	return 0
}

func (x *TradeConfig) GetSwapPrice() string {
	if x != nil {
		return x.SwapPrice
	}
	return ""
}

func (x *TradeConfig) GetPriceUpdateTimestamp() uint64 {
	if x != nil {
		return x.PriceUpdateTimestamp
	}
	return 0
}

func (x *TradeConfig) GetMaxAllowedSwapLossRate() string {
	if x != nil {
		return x.MaxAllowedSwapLossRate
	}
	return ""
}

func (x *TradeConfig) GetMinSwapAmount() string {
	if x != nil {
		return x.MinSwapAmount
	}
	return ""
}

func (x *TradeConfig) GetMaxSwapAmount() string {
	if x != nil {
		return x.MaxSwapAmount
	}
	return ""
}

// TradeRoute represents a round trip including info on transfer and how to do
// the swap. It makes the assumption that the reward token is always foreign to
// the host so therefore the first two hops are to unwind the ibc denom enroute
// to the trade chain and the last hop is the return so funds start/end in the
// withdrawl ICA on hostZone
// The structure is key'd on reward denom and host denom in their native forms
// (i.e. reward_denom_on_reward_zone and host_denom_on_host_zone)
type TradeRoute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ibc denom for the reward on the host zone
	RewardDenomOnHostZone string `protobuf:"bytes,1,opt,name=reward_denom_on_host_zone,json=rewardDenomOnHostZone,proto3" json:"reward_denom_on_host_zone,omitempty"`
	// should be the native denom for the reward chain
	RewardDenomOnRewardZone string `protobuf:"bytes,2,opt,name=reward_denom_on_reward_zone,json=rewardDenomOnRewardZone,proto3" json:"reward_denom_on_reward_zone,omitempty"`
	// ibc denom of the reward on the trade chain, input to the swap
	RewardDenomOnTradeZone string `protobuf:"bytes,3,opt,name=reward_denom_on_trade_zone,json=rewardDenomOnTradeZone,proto3" json:"reward_denom_on_trade_zone,omitempty"`
	// ibc of the host denom on the trade chain, output from the swap
	HostDenomOnTradeZone string `protobuf:"bytes,4,opt,name=host_denom_on_trade_zone,json=hostDenomOnTradeZone,proto3" json:"host_denom_on_trade_zone,omitempty"`
	// should be the same as the native host denom on the host chain
	HostDenomOnHostZone string `protobuf:"bytes,5,opt,name=host_denom_on_host_zone,json=hostDenomOnHostZone,proto3" json:"host_denom_on_host_zone,omitempty"`
	// ICAAccount on the host zone with the reward tokens
	// This is the same as the host zone withdrawal ICA account
	HostAccount *ICAAccount `protobuf:"bytes,6,opt,name=host_account,json=hostAccount,proto3" json:"host_account,omitempty"`
	// ICAAccount on the reward zone that is acts as the intermediate
	// receiver of the transfer from host zone to trade zone
	RewardAccount *ICAAccount `protobuf:"bytes,7,opt,name=reward_account,json=rewardAccount,proto3" json:"reward_account,omitempty"`
	// ICAAccount responsible for executing the swap of reward
	// tokens for host tokens
	TradeAccount *ICAAccount `protobuf:"bytes,8,opt,name=trade_account,json=tradeAccount,proto3" json:"trade_account,omitempty"`
	// Channel responsible for the transfer of reward tokens from the host
	// zone to the reward zone. This is the channel ID on the host zone side
	HostToRewardChannelId string `protobuf:"bytes,9,opt,name=host_to_reward_channel_id,json=hostToRewardChannelId,proto3" json:"host_to_reward_channel_id,omitempty"`
	// Channel responsible for the transfer of reward tokens from the reward
	// zone to the trade zone. This is the channel ID on the reward zone side
	RewardToTradeChannelId string `protobuf:"bytes,10,opt,name=reward_to_trade_channel_id,json=rewardToTradeChannelId,proto3" json:"reward_to_trade_channel_id,omitempty"`
	// Channel responsible for the transfer of host tokens from the trade
	// zone, back to the host zone. This is the channel ID on the trade zone side
	TradeToHostChannelId string `protobuf:"bytes,11,opt,name=trade_to_host_channel_id,json=tradeToHostChannelId,proto3" json:"trade_to_host_channel_id,omitempty"`
	// specifies the configuration needed to execute the swap
	// such as pool_id, slippage, min trade amount, etc.
	TradeConfig *TradeConfig `protobuf:"bytes,12,opt,name=trade_config,json=tradeConfig,proto3" json:"trade_config,omitempty"`
}

func (x *TradeRoute) Reset() {
	*x = TradeRoute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stride_stakeibc_trade_route_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeRoute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRoute) ProtoMessage() {}

// Deprecated: Use TradeRoute.ProtoReflect.Descriptor instead.
func (*TradeRoute) Descriptor() ([]byte, []int) {
	return file_stride_stakeibc_trade_route_proto_rawDescGZIP(), []int{1}
}

func (x *TradeRoute) GetRewardDenomOnHostZone() string {
	if x != nil {
		return x.RewardDenomOnHostZone
	}
	return ""
}

func (x *TradeRoute) GetRewardDenomOnRewardZone() string {
	if x != nil {
		return x.RewardDenomOnRewardZone
	}
	return ""
}

func (x *TradeRoute) GetRewardDenomOnTradeZone() string {
	if x != nil {
		return x.RewardDenomOnTradeZone
	}
	return ""
}

func (x *TradeRoute) GetHostDenomOnTradeZone() string {
	if x != nil {
		return x.HostDenomOnTradeZone
	}
	return ""
}

func (x *TradeRoute) GetHostDenomOnHostZone() string {
	if x != nil {
		return x.HostDenomOnHostZone
	}
	return ""
}

func (x *TradeRoute) GetHostAccount() *ICAAccount {
	if x != nil {
		return x.HostAccount
	}
	return nil
}

func (x *TradeRoute) GetRewardAccount() *ICAAccount {
	if x != nil {
		return x.RewardAccount
	}
	return nil
}

func (x *TradeRoute) GetTradeAccount() *ICAAccount {
	if x != nil {
		return x.TradeAccount
	}
	return nil
}

func (x *TradeRoute) GetHostToRewardChannelId() string {
	if x != nil {
		return x.HostToRewardChannelId
	}
	return ""
}

func (x *TradeRoute) GetRewardToTradeChannelId() string {
	if x != nil {
		return x.RewardToTradeChannelId
	}
	return ""
}

func (x *TradeRoute) GetTradeToHostChannelId() string {
	if x != nil {
		return x.TradeToHostChannelId
	}
	return ""
}

func (x *TradeRoute) GetTradeConfig() *TradeConfig {
	if x != nil {
		return x.TradeConfig
	}
	return nil
}

var File_stride_stakeibc_trade_route_proto protoreflect.FileDescriptor

var file_stride_stakeibc_trade_route_proto_rawDesc = []byte{
	0x0a, 0x21, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62,
	0x63, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x69, 0x62, 0x63, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x21, 0x73, 0x74, 0x72, 0x69,
	0x64, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0x2f, 0x69, 0x63, 0x61, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x03, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f, 0x6f, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x70, 0x6f, 0x6f, 0x6c, 0x49,
	0x64, 0x12, 0x50, 0x0a, 0x0a, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63,
	0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68,
	0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x09, 0x73, 0x77, 0x61, 0x70, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x14, 0x70, 0x72, 0x69, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x6d, 0x0a, 0x1a, 0x6d, 0x61, 0x78,
	0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x6f,
	0x73, 0x73, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8,
	0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b,
	0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44,
	0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63,
	0x52, 0x16, 0x6d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x77, 0x61, 0x70,
	0x4c, 0x6f, 0x73, 0x73, 0x52, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x6d, 0x69, 0x6e, 0x5f,
	0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74,
	0x52, 0x0d, 0x6d, 0x69, 0x6e, 0x53, 0x77, 0x61, 0x70, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x45, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x53, 0x77, 0x61, 0x70,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xfb, 0x05, 0x0a, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f,
	0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x5f, 0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x6f,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x4f, 0x6e, 0x48, 0x6f, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x12,
	0x3c, 0x0a, 0x1b, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x5f,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x4f, 0x6e, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x3a, 0x0a,
	0x1a, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x5f, 0x6f, 0x6e,
	0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x4f, 0x6e,
	0x54, 0x72, 0x61, 0x64, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x36, 0x0a, 0x18, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x5f, 0x6f, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x68, 0x6f, 0x73,
	0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x4f, 0x6e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x5a, 0x6f, 0x6e,
	0x65, 0x12, 0x34, 0x0a, 0x17, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x5f,
	0x6f, 0x6e, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x4f, 0x6e, 0x48,
	0x6f, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x68, 0x6f, 0x73, 0x74, 0x5f,
	0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0x2e,
	0x49, 0x43, 0x41, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00,
	0x52, 0x0b, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a,
	0x0e, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x73,
	0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0x2e, 0x49, 0x43, 0x41, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63,
	0x2e, 0x49, 0x43, 0x41, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x04, 0xc8, 0xde, 0x1f,
	0x00, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x38, 0x0a, 0x19, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x15, 0x68, 0x6f, 0x73, 0x74, 0x54, 0x6f, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x1a, 0x72, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x54, 0x6f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x74,
	0x6f, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x74, 0x72, 0x61, 0x64, 0x65, 0x54, 0x6f,
	0x48, 0x6f, 0x73, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x45, 0x0a,
	0x0c, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x69, 0x62, 0x63, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x42, 0x04, 0xc8, 0xde, 0x1f, 0x00, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x42, 0xa5, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x74, 0x72,
	0x69, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0x42, 0x0f, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x20, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62,
	0x63, 0xa2, 0x02, 0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x64, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0xca, 0x02, 0x0f, 0x53, 0x74, 0x72, 0x69,
	0x64, 0x65, 0x5c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0xe2, 0x02, 0x1b, 0x53, 0x74,
	0x72, 0x69, 0x64, 0x65, 0x5c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x53, 0x74, 0x72, 0x69,
	0x64, 0x65, 0x3a, 0x3a, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stride_stakeibc_trade_route_proto_rawDescOnce sync.Once
	file_stride_stakeibc_trade_route_proto_rawDescData = file_stride_stakeibc_trade_route_proto_rawDesc
)

func file_stride_stakeibc_trade_route_proto_rawDescGZIP() []byte {
	file_stride_stakeibc_trade_route_proto_rawDescOnce.Do(func() {
		file_stride_stakeibc_trade_route_proto_rawDescData = protoimpl.X.CompressGZIP(file_stride_stakeibc_trade_route_proto_rawDescData)
	})
	return file_stride_stakeibc_trade_route_proto_rawDescData
}

var file_stride_stakeibc_trade_route_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_stride_stakeibc_trade_route_proto_goTypes = []interface{}{
	(*TradeConfig)(nil), // 0: stride.stakeibc.TradeConfig
	(*TradeRoute)(nil),  // 1: stride.stakeibc.TradeRoute
	(*ICAAccount)(nil),  // 2: stride.stakeibc.ICAAccount
}
var file_stride_stakeibc_trade_route_proto_depIdxs = []int32{
	2, // 0: stride.stakeibc.TradeRoute.host_account:type_name -> stride.stakeibc.ICAAccount
	2, // 1: stride.stakeibc.TradeRoute.reward_account:type_name -> stride.stakeibc.ICAAccount
	2, // 2: stride.stakeibc.TradeRoute.trade_account:type_name -> stride.stakeibc.ICAAccount
	0, // 3: stride.stakeibc.TradeRoute.trade_config:type_name -> stride.stakeibc.TradeConfig
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_stride_stakeibc_trade_route_proto_init() }
func file_stride_stakeibc_trade_route_proto_init() {
	if File_stride_stakeibc_trade_route_proto != nil {
		return
	}
	file_stride_stakeibc_ica_account_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_stride_stakeibc_trade_route_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stride_stakeibc_trade_route_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeRoute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stride_stakeibc_trade_route_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stride_stakeibc_trade_route_proto_goTypes,
		DependencyIndexes: file_stride_stakeibc_trade_route_proto_depIdxs,
		MessageInfos:      file_stride_stakeibc_trade_route_proto_msgTypes,
	}.Build()
	File_stride_stakeibc_trade_route_proto = out.File
	file_stride_stakeibc_trade_route_proto_rawDesc = nil
	file_stride_stakeibc_trade_route_proto_goTypes = nil
	file_stride_stakeibc_trade_route_proto_depIdxs = nil
}
