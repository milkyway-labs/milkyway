// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package stakeibc

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	_ "github.com/cosmos/gogoproto/gogoproto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_CommunityPoolRebate                               protoreflect.MessageDescriptor
	fd_CommunityPoolRebate_rebate_rate                   protoreflect.FieldDescriptor
	fd_CommunityPoolRebate_liquid_staked_st_token_amount protoreflect.FieldDescriptor
)

func init() {
	file_stride_stakeibc_host_zone_proto_init()
	md_CommunityPoolRebate = File_stride_stakeibc_host_zone_proto.Messages().ByName("CommunityPoolRebate")
	fd_CommunityPoolRebate_rebate_rate = md_CommunityPoolRebate.Fields().ByName("rebate_rate")
	fd_CommunityPoolRebate_liquid_staked_st_token_amount = md_CommunityPoolRebate.Fields().ByName("liquid_staked_st_token_amount")
}

var _ protoreflect.Message = (*fastReflection_CommunityPoolRebate)(nil)

type fastReflection_CommunityPoolRebate CommunityPoolRebate

func (x *CommunityPoolRebate) ProtoReflect() protoreflect.Message {
	return (*fastReflection_CommunityPoolRebate)(x)
}

func (x *CommunityPoolRebate) slowProtoReflect() protoreflect.Message {
	mi := &file_stride_stakeibc_host_zone_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_CommunityPoolRebate_messageType fastReflection_CommunityPoolRebate_messageType
var _ protoreflect.MessageType = fastReflection_CommunityPoolRebate_messageType{}

type fastReflection_CommunityPoolRebate_messageType struct{}

func (x fastReflection_CommunityPoolRebate_messageType) Zero() protoreflect.Message {
	return (*fastReflection_CommunityPoolRebate)(nil)
}
func (x fastReflection_CommunityPoolRebate_messageType) New() protoreflect.Message {
	return new(fastReflection_CommunityPoolRebate)
}
func (x fastReflection_CommunityPoolRebate_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_CommunityPoolRebate
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_CommunityPoolRebate) Descriptor() protoreflect.MessageDescriptor {
	return md_CommunityPoolRebate
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_CommunityPoolRebate) Type() protoreflect.MessageType {
	return _fastReflection_CommunityPoolRebate_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_CommunityPoolRebate) New() protoreflect.Message {
	return new(fastReflection_CommunityPoolRebate)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_CommunityPoolRebate) Interface() protoreflect.ProtoMessage {
	return (*CommunityPoolRebate)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_CommunityPoolRebate) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.RebateRate != "" {
		value := protoreflect.ValueOfString(x.RebateRate)
		if !f(fd_CommunityPoolRebate_rebate_rate, value) {
			return
		}
	}
	if x.LiquidStakedStTokenAmount != "" {
		value := protoreflect.ValueOfString(x.LiquidStakedStTokenAmount)
		if !f(fd_CommunityPoolRebate_liquid_staked_st_token_amount, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_CommunityPoolRebate) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "stride.stakeibc.CommunityPoolRebate.rebate_rate":
		return x.RebateRate != ""
	case "stride.stakeibc.CommunityPoolRebate.liquid_staked_st_token_amount":
		return x.LiquidStakedStTokenAmount != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.CommunityPoolRebate"))
		}
		panic(fmt.Errorf("message stride.stakeibc.CommunityPoolRebate does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommunityPoolRebate) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "stride.stakeibc.CommunityPoolRebate.rebate_rate":
		x.RebateRate = ""
	case "stride.stakeibc.CommunityPoolRebate.liquid_staked_st_token_amount":
		x.LiquidStakedStTokenAmount = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.CommunityPoolRebate"))
		}
		panic(fmt.Errorf("message stride.stakeibc.CommunityPoolRebate does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_CommunityPoolRebate) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "stride.stakeibc.CommunityPoolRebate.rebate_rate":
		value := x.RebateRate
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.CommunityPoolRebate.liquid_staked_st_token_amount":
		value := x.LiquidStakedStTokenAmount
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.CommunityPoolRebate"))
		}
		panic(fmt.Errorf("message stride.stakeibc.CommunityPoolRebate does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommunityPoolRebate) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "stride.stakeibc.CommunityPoolRebate.rebate_rate":
		x.RebateRate = value.Interface().(string)
	case "stride.stakeibc.CommunityPoolRebate.liquid_staked_st_token_amount":
		x.LiquidStakedStTokenAmount = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.CommunityPoolRebate"))
		}
		panic(fmt.Errorf("message stride.stakeibc.CommunityPoolRebate does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommunityPoolRebate) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stride.stakeibc.CommunityPoolRebate.rebate_rate":
		panic(fmt.Errorf("field rebate_rate of message stride.stakeibc.CommunityPoolRebate is not mutable"))
	case "stride.stakeibc.CommunityPoolRebate.liquid_staked_st_token_amount":
		panic(fmt.Errorf("field liquid_staked_st_token_amount of message stride.stakeibc.CommunityPoolRebate is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.CommunityPoolRebate"))
		}
		panic(fmt.Errorf("message stride.stakeibc.CommunityPoolRebate does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_CommunityPoolRebate) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stride.stakeibc.CommunityPoolRebate.rebate_rate":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.CommunityPoolRebate.liquid_staked_st_token_amount":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.CommunityPoolRebate"))
		}
		panic(fmt.Errorf("message stride.stakeibc.CommunityPoolRebate does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_CommunityPoolRebate) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in stride.stakeibc.CommunityPoolRebate", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_CommunityPoolRebate) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_CommunityPoolRebate) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_CommunityPoolRebate) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_CommunityPoolRebate) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*CommunityPoolRebate)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.RebateRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LiquidStakedStTokenAmount)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*CommunityPoolRebate)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.LiquidStakedStTokenAmount) > 0 {
			i -= len(x.LiquidStakedStTokenAmount)
			copy(dAtA[i:], x.LiquidStakedStTokenAmount)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LiquidStakedStTokenAmount)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.RebateRate) > 0 {
			i -= len(x.RebateRate)
			copy(dAtA[i:], x.RebateRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RebateRate)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*CommunityPoolRebate)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CommunityPoolRebate: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: CommunityPoolRebate: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RebateRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RebateRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LiquidStakedStTokenAmount", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LiquidStakedStTokenAmount = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

var _ protoreflect.List = (*_HostZone_3_list)(nil)

type _HostZone_3_list struct {
	list *[]*Validator
}

func (x *_HostZone_3_list) Len() int {
	if x.list == nil {
		return 0
	}
	return len(*x.list)
}

func (x *_HostZone_3_list) Get(i int) protoreflect.Value {
	return protoreflect.ValueOfMessage((*x.list)[i].ProtoReflect())
}

func (x *_HostZone_3_list) Set(i int, value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Validator)
	(*x.list)[i] = concreteValue
}

func (x *_HostZone_3_list) Append(value protoreflect.Value) {
	valueUnwrapped := value.Message()
	concreteValue := valueUnwrapped.Interface().(*Validator)
	*x.list = append(*x.list, concreteValue)
}

func (x *_HostZone_3_list) AppendMutable() protoreflect.Value {
	v := new(Validator)
	*x.list = append(*x.list, v)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_HostZone_3_list) Truncate(n int) {
	for i := n; i < len(*x.list); i++ {
		(*x.list)[i] = nil
	}
	*x.list = (*x.list)[:n]
}

func (x *_HostZone_3_list) NewElement() protoreflect.Value {
	v := new(Validator)
	return protoreflect.ValueOfMessage(v.ProtoReflect())
}

func (x *_HostZone_3_list) IsValid() bool {
	return x.list != nil
}

var (
	md_HostZone                                       protoreflect.MessageDescriptor
	fd_HostZone_chain_id                              protoreflect.FieldDescriptor
	fd_HostZone_bech32prefix                          protoreflect.FieldDescriptor
	fd_HostZone_connection_id                         protoreflect.FieldDescriptor
	fd_HostZone_transfer_channel_id                   protoreflect.FieldDescriptor
	fd_HostZone_ibc_denom                             protoreflect.FieldDescriptor
	fd_HostZone_host_denom                            protoreflect.FieldDescriptor
	fd_HostZone_unbonding_period                      protoreflect.FieldDescriptor
	fd_HostZone_validators                            protoreflect.FieldDescriptor
	fd_HostZone_deposit_address                       protoreflect.FieldDescriptor
	fd_HostZone_withdrawal_ica_address                protoreflect.FieldDescriptor
	fd_HostZone_fee_ica_address                       protoreflect.FieldDescriptor
	fd_HostZone_delegation_ica_address                protoreflect.FieldDescriptor
	fd_HostZone_redemption_ica_address                protoreflect.FieldDescriptor
	fd_HostZone_community_pool_deposit_ica_address    protoreflect.FieldDescriptor
	fd_HostZone_community_pool_return_ica_address     protoreflect.FieldDescriptor
	fd_HostZone_community_pool_stake_holding_address  protoreflect.FieldDescriptor
	fd_HostZone_community_pool_redeem_holding_address protoreflect.FieldDescriptor
	fd_HostZone_community_pool_treasury_address       protoreflect.FieldDescriptor
	fd_HostZone_total_delegations                     protoreflect.FieldDescriptor
	fd_HostZone_last_redemption_rate                  protoreflect.FieldDescriptor
	fd_HostZone_redemption_rate                       protoreflect.FieldDescriptor
	fd_HostZone_min_redemption_rate                   protoreflect.FieldDescriptor
	fd_HostZone_max_redemption_rate                   protoreflect.FieldDescriptor
	fd_HostZone_min_inner_redemption_rate             protoreflect.FieldDescriptor
	fd_HostZone_max_inner_redemption_rate             protoreflect.FieldDescriptor
	fd_HostZone_max_messages_per_ica_tx               protoreflect.FieldDescriptor
	fd_HostZone_community_pool_rebate                 protoreflect.FieldDescriptor
	fd_HostZone_lsm_liquid_stake_enabled              protoreflect.FieldDescriptor
	fd_HostZone_halted                                protoreflect.FieldDescriptor
)

func init() {
	file_stride_stakeibc_host_zone_proto_init()
	md_HostZone = File_stride_stakeibc_host_zone_proto.Messages().ByName("HostZone")
	fd_HostZone_chain_id = md_HostZone.Fields().ByName("chain_id")
	fd_HostZone_bech32prefix = md_HostZone.Fields().ByName("bech32prefix")
	fd_HostZone_connection_id = md_HostZone.Fields().ByName("connection_id")
	fd_HostZone_transfer_channel_id = md_HostZone.Fields().ByName("transfer_channel_id")
	fd_HostZone_ibc_denom = md_HostZone.Fields().ByName("ibc_denom")
	fd_HostZone_host_denom = md_HostZone.Fields().ByName("host_denom")
	fd_HostZone_unbonding_period = md_HostZone.Fields().ByName("unbonding_period")
	fd_HostZone_validators = md_HostZone.Fields().ByName("validators")
	fd_HostZone_deposit_address = md_HostZone.Fields().ByName("deposit_address")
	fd_HostZone_withdrawal_ica_address = md_HostZone.Fields().ByName("withdrawal_ica_address")
	fd_HostZone_fee_ica_address = md_HostZone.Fields().ByName("fee_ica_address")
	fd_HostZone_delegation_ica_address = md_HostZone.Fields().ByName("delegation_ica_address")
	fd_HostZone_redemption_ica_address = md_HostZone.Fields().ByName("redemption_ica_address")
	fd_HostZone_community_pool_deposit_ica_address = md_HostZone.Fields().ByName("community_pool_deposit_ica_address")
	fd_HostZone_community_pool_return_ica_address = md_HostZone.Fields().ByName("community_pool_return_ica_address")
	fd_HostZone_community_pool_stake_holding_address = md_HostZone.Fields().ByName("community_pool_stake_holding_address")
	fd_HostZone_community_pool_redeem_holding_address = md_HostZone.Fields().ByName("community_pool_redeem_holding_address")
	fd_HostZone_community_pool_treasury_address = md_HostZone.Fields().ByName("community_pool_treasury_address")
	fd_HostZone_total_delegations = md_HostZone.Fields().ByName("total_delegations")
	fd_HostZone_last_redemption_rate = md_HostZone.Fields().ByName("last_redemption_rate")
	fd_HostZone_redemption_rate = md_HostZone.Fields().ByName("redemption_rate")
	fd_HostZone_min_redemption_rate = md_HostZone.Fields().ByName("min_redemption_rate")
	fd_HostZone_max_redemption_rate = md_HostZone.Fields().ByName("max_redemption_rate")
	fd_HostZone_min_inner_redemption_rate = md_HostZone.Fields().ByName("min_inner_redemption_rate")
	fd_HostZone_max_inner_redemption_rate = md_HostZone.Fields().ByName("max_inner_redemption_rate")
	fd_HostZone_max_messages_per_ica_tx = md_HostZone.Fields().ByName("max_messages_per_ica_tx")
	fd_HostZone_community_pool_rebate = md_HostZone.Fields().ByName("community_pool_rebate")
	fd_HostZone_lsm_liquid_stake_enabled = md_HostZone.Fields().ByName("lsm_liquid_stake_enabled")
	fd_HostZone_halted = md_HostZone.Fields().ByName("halted")
}

var _ protoreflect.Message = (*fastReflection_HostZone)(nil)

type fastReflection_HostZone HostZone

func (x *HostZone) ProtoReflect() protoreflect.Message {
	return (*fastReflection_HostZone)(x)
}

func (x *HostZone) slowProtoReflect() protoreflect.Message {
	mi := &file_stride_stakeibc_host_zone_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_HostZone_messageType fastReflection_HostZone_messageType
var _ protoreflect.MessageType = fastReflection_HostZone_messageType{}

type fastReflection_HostZone_messageType struct{}

func (x fastReflection_HostZone_messageType) Zero() protoreflect.Message {
	return (*fastReflection_HostZone)(nil)
}
func (x fastReflection_HostZone_messageType) New() protoreflect.Message {
	return new(fastReflection_HostZone)
}
func (x fastReflection_HostZone_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_HostZone
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_HostZone) Descriptor() protoreflect.MessageDescriptor {
	return md_HostZone
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_HostZone) Type() protoreflect.MessageType {
	return _fastReflection_HostZone_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_HostZone) New() protoreflect.Message {
	return new(fastReflection_HostZone)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_HostZone) Interface() protoreflect.ProtoMessage {
	return (*HostZone)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_HostZone) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.ChainId != "" {
		value := protoreflect.ValueOfString(x.ChainId)
		if !f(fd_HostZone_chain_id, value) {
			return
		}
	}
	if x.Bech32Prefix != "" {
		value := protoreflect.ValueOfString(x.Bech32Prefix)
		if !f(fd_HostZone_bech32prefix, value) {
			return
		}
	}
	if x.ConnectionId != "" {
		value := protoreflect.ValueOfString(x.ConnectionId)
		if !f(fd_HostZone_connection_id, value) {
			return
		}
	}
	if x.TransferChannelId != "" {
		value := protoreflect.ValueOfString(x.TransferChannelId)
		if !f(fd_HostZone_transfer_channel_id, value) {
			return
		}
	}
	if x.IbcDenom != "" {
		value := protoreflect.ValueOfString(x.IbcDenom)
		if !f(fd_HostZone_ibc_denom, value) {
			return
		}
	}
	if x.HostDenom != "" {
		value := protoreflect.ValueOfString(x.HostDenom)
		if !f(fd_HostZone_host_denom, value) {
			return
		}
	}
	if x.UnbondingPeriod != uint64(0) {
		value := protoreflect.ValueOfUint64(x.UnbondingPeriod)
		if !f(fd_HostZone_unbonding_period, value) {
			return
		}
	}
	if len(x.Validators) != 0 {
		value := protoreflect.ValueOfList(&_HostZone_3_list{list: &x.Validators})
		if !f(fd_HostZone_validators, value) {
			return
		}
	}
	if x.DepositAddress != "" {
		value := protoreflect.ValueOfString(x.DepositAddress)
		if !f(fd_HostZone_deposit_address, value) {
			return
		}
	}
	if x.WithdrawalIcaAddress != "" {
		value := protoreflect.ValueOfString(x.WithdrawalIcaAddress)
		if !f(fd_HostZone_withdrawal_ica_address, value) {
			return
		}
	}
	if x.FeeIcaAddress != "" {
		value := protoreflect.ValueOfString(x.FeeIcaAddress)
		if !f(fd_HostZone_fee_ica_address, value) {
			return
		}
	}
	if x.DelegationIcaAddress != "" {
		value := protoreflect.ValueOfString(x.DelegationIcaAddress)
		if !f(fd_HostZone_delegation_ica_address, value) {
			return
		}
	}
	if x.RedemptionIcaAddress != "" {
		value := protoreflect.ValueOfString(x.RedemptionIcaAddress)
		if !f(fd_HostZone_redemption_ica_address, value) {
			return
		}
	}
	if x.CommunityPoolDepositIcaAddress != "" {
		value := protoreflect.ValueOfString(x.CommunityPoolDepositIcaAddress)
		if !f(fd_HostZone_community_pool_deposit_ica_address, value) {
			return
		}
	}
	if x.CommunityPoolReturnIcaAddress != "" {
		value := protoreflect.ValueOfString(x.CommunityPoolReturnIcaAddress)
		if !f(fd_HostZone_community_pool_return_ica_address, value) {
			return
		}
	}
	if x.CommunityPoolStakeHoldingAddress != "" {
		value := protoreflect.ValueOfString(x.CommunityPoolStakeHoldingAddress)
		if !f(fd_HostZone_community_pool_stake_holding_address, value) {
			return
		}
	}
	if x.CommunityPoolRedeemHoldingAddress != "" {
		value := protoreflect.ValueOfString(x.CommunityPoolRedeemHoldingAddress)
		if !f(fd_HostZone_community_pool_redeem_holding_address, value) {
			return
		}
	}
	if x.CommunityPoolTreasuryAddress != "" {
		value := protoreflect.ValueOfString(x.CommunityPoolTreasuryAddress)
		if !f(fd_HostZone_community_pool_treasury_address, value) {
			return
		}
	}
	if x.TotalDelegations != "" {
		value := protoreflect.ValueOfString(x.TotalDelegations)
		if !f(fd_HostZone_total_delegations, value) {
			return
		}
	}
	if x.LastRedemptionRate != "" {
		value := protoreflect.ValueOfString(x.LastRedemptionRate)
		if !f(fd_HostZone_last_redemption_rate, value) {
			return
		}
	}
	if x.RedemptionRate != "" {
		value := protoreflect.ValueOfString(x.RedemptionRate)
		if !f(fd_HostZone_redemption_rate, value) {
			return
		}
	}
	if x.MinRedemptionRate != "" {
		value := protoreflect.ValueOfString(x.MinRedemptionRate)
		if !f(fd_HostZone_min_redemption_rate, value) {
			return
		}
	}
	if x.MaxRedemptionRate != "" {
		value := protoreflect.ValueOfString(x.MaxRedemptionRate)
		if !f(fd_HostZone_max_redemption_rate, value) {
			return
		}
	}
	if x.MinInnerRedemptionRate != "" {
		value := protoreflect.ValueOfString(x.MinInnerRedemptionRate)
		if !f(fd_HostZone_min_inner_redemption_rate, value) {
			return
		}
	}
	if x.MaxInnerRedemptionRate != "" {
		value := protoreflect.ValueOfString(x.MaxInnerRedemptionRate)
		if !f(fd_HostZone_max_inner_redemption_rate, value) {
			return
		}
	}
	if x.MaxMessagesPerIcaTx != uint64(0) {
		value := protoreflect.ValueOfUint64(x.MaxMessagesPerIcaTx)
		if !f(fd_HostZone_max_messages_per_ica_tx, value) {
			return
		}
	}
	if x.CommunityPoolRebate != nil {
		value := protoreflect.ValueOfMessage(x.CommunityPoolRebate.ProtoReflect())
		if !f(fd_HostZone_community_pool_rebate, value) {
			return
		}
	}
	if x.LsmLiquidStakeEnabled != false {
		value := protoreflect.ValueOfBool(x.LsmLiquidStakeEnabled)
		if !f(fd_HostZone_lsm_liquid_stake_enabled, value) {
			return
		}
	}
	if x.Halted != false {
		value := protoreflect.ValueOfBool(x.Halted)
		if !f(fd_HostZone_halted, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_HostZone) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "stride.stakeibc.HostZone.chain_id":
		return x.ChainId != ""
	case "stride.stakeibc.HostZone.bech32prefix":
		return x.Bech32Prefix != ""
	case "stride.stakeibc.HostZone.connection_id":
		return x.ConnectionId != ""
	case "stride.stakeibc.HostZone.transfer_channel_id":
		return x.TransferChannelId != ""
	case "stride.stakeibc.HostZone.ibc_denom":
		return x.IbcDenom != ""
	case "stride.stakeibc.HostZone.host_denom":
		return x.HostDenom != ""
	case "stride.stakeibc.HostZone.unbonding_period":
		return x.UnbondingPeriod != uint64(0)
	case "stride.stakeibc.HostZone.validators":
		return len(x.Validators) != 0
	case "stride.stakeibc.HostZone.deposit_address":
		return x.DepositAddress != ""
	case "stride.stakeibc.HostZone.withdrawal_ica_address":
		return x.WithdrawalIcaAddress != ""
	case "stride.stakeibc.HostZone.fee_ica_address":
		return x.FeeIcaAddress != ""
	case "stride.stakeibc.HostZone.delegation_ica_address":
		return x.DelegationIcaAddress != ""
	case "stride.stakeibc.HostZone.redemption_ica_address":
		return x.RedemptionIcaAddress != ""
	case "stride.stakeibc.HostZone.community_pool_deposit_ica_address":
		return x.CommunityPoolDepositIcaAddress != ""
	case "stride.stakeibc.HostZone.community_pool_return_ica_address":
		return x.CommunityPoolReturnIcaAddress != ""
	case "stride.stakeibc.HostZone.community_pool_stake_holding_address":
		return x.CommunityPoolStakeHoldingAddress != ""
	case "stride.stakeibc.HostZone.community_pool_redeem_holding_address":
		return x.CommunityPoolRedeemHoldingAddress != ""
	case "stride.stakeibc.HostZone.community_pool_treasury_address":
		return x.CommunityPoolTreasuryAddress != ""
	case "stride.stakeibc.HostZone.total_delegations":
		return x.TotalDelegations != ""
	case "stride.stakeibc.HostZone.last_redemption_rate":
		return x.LastRedemptionRate != ""
	case "stride.stakeibc.HostZone.redemption_rate":
		return x.RedemptionRate != ""
	case "stride.stakeibc.HostZone.min_redemption_rate":
		return x.MinRedemptionRate != ""
	case "stride.stakeibc.HostZone.max_redemption_rate":
		return x.MaxRedemptionRate != ""
	case "stride.stakeibc.HostZone.min_inner_redemption_rate":
		return x.MinInnerRedemptionRate != ""
	case "stride.stakeibc.HostZone.max_inner_redemption_rate":
		return x.MaxInnerRedemptionRate != ""
	case "stride.stakeibc.HostZone.max_messages_per_ica_tx":
		return x.MaxMessagesPerIcaTx != uint64(0)
	case "stride.stakeibc.HostZone.community_pool_rebate":
		return x.CommunityPoolRebate != nil
	case "stride.stakeibc.HostZone.lsm_liquid_stake_enabled":
		return x.LsmLiquidStakeEnabled != false
	case "stride.stakeibc.HostZone.halted":
		return x.Halted != false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.HostZone"))
		}
		panic(fmt.Errorf("message stride.stakeibc.HostZone does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HostZone) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "stride.stakeibc.HostZone.chain_id":
		x.ChainId = ""
	case "stride.stakeibc.HostZone.bech32prefix":
		x.Bech32Prefix = ""
	case "stride.stakeibc.HostZone.connection_id":
		x.ConnectionId = ""
	case "stride.stakeibc.HostZone.transfer_channel_id":
		x.TransferChannelId = ""
	case "stride.stakeibc.HostZone.ibc_denom":
		x.IbcDenom = ""
	case "stride.stakeibc.HostZone.host_denom":
		x.HostDenom = ""
	case "stride.stakeibc.HostZone.unbonding_period":
		x.UnbondingPeriod = uint64(0)
	case "stride.stakeibc.HostZone.validators":
		x.Validators = nil
	case "stride.stakeibc.HostZone.deposit_address":
		x.DepositAddress = ""
	case "stride.stakeibc.HostZone.withdrawal_ica_address":
		x.WithdrawalIcaAddress = ""
	case "stride.stakeibc.HostZone.fee_ica_address":
		x.FeeIcaAddress = ""
	case "stride.stakeibc.HostZone.delegation_ica_address":
		x.DelegationIcaAddress = ""
	case "stride.stakeibc.HostZone.redemption_ica_address":
		x.RedemptionIcaAddress = ""
	case "stride.stakeibc.HostZone.community_pool_deposit_ica_address":
		x.CommunityPoolDepositIcaAddress = ""
	case "stride.stakeibc.HostZone.community_pool_return_ica_address":
		x.CommunityPoolReturnIcaAddress = ""
	case "stride.stakeibc.HostZone.community_pool_stake_holding_address":
		x.CommunityPoolStakeHoldingAddress = ""
	case "stride.stakeibc.HostZone.community_pool_redeem_holding_address":
		x.CommunityPoolRedeemHoldingAddress = ""
	case "stride.stakeibc.HostZone.community_pool_treasury_address":
		x.CommunityPoolTreasuryAddress = ""
	case "stride.stakeibc.HostZone.total_delegations":
		x.TotalDelegations = ""
	case "stride.stakeibc.HostZone.last_redemption_rate":
		x.LastRedemptionRate = ""
	case "stride.stakeibc.HostZone.redemption_rate":
		x.RedemptionRate = ""
	case "stride.stakeibc.HostZone.min_redemption_rate":
		x.MinRedemptionRate = ""
	case "stride.stakeibc.HostZone.max_redemption_rate":
		x.MaxRedemptionRate = ""
	case "stride.stakeibc.HostZone.min_inner_redemption_rate":
		x.MinInnerRedemptionRate = ""
	case "stride.stakeibc.HostZone.max_inner_redemption_rate":
		x.MaxInnerRedemptionRate = ""
	case "stride.stakeibc.HostZone.max_messages_per_ica_tx":
		x.MaxMessagesPerIcaTx = uint64(0)
	case "stride.stakeibc.HostZone.community_pool_rebate":
		x.CommunityPoolRebate = nil
	case "stride.stakeibc.HostZone.lsm_liquid_stake_enabled":
		x.LsmLiquidStakeEnabled = false
	case "stride.stakeibc.HostZone.halted":
		x.Halted = false
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.HostZone"))
		}
		panic(fmt.Errorf("message stride.stakeibc.HostZone does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_HostZone) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "stride.stakeibc.HostZone.chain_id":
		value := x.ChainId
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.bech32prefix":
		value := x.Bech32Prefix
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.connection_id":
		value := x.ConnectionId
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.transfer_channel_id":
		value := x.TransferChannelId
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.ibc_denom":
		value := x.IbcDenom
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.host_denom":
		value := x.HostDenom
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.unbonding_period":
		value := x.UnbondingPeriod
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.HostZone.validators":
		if len(x.Validators) == 0 {
			return protoreflect.ValueOfList(&_HostZone_3_list{})
		}
		listValue := &_HostZone_3_list{list: &x.Validators}
		return protoreflect.ValueOfList(listValue)
	case "stride.stakeibc.HostZone.deposit_address":
		value := x.DepositAddress
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.withdrawal_ica_address":
		value := x.WithdrawalIcaAddress
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.fee_ica_address":
		value := x.FeeIcaAddress
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.delegation_ica_address":
		value := x.DelegationIcaAddress
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.redemption_ica_address":
		value := x.RedemptionIcaAddress
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.community_pool_deposit_ica_address":
		value := x.CommunityPoolDepositIcaAddress
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.community_pool_return_ica_address":
		value := x.CommunityPoolReturnIcaAddress
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.community_pool_stake_holding_address":
		value := x.CommunityPoolStakeHoldingAddress
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.community_pool_redeem_holding_address":
		value := x.CommunityPoolRedeemHoldingAddress
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.community_pool_treasury_address":
		value := x.CommunityPoolTreasuryAddress
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.total_delegations":
		value := x.TotalDelegations
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.last_redemption_rate":
		value := x.LastRedemptionRate
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.redemption_rate":
		value := x.RedemptionRate
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.min_redemption_rate":
		value := x.MinRedemptionRate
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.max_redemption_rate":
		value := x.MaxRedemptionRate
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.min_inner_redemption_rate":
		value := x.MinInnerRedemptionRate
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.max_inner_redemption_rate":
		value := x.MaxInnerRedemptionRate
		return protoreflect.ValueOfString(value)
	case "stride.stakeibc.HostZone.max_messages_per_ica_tx":
		value := x.MaxMessagesPerIcaTx
		return protoreflect.ValueOfUint64(value)
	case "stride.stakeibc.HostZone.community_pool_rebate":
		value := x.CommunityPoolRebate
		return protoreflect.ValueOfMessage(value.ProtoReflect())
	case "stride.stakeibc.HostZone.lsm_liquid_stake_enabled":
		value := x.LsmLiquidStakeEnabled
		return protoreflect.ValueOfBool(value)
	case "stride.stakeibc.HostZone.halted":
		value := x.Halted
		return protoreflect.ValueOfBool(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.HostZone"))
		}
		panic(fmt.Errorf("message stride.stakeibc.HostZone does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HostZone) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "stride.stakeibc.HostZone.chain_id":
		x.ChainId = value.Interface().(string)
	case "stride.stakeibc.HostZone.bech32prefix":
		x.Bech32Prefix = value.Interface().(string)
	case "stride.stakeibc.HostZone.connection_id":
		x.ConnectionId = value.Interface().(string)
	case "stride.stakeibc.HostZone.transfer_channel_id":
		x.TransferChannelId = value.Interface().(string)
	case "stride.stakeibc.HostZone.ibc_denom":
		x.IbcDenom = value.Interface().(string)
	case "stride.stakeibc.HostZone.host_denom":
		x.HostDenom = value.Interface().(string)
	case "stride.stakeibc.HostZone.unbonding_period":
		x.UnbondingPeriod = value.Uint()
	case "stride.stakeibc.HostZone.validators":
		lv := value.List()
		clv := lv.(*_HostZone_3_list)
		x.Validators = *clv.list
	case "stride.stakeibc.HostZone.deposit_address":
		x.DepositAddress = value.Interface().(string)
	case "stride.stakeibc.HostZone.withdrawal_ica_address":
		x.WithdrawalIcaAddress = value.Interface().(string)
	case "stride.stakeibc.HostZone.fee_ica_address":
		x.FeeIcaAddress = value.Interface().(string)
	case "stride.stakeibc.HostZone.delegation_ica_address":
		x.DelegationIcaAddress = value.Interface().(string)
	case "stride.stakeibc.HostZone.redemption_ica_address":
		x.RedemptionIcaAddress = value.Interface().(string)
	case "stride.stakeibc.HostZone.community_pool_deposit_ica_address":
		x.CommunityPoolDepositIcaAddress = value.Interface().(string)
	case "stride.stakeibc.HostZone.community_pool_return_ica_address":
		x.CommunityPoolReturnIcaAddress = value.Interface().(string)
	case "stride.stakeibc.HostZone.community_pool_stake_holding_address":
		x.CommunityPoolStakeHoldingAddress = value.Interface().(string)
	case "stride.stakeibc.HostZone.community_pool_redeem_holding_address":
		x.CommunityPoolRedeemHoldingAddress = value.Interface().(string)
	case "stride.stakeibc.HostZone.community_pool_treasury_address":
		x.CommunityPoolTreasuryAddress = value.Interface().(string)
	case "stride.stakeibc.HostZone.total_delegations":
		x.TotalDelegations = value.Interface().(string)
	case "stride.stakeibc.HostZone.last_redemption_rate":
		x.LastRedemptionRate = value.Interface().(string)
	case "stride.stakeibc.HostZone.redemption_rate":
		x.RedemptionRate = value.Interface().(string)
	case "stride.stakeibc.HostZone.min_redemption_rate":
		x.MinRedemptionRate = value.Interface().(string)
	case "stride.stakeibc.HostZone.max_redemption_rate":
		x.MaxRedemptionRate = value.Interface().(string)
	case "stride.stakeibc.HostZone.min_inner_redemption_rate":
		x.MinInnerRedemptionRate = value.Interface().(string)
	case "stride.stakeibc.HostZone.max_inner_redemption_rate":
		x.MaxInnerRedemptionRate = value.Interface().(string)
	case "stride.stakeibc.HostZone.max_messages_per_ica_tx":
		x.MaxMessagesPerIcaTx = value.Uint()
	case "stride.stakeibc.HostZone.community_pool_rebate":
		x.CommunityPoolRebate = value.Message().Interface().(*CommunityPoolRebate)
	case "stride.stakeibc.HostZone.lsm_liquid_stake_enabled":
		x.LsmLiquidStakeEnabled = value.Bool()
	case "stride.stakeibc.HostZone.halted":
		x.Halted = value.Bool()
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.HostZone"))
		}
		panic(fmt.Errorf("message stride.stakeibc.HostZone does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HostZone) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stride.stakeibc.HostZone.validators":
		if x.Validators == nil {
			x.Validators = []*Validator{}
		}
		value := &_HostZone_3_list{list: &x.Validators}
		return protoreflect.ValueOfList(value)
	case "stride.stakeibc.HostZone.community_pool_rebate":
		if x.CommunityPoolRebate == nil {
			x.CommunityPoolRebate = new(CommunityPoolRebate)
		}
		return protoreflect.ValueOfMessage(x.CommunityPoolRebate.ProtoReflect())
	case "stride.stakeibc.HostZone.chain_id":
		panic(fmt.Errorf("field chain_id of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.bech32prefix":
		panic(fmt.Errorf("field bech32prefix of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.connection_id":
		panic(fmt.Errorf("field connection_id of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.transfer_channel_id":
		panic(fmt.Errorf("field transfer_channel_id of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.ibc_denom":
		panic(fmt.Errorf("field ibc_denom of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.host_denom":
		panic(fmt.Errorf("field host_denom of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.unbonding_period":
		panic(fmt.Errorf("field unbonding_period of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.deposit_address":
		panic(fmt.Errorf("field deposit_address of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.withdrawal_ica_address":
		panic(fmt.Errorf("field withdrawal_ica_address of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.fee_ica_address":
		panic(fmt.Errorf("field fee_ica_address of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.delegation_ica_address":
		panic(fmt.Errorf("field delegation_ica_address of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.redemption_ica_address":
		panic(fmt.Errorf("field redemption_ica_address of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.community_pool_deposit_ica_address":
		panic(fmt.Errorf("field community_pool_deposit_ica_address of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.community_pool_return_ica_address":
		panic(fmt.Errorf("field community_pool_return_ica_address of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.community_pool_stake_holding_address":
		panic(fmt.Errorf("field community_pool_stake_holding_address of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.community_pool_redeem_holding_address":
		panic(fmt.Errorf("field community_pool_redeem_holding_address of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.community_pool_treasury_address":
		panic(fmt.Errorf("field community_pool_treasury_address of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.total_delegations":
		panic(fmt.Errorf("field total_delegations of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.last_redemption_rate":
		panic(fmt.Errorf("field last_redemption_rate of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.redemption_rate":
		panic(fmt.Errorf("field redemption_rate of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.min_redemption_rate":
		panic(fmt.Errorf("field min_redemption_rate of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.max_redemption_rate":
		panic(fmt.Errorf("field max_redemption_rate of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.min_inner_redemption_rate":
		panic(fmt.Errorf("field min_inner_redemption_rate of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.max_inner_redemption_rate":
		panic(fmt.Errorf("field max_inner_redemption_rate of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.max_messages_per_ica_tx":
		panic(fmt.Errorf("field max_messages_per_ica_tx of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.lsm_liquid_stake_enabled":
		panic(fmt.Errorf("field lsm_liquid_stake_enabled of message stride.stakeibc.HostZone is not mutable"))
	case "stride.stakeibc.HostZone.halted":
		panic(fmt.Errorf("field halted of message stride.stakeibc.HostZone is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.HostZone"))
		}
		panic(fmt.Errorf("message stride.stakeibc.HostZone does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_HostZone) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "stride.stakeibc.HostZone.chain_id":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.bech32prefix":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.connection_id":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.transfer_channel_id":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.ibc_denom":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.host_denom":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.unbonding_period":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.HostZone.validators":
		list := []*Validator{}
		return protoreflect.ValueOfList(&_HostZone_3_list{list: &list})
	case "stride.stakeibc.HostZone.deposit_address":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.withdrawal_ica_address":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.fee_ica_address":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.delegation_ica_address":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.redemption_ica_address":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.community_pool_deposit_ica_address":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.community_pool_return_ica_address":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.community_pool_stake_holding_address":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.community_pool_redeem_holding_address":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.community_pool_treasury_address":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.total_delegations":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.last_redemption_rate":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.redemption_rate":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.min_redemption_rate":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.max_redemption_rate":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.min_inner_redemption_rate":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.max_inner_redemption_rate":
		return protoreflect.ValueOfString("")
	case "stride.stakeibc.HostZone.max_messages_per_ica_tx":
		return protoreflect.ValueOfUint64(uint64(0))
	case "stride.stakeibc.HostZone.community_pool_rebate":
		m := new(CommunityPoolRebate)
		return protoreflect.ValueOfMessage(m.ProtoReflect())
	case "stride.stakeibc.HostZone.lsm_liquid_stake_enabled":
		return protoreflect.ValueOfBool(false)
	case "stride.stakeibc.HostZone.halted":
		return protoreflect.ValueOfBool(false)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: stride.stakeibc.HostZone"))
		}
		panic(fmt.Errorf("message stride.stakeibc.HostZone does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_HostZone) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in stride.stakeibc.HostZone", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_HostZone) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_HostZone) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_HostZone) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_HostZone) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*HostZone)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.ChainId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.Bech32Prefix)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.ConnectionId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TransferChannelId)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.IbcDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.HostDenom)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.UnbondingPeriod != 0 {
			n += 2 + runtime.Sov(uint64(x.UnbondingPeriod))
		}
		if len(x.Validators) > 0 {
			for _, e := range x.Validators {
				l = options.Size(e)
				n += 1 + l + runtime.Sov(uint64(l))
			}
		}
		l = len(x.DepositAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.WithdrawalIcaAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.FeeIcaAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.DelegationIcaAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RedemptionIcaAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CommunityPoolDepositIcaAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CommunityPoolReturnIcaAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CommunityPoolStakeHoldingAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CommunityPoolRedeemHoldingAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.CommunityPoolTreasuryAddress)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TotalDelegations)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.LastRedemptionRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.RedemptionRate)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MinRedemptionRate)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MaxRedemptionRate)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MinInnerRedemptionRate)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		l = len(x.MaxInnerRedemptionRate)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.MaxMessagesPerIcaTx != 0 {
			n += 2 + runtime.Sov(uint64(x.MaxMessagesPerIcaTx))
		}
		if x.CommunityPoolRebate != nil {
			l = options.Size(x.CommunityPoolRebate)
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.LsmLiquidStakeEnabled {
			n += 3
		}
		if x.Halted {
			n += 3
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*HostZone)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if x.MaxMessagesPerIcaTx != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.MaxMessagesPerIcaTx))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0xa0
		}
		if len(x.CommunityPoolTreasuryAddress) > 0 {
			i -= len(x.CommunityPoolTreasuryAddress)
			copy(dAtA[i:], x.CommunityPoolTreasuryAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CommunityPoolTreasuryAddress)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x9a
		}
		if x.CommunityPoolRebate != nil {
			encoded, err := options.Marshal(x.CommunityPoolRebate)
			if err != nil {
				return protoiface.MarshalOutput{
					NoUnkeyedLiterals: input.NoUnkeyedLiterals,
					Buf:               input.Buf,
				}, err
			}
			i -= len(encoded)
			copy(dAtA[i:], encoded)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x92
		}
		if len(x.CommunityPoolRedeemHoldingAddress) > 0 {
			i -= len(x.CommunityPoolRedeemHoldingAddress)
			copy(dAtA[i:], x.CommunityPoolRedeemHoldingAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CommunityPoolRedeemHoldingAddress)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x8a
		}
		if len(x.CommunityPoolStakeHoldingAddress) > 0 {
			i -= len(x.CommunityPoolStakeHoldingAddress)
			copy(dAtA[i:], x.CommunityPoolStakeHoldingAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CommunityPoolStakeHoldingAddress)))
			i--
			dAtA[i] = 0x2
			i--
			dAtA[i] = 0x82
		}
		if len(x.CommunityPoolReturnIcaAddress) > 0 {
			i -= len(x.CommunityPoolReturnIcaAddress)
			copy(dAtA[i:], x.CommunityPoolReturnIcaAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CommunityPoolReturnIcaAddress)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xfa
		}
		if len(x.CommunityPoolDepositIcaAddress) > 0 {
			i -= len(x.CommunityPoolDepositIcaAddress)
			copy(dAtA[i:], x.CommunityPoolDepositIcaAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.CommunityPoolDepositIcaAddress)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xf2
		}
		if len(x.MaxInnerRedemptionRate) > 0 {
			i -= len(x.MaxInnerRedemptionRate)
			copy(dAtA[i:], x.MaxInnerRedemptionRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxInnerRedemptionRate)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xea
		}
		if len(x.MinInnerRedemptionRate) > 0 {
			i -= len(x.MinInnerRedemptionRate)
			copy(dAtA[i:], x.MinInnerRedemptionRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinInnerRedemptionRate)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xe2
		}
		if x.LsmLiquidStakeEnabled {
			i--
			if x.LsmLiquidStakeEnabled {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd8
		}
		if x.UnbondingPeriod != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.UnbondingPeriod))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xd0
		}
		if len(x.RedemptionIcaAddress) > 0 {
			i -= len(x.RedemptionIcaAddress)
			copy(dAtA[i:], x.RedemptionIcaAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RedemptionIcaAddress)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xca
		}
		if len(x.DelegationIcaAddress) > 0 {
			i -= len(x.DelegationIcaAddress)
			copy(dAtA[i:], x.DelegationIcaAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DelegationIcaAddress)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xc2
		}
		if len(x.FeeIcaAddress) > 0 {
			i -= len(x.FeeIcaAddress)
			copy(dAtA[i:], x.FeeIcaAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.FeeIcaAddress)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xba
		}
		if len(x.WithdrawalIcaAddress) > 0 {
			i -= len(x.WithdrawalIcaAddress)
			copy(dAtA[i:], x.WithdrawalIcaAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.WithdrawalIcaAddress)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
		if len(x.MaxRedemptionRate) > 0 {
			i -= len(x.MaxRedemptionRate)
			copy(dAtA[i:], x.MaxRedemptionRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MaxRedemptionRate)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xaa
		}
		if len(x.MinRedemptionRate) > 0 {
			i -= len(x.MinRedemptionRate)
			copy(dAtA[i:], x.MinRedemptionRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.MinRedemptionRate)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
		if x.Halted {
			i--
			if x.Halted {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x98
		}
		if len(x.DepositAddress) > 0 {
			i -= len(x.DepositAddress)
			copy(dAtA[i:], x.DepositAddress)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.DepositAddress)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x92
		}
		if len(x.Bech32Prefix) > 0 {
			i -= len(x.Bech32Prefix)
			copy(dAtA[i:], x.Bech32Prefix)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Bech32Prefix)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x8a
		}
		if len(x.TotalDelegations) > 0 {
			i -= len(x.TotalDelegations)
			copy(dAtA[i:], x.TotalDelegations)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TotalDelegations)))
			i--
			dAtA[i] = 0x6a
		}
		if len(x.TransferChannelId) > 0 {
			i -= len(x.TransferChannelId)
			copy(dAtA[i:], x.TransferChannelId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TransferChannelId)))
			i--
			dAtA[i] = 0x62
		}
		if len(x.RedemptionRate) > 0 {
			i -= len(x.RedemptionRate)
			copy(dAtA[i:], x.RedemptionRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.RedemptionRate)))
			i--
			dAtA[i] = 0x5a
		}
		if len(x.LastRedemptionRate) > 0 {
			i -= len(x.LastRedemptionRate)
			copy(dAtA[i:], x.LastRedemptionRate)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.LastRedemptionRate)))
			i--
			dAtA[i] = 0x52
		}
		if len(x.HostDenom) > 0 {
			i -= len(x.HostDenom)
			copy(dAtA[i:], x.HostDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.HostDenom)))
			i--
			dAtA[i] = 0x4a
		}
		if len(x.IbcDenom) > 0 {
			i -= len(x.IbcDenom)
			copy(dAtA[i:], x.IbcDenom)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.IbcDenom)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.Validators) > 0 {
			for iNdEx := len(x.Validators) - 1; iNdEx >= 0; iNdEx-- {
				encoded, err := options.Marshal(x.Validators[iNdEx])
				if err != nil {
					return protoiface.MarshalOutput{
						NoUnkeyedLiterals: input.NoUnkeyedLiterals,
						Buf:               input.Buf,
					}, err
				}
				i -= len(encoded)
				copy(dAtA[i:], encoded)
				i = runtime.EncodeVarint(dAtA, i, uint64(len(encoded)))
				i--
				dAtA[i] = 0x1a
			}
		}
		if len(x.ConnectionId) > 0 {
			i -= len(x.ConnectionId)
			copy(dAtA[i:], x.ConnectionId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ConnectionId)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.ChainId) > 0 {
			i -= len(x.ChainId)
			copy(dAtA[i:], x.ChainId)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.ChainId)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*HostZone)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: HostZone: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: HostZone: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ChainId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 17:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Bech32Prefix", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Bech32Prefix = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field ConnectionId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.ConnectionId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 12:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransferChannelId", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TransferChannelId = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field IbcDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.IbcDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field HostDenom", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.HostDenom = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 26:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field UnbondingPeriod", wireType)
				}
				x.UnbondingPeriod = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.UnbondingPeriod |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 3:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Validators = append(x.Validators, &Validator{})
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.Validators[len(x.Validators)-1]); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 18:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DepositAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DepositAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 22:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field WithdrawalIcaAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.WithdrawalIcaAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 23:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field FeeIcaAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.FeeIcaAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 24:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field DelegationIcaAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.DelegationIcaAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 25:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RedemptionIcaAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RedemptionIcaAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 30:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolDepositIcaAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CommunityPoolDepositIcaAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 31:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolReturnIcaAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CommunityPoolReturnIcaAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 32:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolStakeHoldingAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CommunityPoolStakeHoldingAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 33:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolRedeemHoldingAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CommunityPoolRedeemHoldingAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 35:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolTreasuryAddress", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.CommunityPoolTreasuryAddress = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 13:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TotalDelegations", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TotalDelegations = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 10:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LastRedemptionRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.LastRedemptionRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 11:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field RedemptionRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.RedemptionRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 20:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinRedemptionRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinRedemptionRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 21:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxRedemptionRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxRedemptionRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 28:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MinInnerRedemptionRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MinInnerRedemptionRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 29:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxInnerRedemptionRate", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.MaxInnerRedemptionRate = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 36:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field MaxMessagesPerIcaTx", wireType)
				}
				x.MaxMessagesPerIcaTx = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.MaxMessagesPerIcaTx |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 34:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolRebate", wireType)
				}
				var msglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					msglen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if msglen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + msglen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if x.CommunityPoolRebate == nil {
					x.CommunityPoolRebate = &CommunityPoolRebate{}
				}
				if err := options.Unmarshal(dAtA[iNdEx:postIndex], x.CommunityPoolRebate); err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				iNdEx = postIndex
			case 27:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field LsmLiquidStakeEnabled", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.LsmLiquidStakeEnabled = bool(v != 0)
			case 19:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Halted", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.Halted = bool(v != 0)
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: stride/stakeibc/host_zone.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// CommunityPoolRebate stores the size of the community pool liquid stake
// (denominated in stTokens) and the rebate rate as a decimal
type CommunityPoolRebate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Rebate percentage as a decimal (e.g. 0.2 for 20%)
	RebateRate string `protobuf:"bytes,1,opt,name=rebate_rate,json=rebateRate,proto3" json:"rebate_rate,omitempty"`
	// Number of stTokens received from the community pool liquid stake
	LiquidStakedStTokenAmount string `protobuf:"bytes,2,opt,name=liquid_staked_st_token_amount,json=liquidStakedStTokenAmount,proto3" json:"liquid_staked_st_token_amount,omitempty"`
}

func (x *CommunityPoolRebate) Reset() {
	*x = CommunityPoolRebate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stride_stakeibc_host_zone_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommunityPoolRebate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommunityPoolRebate) ProtoMessage() {}

// Deprecated: Use CommunityPoolRebate.ProtoReflect.Descriptor instead.
func (*CommunityPoolRebate) Descriptor() ([]byte, []int) {
	return file_stride_stakeibc_host_zone_proto_rawDescGZIP(), []int{0}
}

func (x *CommunityPoolRebate) GetRebateRate() string {
	if x != nil {
		return x.RebateRate
	}
	return ""
}

func (x *CommunityPoolRebate) GetLiquidStakedStTokenAmount() string {
	if x != nil {
		return x.LiquidStakedStTokenAmount
	}
	return ""
}

// Core data structure to track liquid staking zones
type HostZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Chain ID of the host zone
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	// Bech32 prefix of host zone's address
	Bech32Prefix string `protobuf:"bytes,17,opt,name=bech32prefix,proto3" json:"bech32prefix,omitempty"`
	// ConnectionID from Stride to the host zone (ID is on the stride side)
	ConnectionId string `protobuf:"bytes,2,opt,name=connection_id,json=connectionId,proto3" json:"connection_id,omitempty"`
	// Transfer Channel ID from Stride to the host zone (ID is on the stride side)
	TransferChannelId string `protobuf:"bytes,12,opt,name=transfer_channel_id,json=transferChannelId,proto3" json:"transfer_channel_id,omitempty"`
	// ibc denom of the host zone's native token on stride
	IbcDenom string `protobuf:"bytes,8,opt,name=ibc_denom,json=ibcDenom,proto3" json:"ibc_denom,omitempty"`
	// native denom on host zone
	HostDenom string `protobuf:"bytes,9,opt,name=host_denom,json=hostDenom,proto3" json:"host_denom,omitempty"`
	// The unbonding period in days (e.g. 21)
	UnbondingPeriod uint64 `protobuf:"varint,26,opt,name=unbonding_period,json=unbondingPeriod,proto3" json:"unbonding_period,omitempty"`
	// List of validators that are delegated to
	Validators []*Validator `protobuf:"bytes,3,rep,name=validators,proto3" json:"validators,omitempty"`
	// Address that custodies native tokens during a liquid stake
	DepositAddress string `protobuf:"bytes,18,opt,name=deposit_address,json=depositAddress,proto3" json:"deposit_address,omitempty"`
	// ICA Address on the host zone responsible for collecting rewards
	WithdrawalIcaAddress string `protobuf:"bytes,22,opt,name=withdrawal_ica_address,json=withdrawalIcaAddress,proto3" json:"withdrawal_ica_address,omitempty"`
	// ICA Address on the host zone responsible for commission
	FeeIcaAddress string `protobuf:"bytes,23,opt,name=fee_ica_address,json=feeIcaAddress,proto3" json:"fee_ica_address,omitempty"`
	// ICA Address on the host zone responsible for staking and unstaking
	DelegationIcaAddress string `protobuf:"bytes,24,opt,name=delegation_ica_address,json=delegationIcaAddress,proto3" json:"delegation_ica_address,omitempty"`
	// ICA Address that receives unstaked tokens after they've finished unbonding
	RedemptionIcaAddress string `protobuf:"bytes,25,opt,name=redemption_ica_address,json=redemptionIcaAddress,proto3" json:"redemption_ica_address,omitempty"`
	// ICA Address that receives tokens from a community pool to liquid stake or
	// redeem In the case of a liquid stake, the community pool deposits native
	// tokens In the case of a redemption, the community pool deposits stTokens
	CommunityPoolDepositIcaAddress string `protobuf:"bytes,30,opt,name=community_pool_deposit_ica_address,json=communityPoolDepositIcaAddress,proto3" json:"community_pool_deposit_ica_address,omitempty"`
	// ICA Address that distributes tokens back to the community pool during a
	// community pool liquid stake or redeem In the case of a liquid stake, the
	// return address sends back stTokens In the case of a redemption, the return
	// address sends back native tokens
	CommunityPoolReturnIcaAddress string `protobuf:"bytes,31,opt,name=community_pool_return_ica_address,json=communityPoolReturnIcaAddress,proto3" json:"community_pool_return_ica_address,omitempty"`
	// Module account on Stride that receives native tokens from the deposit ICA
	// and liquid stakes them
	CommunityPoolStakeHoldingAddress string `protobuf:"bytes,32,opt,name=community_pool_stake_holding_address,json=communityPoolStakeHoldingAddress,proto3" json:"community_pool_stake_holding_address,omitempty"`
	// Module account on Stride that receives stTokens from the deposit ICA and
	// redeems them
	CommunityPoolRedeemHoldingAddress string `protobuf:"bytes,33,opt,name=community_pool_redeem_holding_address,json=communityPoolRedeemHoldingAddress,proto3" json:"community_pool_redeem_holding_address,omitempty"`
	// Optional community pool address to send tokens to after a community pool
	// liquid stake or redemption If this address is empty, the tokens are sent to
	// the main community pool
	CommunityPoolTreasuryAddress string `protobuf:"bytes,35,opt,name=community_pool_treasury_address,json=communityPoolTreasuryAddress,proto3" json:"community_pool_treasury_address,omitempty"`
	// The total delegated balance on the host zone
	TotalDelegations string `protobuf:"bytes,13,opt,name=total_delegations,json=totalDelegations,proto3" json:"total_delegations,omitempty"`
	// The redemption rate from the previous epoch
	LastRedemptionRate string `protobuf:"bytes,10,opt,name=last_redemption_rate,json=lastRedemptionRate,proto3" json:"last_redemption_rate,omitempty"`
	// The current redemption rate
	RedemptionRate string `protobuf:"bytes,11,opt,name=redemption_rate,json=redemptionRate,proto3" json:"redemption_rate,omitempty"`
	// The min outer redemption rate bound - controlled only be governance
	// The min inner bound cannot exceed this bound
	MinRedemptionRate string `protobuf:"bytes,20,opt,name=min_redemption_rate,json=minRedemptionRate,proto3" json:"min_redemption_rate,omitempty"`
	// The max outer redemption rate bound - controlled only be governance
	// The max inner bound cannot exceed this bound
	MaxRedemptionRate string `protobuf:"bytes,21,opt,name=max_redemption_rate,json=maxRedemptionRate,proto3" json:"max_redemption_rate,omitempty"`
	// The min minner redemption rate bound - controlled by the admin
	// If the redemption rate exceeds this bound, the host zone is halted
	MinInnerRedemptionRate string `protobuf:"bytes,28,opt,name=min_inner_redemption_rate,json=minInnerRedemptionRate,proto3" json:"min_inner_redemption_rate,omitempty"`
	// The max minner redemption rate bound - controlled by the admin
	// If the redemption rate exceeds this bound, the host zone is halted
	MaxInnerRedemptionRate string `protobuf:"bytes,29,opt,name=max_inner_redemption_rate,json=maxInnerRedemptionRate,proto3" json:"max_inner_redemption_rate,omitempty"`
	// The max number of messages that can be sent in a delegation
	// or undelegation ICA tx
	MaxMessagesPerIcaTx uint64 `protobuf:"varint,36,opt,name=max_messages_per_ica_tx,json=maxMessagesPerIcaTx,proto3" json:"max_messages_per_ica_tx,omitempty"`
	// An optional fee rebate
	// If there is no rebate for the host zone, this will be nil
	CommunityPoolRebate *CommunityPoolRebate `protobuf:"bytes,34,opt,name=community_pool_rebate,json=communityPoolRebate,proto3" json:"community_pool_rebate,omitempty"`
	// A boolean indicating whether the chain has LSM enabled
	LsmLiquidStakeEnabled bool `protobuf:"varint,27,opt,name=lsm_liquid_stake_enabled,json=lsmLiquidStakeEnabled,proto3" json:"lsm_liquid_stake_enabled,omitempty"`
	// A boolean indicating whether the chain is currently halted
	Halted bool `protobuf:"varint,19,opt,name=halted,proto3" json:"halted,omitempty"`
}

func (x *HostZone) Reset() {
	*x = HostZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stride_stakeibc_host_zone_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HostZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HostZone) ProtoMessage() {}

// Deprecated: Use HostZone.ProtoReflect.Descriptor instead.
func (*HostZone) Descriptor() ([]byte, []int) {
	return file_stride_stakeibc_host_zone_proto_rawDescGZIP(), []int{1}
}

func (x *HostZone) GetChainId() string {
	if x != nil {
		return x.ChainId
	}
	return ""
}

func (x *HostZone) GetBech32Prefix() string {
	if x != nil {
		return x.Bech32Prefix
	}
	return ""
}

func (x *HostZone) GetConnectionId() string {
	if x != nil {
		return x.ConnectionId
	}
	return ""
}

func (x *HostZone) GetTransferChannelId() string {
	if x != nil {
		return x.TransferChannelId
	}
	return ""
}

func (x *HostZone) GetIbcDenom() string {
	if x != nil {
		return x.IbcDenom
	}
	return ""
}

func (x *HostZone) GetHostDenom() string {
	if x != nil {
		return x.HostDenom
	}
	return ""
}

func (x *HostZone) GetUnbondingPeriod() uint64 {
	if x != nil {
		return x.UnbondingPeriod
	}
	return 0
}

func (x *HostZone) GetValidators() []*Validator {
	if x != nil {
		return x.Validators
	}
	return nil
}

func (x *HostZone) GetDepositAddress() string {
	if x != nil {
		return x.DepositAddress
	}
	return ""
}

func (x *HostZone) GetWithdrawalIcaAddress() string {
	if x != nil {
		return x.WithdrawalIcaAddress
	}
	return ""
}

func (x *HostZone) GetFeeIcaAddress() string {
	if x != nil {
		return x.FeeIcaAddress
	}
	return ""
}

func (x *HostZone) GetDelegationIcaAddress() string {
	if x != nil {
		return x.DelegationIcaAddress
	}
	return ""
}

func (x *HostZone) GetRedemptionIcaAddress() string {
	if x != nil {
		return x.RedemptionIcaAddress
	}
	return ""
}

func (x *HostZone) GetCommunityPoolDepositIcaAddress() string {
	if x != nil {
		return x.CommunityPoolDepositIcaAddress
	}
	return ""
}

func (x *HostZone) GetCommunityPoolReturnIcaAddress() string {
	if x != nil {
		return x.CommunityPoolReturnIcaAddress
	}
	return ""
}

func (x *HostZone) GetCommunityPoolStakeHoldingAddress() string {
	if x != nil {
		return x.CommunityPoolStakeHoldingAddress
	}
	return ""
}

func (x *HostZone) GetCommunityPoolRedeemHoldingAddress() string {
	if x != nil {
		return x.CommunityPoolRedeemHoldingAddress
	}
	return ""
}

func (x *HostZone) GetCommunityPoolTreasuryAddress() string {
	if x != nil {
		return x.CommunityPoolTreasuryAddress
	}
	return ""
}

func (x *HostZone) GetTotalDelegations() string {
	if x != nil {
		return x.TotalDelegations
	}
	return ""
}

func (x *HostZone) GetLastRedemptionRate() string {
	if x != nil {
		return x.LastRedemptionRate
	}
	return ""
}

func (x *HostZone) GetRedemptionRate() string {
	if x != nil {
		return x.RedemptionRate
	}
	return ""
}

func (x *HostZone) GetMinRedemptionRate() string {
	if x != nil {
		return x.MinRedemptionRate
	}
	return ""
}

func (x *HostZone) GetMaxRedemptionRate() string {
	if x != nil {
		return x.MaxRedemptionRate
	}
	return ""
}

func (x *HostZone) GetMinInnerRedemptionRate() string {
	if x != nil {
		return x.MinInnerRedemptionRate
	}
	return ""
}

func (x *HostZone) GetMaxInnerRedemptionRate() string {
	if x != nil {
		return x.MaxInnerRedemptionRate
	}
	return ""
}

func (x *HostZone) GetMaxMessagesPerIcaTx() uint64 {
	if x != nil {
		return x.MaxMessagesPerIcaTx
	}
	return 0
}

func (x *HostZone) GetCommunityPoolRebate() *CommunityPoolRebate {
	if x != nil {
		return x.CommunityPoolRebate
	}
	return nil
}

func (x *HostZone) GetLsmLiquidStakeEnabled() bool {
	if x != nil {
		return x.LsmLiquidStakeEnabled
	}
	return false
}

func (x *HostZone) GetHalted() bool {
	if x != nil {
		return x.Halted
	}
	return false
}

var File_stride_stakeibc_host_zone_proto protoreflect.FileDescriptor

var file_stride_stakeibc_host_zone_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62,
	0x63, 0x2f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69,
	0x62, 0x63, 0x1a, 0x1f, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x69, 0x62, 0x63, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67,
	0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbc, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0b,
	0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0x52, 0x0a, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x5f, 0x0a, 0x1d, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61,
	0x6b, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda,
	0xde, 0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f,
	0x6d, 0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x19, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64,
	0x53, 0x74, 0x61, 0x6b, 0x65, 0x64, 0x53, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x22, 0xf1, 0x10, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62,
	0x65, 0x63, 0x68, 0x33, 0x32, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x62, 0x65, 0x63, 0x68, 0x33, 0x32, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12,
	0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x62, 0x63, 0x5f, 0x64, 0x65, 0x6e, 0x6f,
	0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x62, 0x63, 0x44, 0x65, 0x6e, 0x6f,
	0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x64, 0x65, 0x6e, 0x6f, 0x6d, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x68, 0x6f, 0x73, 0x74, 0x44, 0x65, 0x6e, 0x6f, 0x6d,
	0x12, 0x29, 0x0a, 0x10, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x75, 0x6e, 0x62, 0x6f,
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x0a, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62,
	0x63, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x64, 0x65, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0e, 0x64, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x16, 0x77, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x5f, 0x69, 0x63, 0x61, 0x5f, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x49, 0x63, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x40, 0x0a, 0x0f, 0x66, 0x65,
	0x65, 0x5f, 0x69, 0x63, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0d, 0x66,
	0x65, 0x65, 0x49, 0x63, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x16,
	0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x63, 0x61, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4,
	0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x63, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x16,
	0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x63, 0x61, 0x5f, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4,
	0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x63, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x64, 0x0a, 0x22,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x64,
	0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x5f, 0x69, 0x63, 0x61, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f,
	0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x1e, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f,
	0x6c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x49, 0x63, 0x61, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x62, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x69, 0x63, 0x61, 0x5f,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2,
	0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x1d, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x49, 0x63, 0x61, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x68, 0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e,
	0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x68,
	0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x20,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x6b, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x6a, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f,
	0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x21, 0x63, 0x6f, 0x6d, 0x6d, 0x75,
	0x6e, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x64, 0x65, 0x65, 0x6d, 0x48, 0x6f,
	0x6c, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5f, 0x0a, 0x1f,
	0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x74,
	0x72, 0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xd2, 0xb4, 0x2d, 0x14, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52,
	0x1c, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x54, 0x72,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x4a, 0x0a,
	0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde,
	0x1f, 0x15, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d,
	0x61, 0x74, 0x68, 0x2e, 0x49, 0x6e, 0x74, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x63, 0x0a, 0x14, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x5a,
	0x0a, 0x0f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x0e, 0x72, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x61, 0x0a, 0x13, 0x6d, 0x69,
	0x6e, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f,
	0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61,
	0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x11, 0x6d, 0x69, 0x6e, 0x52,
	0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x61, 0x0a,
	0x13, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00,
	0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f,
	0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2,
	0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x11, 0x6d,
	0x61, 0x78, 0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x6c, 0x0a, 0x19, 0x6d, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65,
	0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73,
	0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c,
	0x65, 0x67, 0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d,
	0x6f, 0x73, 0x2e, 0x44, 0x65, 0x63, 0x52, 0x16, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x6c,
	0x0a, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x64, 0x65,
	0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x31, 0xc8, 0xde, 0x1f, 0x00, 0xda, 0xde, 0x1f, 0x1b, 0x63, 0x6f, 0x73, 0x6d, 0x6f,
	0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x6d, 0x61, 0x74, 0x68, 0x2e, 0x4c, 0x65, 0x67,
	0x61, 0x63, 0x79, 0x44, 0x65, 0x63, 0xd2, 0xb4, 0x2d, 0x0a, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73,
	0x2e, 0x44, 0x65, 0x63, 0x52, 0x16, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65,
	0x64, 0x65, 0x6d, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x17,
	0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72,
	0x5f, 0x69, 0x63, 0x61, 0x5f, 0x74, 0x78, 0x18, 0x24, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6d,
	0x61, 0x78, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x50, 0x65, 0x72, 0x49, 0x63, 0x61,
	0x54, 0x78, 0x12, 0x58, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x5f,
	0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x72, 0x65, 0x62, 0x61, 0x74, 0x65, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x69, 0x62, 0x63, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x52, 0x13, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69,
	0x74, 0x79, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x62, 0x61, 0x74, 0x65, 0x12, 0x37, 0x0a, 0x18,
	0x6c, 0x73, 0x6d, 0x5f, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15,
	0x6c, 0x73, 0x6d, 0x4c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x68, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x4a, 0x04, 0x08,
	0x04, 0x10, 0x05, 0x4a, 0x04, 0x08, 0x05, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a,
	0x04, 0x08, 0x07, 0x10, 0x08, 0x4a, 0x04, 0x08, 0x0e, 0x10, 0x0f, 0x4a, 0x04, 0x08, 0x0f, 0x10,
	0x10, 0x4a, 0x04, 0x08, 0x10, 0x10, 0x11, 0x42, 0xa3, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e,
	0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2e, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0x42,
	0x0d, 0x48, 0x6f, 0x73, 0x74, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x20, 0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x73, 0x74, 0x72, 0x69, 0x64, 0x65, 0x2f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x69,
	0x62, 0x63, 0xa2, 0x02, 0x03, 0x53, 0x53, 0x58, 0xaa, 0x02, 0x0f, 0x53, 0x74, 0x72, 0x69, 0x64,
	0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0xca, 0x02, 0x0f, 0x53, 0x74, 0x72,
	0x69, 0x64, 0x65, 0x5c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0xe2, 0x02, 0x1b, 0x53,
	0x74, 0x72, 0x69, 0x64, 0x65, 0x5c, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0x5c, 0x47,
	0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x10, 0x53, 0x74, 0x72,
	0x69, 0x64, 0x65, 0x3a, 0x3a, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x69, 0x62, 0x63, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stride_stakeibc_host_zone_proto_rawDescOnce sync.Once
	file_stride_stakeibc_host_zone_proto_rawDescData = file_stride_stakeibc_host_zone_proto_rawDesc
)

func file_stride_stakeibc_host_zone_proto_rawDescGZIP() []byte {
	file_stride_stakeibc_host_zone_proto_rawDescOnce.Do(func() {
		file_stride_stakeibc_host_zone_proto_rawDescData = protoimpl.X.CompressGZIP(file_stride_stakeibc_host_zone_proto_rawDescData)
	})
	return file_stride_stakeibc_host_zone_proto_rawDescData
}

var file_stride_stakeibc_host_zone_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_stride_stakeibc_host_zone_proto_goTypes = []interface{}{
	(*CommunityPoolRebate)(nil), // 0: stride.stakeibc.CommunityPoolRebate
	(*HostZone)(nil),            // 1: stride.stakeibc.HostZone
	(*Validator)(nil),           // 2: stride.stakeibc.Validator
}
var file_stride_stakeibc_host_zone_proto_depIdxs = []int32{
	2, // 0: stride.stakeibc.HostZone.validators:type_name -> stride.stakeibc.Validator
	0, // 1: stride.stakeibc.HostZone.community_pool_rebate:type_name -> stride.stakeibc.CommunityPoolRebate
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_stride_stakeibc_host_zone_proto_init() }
func file_stride_stakeibc_host_zone_proto_init() {
	if File_stride_stakeibc_host_zone_proto != nil {
		return
	}
	file_stride_stakeibc_validator_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_stride_stakeibc_host_zone_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommunityPoolRebate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stride_stakeibc_host_zone_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HostZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stride_stakeibc_host_zone_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_stride_stakeibc_host_zone_proto_goTypes,
		DependencyIndexes: file_stride_stakeibc_host_zone_proto_depIdxs,
		MessageInfos:      file_stride_stakeibc_host_zone_proto_msgTypes,
	}.Build()
	File_stride_stakeibc_host_zone_proto = out.File
	file_stride_stakeibc_host_zone_proto_rawDesc = nil
	file_stride_stakeibc_host_zone_proto_goTypes = nil
	file_stride_stakeibc_host_zone_proto_depIdxs = nil
}
