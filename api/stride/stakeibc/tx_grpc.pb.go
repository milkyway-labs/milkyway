// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: stride/stakeibc/tx.proto

package stakeibc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Msg_LiquidStake_FullMethodName                     = "/stride.stakeibc.Msg/LiquidStake"
	Msg_LSMLiquidStake_FullMethodName                  = "/stride.stakeibc.Msg/LSMLiquidStake"
	Msg_RedeemStake_FullMethodName                     = "/stride.stakeibc.Msg/RedeemStake"
	Msg_RegisterHostZone_FullMethodName                = "/stride.stakeibc.Msg/RegisterHostZone"
	Msg_ClaimUndelegatedTokens_FullMethodName          = "/stride.stakeibc.Msg/ClaimUndelegatedTokens"
	Msg_RebalanceValidators_FullMethodName             = "/stride.stakeibc.Msg/RebalanceValidators"
	Msg_AddValidators_FullMethodName                   = "/stride.stakeibc.Msg/AddValidators"
	Msg_ChangeValidatorWeight_FullMethodName           = "/stride.stakeibc.Msg/ChangeValidatorWeight"
	Msg_DeleteValidator_FullMethodName                 = "/stride.stakeibc.Msg/DeleteValidator"
	Msg_RestoreInterchainAccount_FullMethodName        = "/stride.stakeibc.Msg/RestoreInterchainAccount"
	Msg_UpdateValidatorSharesExchRate_FullMethodName   = "/stride.stakeibc.Msg/UpdateValidatorSharesExchRate"
	Msg_CalibrateDelegation_FullMethodName             = "/stride.stakeibc.Msg/CalibrateDelegation"
	Msg_ClearBalance_FullMethodName                    = "/stride.stakeibc.Msg/ClearBalance"
	Msg_UpdateInnerRedemptionRateBounds_FullMethodName = "/stride.stakeibc.Msg/UpdateInnerRedemptionRateBounds"
	Msg_ResumeHostZone_FullMethodName                  = "/stride.stakeibc.Msg/ResumeHostZone"
	Msg_CreateTradeRoute_FullMethodName                = "/stride.stakeibc.Msg/CreateTradeRoute"
	Msg_DeleteTradeRoute_FullMethodName                = "/stride.stakeibc.Msg/DeleteTradeRoute"
	Msg_UpdateTradeRoute_FullMethodName                = "/stride.stakeibc.Msg/UpdateTradeRoute"
	Msg_SetCommunityPoolRebate_FullMethodName          = "/stride.stakeibc.Msg/SetCommunityPoolRebate"
	Msg_ToggleTradeController_FullMethodName           = "/stride.stakeibc.Msg/ToggleTradeController"
	Msg_UpdateHostZoneParams_FullMethodName            = "/stride.stakeibc.Msg/UpdateHostZoneParams"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgClient interface {
	LiquidStake(ctx context.Context, in *MsgLiquidStake, opts ...grpc.CallOption) (*MsgLiquidStakeResponse, error)
	LSMLiquidStake(ctx context.Context, in *MsgLSMLiquidStake, opts ...grpc.CallOption) (*MsgLSMLiquidStakeResponse, error)
	RedeemStake(ctx context.Context, in *MsgRedeemStake, opts ...grpc.CallOption) (*MsgRedeemStakeResponse, error)
	RegisterHostZone(ctx context.Context, in *MsgRegisterHostZone, opts ...grpc.CallOption) (*MsgRegisterHostZoneResponse, error)
	ClaimUndelegatedTokens(ctx context.Context, in *MsgClaimUndelegatedTokens, opts ...grpc.CallOption) (*MsgClaimUndelegatedTokensResponse, error)
	RebalanceValidators(ctx context.Context, in *MsgRebalanceValidators, opts ...grpc.CallOption) (*MsgRebalanceValidatorsResponse, error)
	AddValidators(ctx context.Context, in *MsgAddValidators, opts ...grpc.CallOption) (*MsgAddValidatorsResponse, error)
	ChangeValidatorWeight(ctx context.Context, in *MsgChangeValidatorWeights, opts ...grpc.CallOption) (*MsgChangeValidatorWeightsResponse, error)
	DeleteValidator(ctx context.Context, in *MsgDeleteValidator, opts ...grpc.CallOption) (*MsgDeleteValidatorResponse, error)
	RestoreInterchainAccount(ctx context.Context, in *MsgRestoreInterchainAccount, opts ...grpc.CallOption) (*MsgRestoreInterchainAccountResponse, error)
	UpdateValidatorSharesExchRate(ctx context.Context, in *MsgUpdateValidatorSharesExchRate, opts ...grpc.CallOption) (*MsgUpdateValidatorSharesExchRateResponse, error)
	CalibrateDelegation(ctx context.Context, in *MsgCalibrateDelegation, opts ...grpc.CallOption) (*MsgCalibrateDelegationResponse, error)
	ClearBalance(ctx context.Context, in *MsgClearBalance, opts ...grpc.CallOption) (*MsgClearBalanceResponse, error)
	UpdateInnerRedemptionRateBounds(ctx context.Context, in *MsgUpdateInnerRedemptionRateBounds, opts ...grpc.CallOption) (*MsgUpdateInnerRedemptionRateBoundsResponse, error)
	ResumeHostZone(ctx context.Context, in *MsgResumeHostZone, opts ...grpc.CallOption) (*MsgResumeHostZoneResponse, error)
	CreateTradeRoute(ctx context.Context, in *MsgCreateTradeRoute, opts ...grpc.CallOption) (*MsgCreateTradeRouteResponse, error)
	DeleteTradeRoute(ctx context.Context, in *MsgDeleteTradeRoute, opts ...grpc.CallOption) (*MsgDeleteTradeRouteResponse, error)
	UpdateTradeRoute(ctx context.Context, in *MsgUpdateTradeRoute, opts ...grpc.CallOption) (*MsgUpdateTradeRouteResponse, error)
	SetCommunityPoolRebate(ctx context.Context, in *MsgSetCommunityPoolRebate, opts ...grpc.CallOption) (*MsgSetCommunityPoolRebateResponse, error)
	ToggleTradeController(ctx context.Context, in *MsgToggleTradeController, opts ...grpc.CallOption) (*MsgToggleTradeControllerResponse, error)
	UpdateHostZoneParams(ctx context.Context, in *MsgUpdateHostZoneParams, opts ...grpc.CallOption) (*MsgUpdateHostZoneParamsResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) LiquidStake(ctx context.Context, in *MsgLiquidStake, opts ...grpc.CallOption) (*MsgLiquidStakeResponse, error) {
	out := new(MsgLiquidStakeResponse)
	err := c.cc.Invoke(ctx, Msg_LiquidStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LSMLiquidStake(ctx context.Context, in *MsgLSMLiquidStake, opts ...grpc.CallOption) (*MsgLSMLiquidStakeResponse, error) {
	out := new(MsgLSMLiquidStakeResponse)
	err := c.cc.Invoke(ctx, Msg_LSMLiquidStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RedeemStake(ctx context.Context, in *MsgRedeemStake, opts ...grpc.CallOption) (*MsgRedeemStakeResponse, error) {
	out := new(MsgRedeemStakeResponse)
	err := c.cc.Invoke(ctx, Msg_RedeemStake_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterHostZone(ctx context.Context, in *MsgRegisterHostZone, opts ...grpc.CallOption) (*MsgRegisterHostZoneResponse, error) {
	out := new(MsgRegisterHostZoneResponse)
	err := c.cc.Invoke(ctx, Msg_RegisterHostZone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClaimUndelegatedTokens(ctx context.Context, in *MsgClaimUndelegatedTokens, opts ...grpc.CallOption) (*MsgClaimUndelegatedTokensResponse, error) {
	out := new(MsgClaimUndelegatedTokensResponse)
	err := c.cc.Invoke(ctx, Msg_ClaimUndelegatedTokens_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RebalanceValidators(ctx context.Context, in *MsgRebalanceValidators, opts ...grpc.CallOption) (*MsgRebalanceValidatorsResponse, error) {
	out := new(MsgRebalanceValidatorsResponse)
	err := c.cc.Invoke(ctx, Msg_RebalanceValidators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddValidators(ctx context.Context, in *MsgAddValidators, opts ...grpc.CallOption) (*MsgAddValidatorsResponse, error) {
	out := new(MsgAddValidatorsResponse)
	err := c.cc.Invoke(ctx, Msg_AddValidators_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeValidatorWeight(ctx context.Context, in *MsgChangeValidatorWeights, opts ...grpc.CallOption) (*MsgChangeValidatorWeightsResponse, error) {
	out := new(MsgChangeValidatorWeightsResponse)
	err := c.cc.Invoke(ctx, Msg_ChangeValidatorWeight_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteValidator(ctx context.Context, in *MsgDeleteValidator, opts ...grpc.CallOption) (*MsgDeleteValidatorResponse, error) {
	out := new(MsgDeleteValidatorResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteValidator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RestoreInterchainAccount(ctx context.Context, in *MsgRestoreInterchainAccount, opts ...grpc.CallOption) (*MsgRestoreInterchainAccountResponse, error) {
	out := new(MsgRestoreInterchainAccountResponse)
	err := c.cc.Invoke(ctx, Msg_RestoreInterchainAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateValidatorSharesExchRate(ctx context.Context, in *MsgUpdateValidatorSharesExchRate, opts ...grpc.CallOption) (*MsgUpdateValidatorSharesExchRateResponse, error) {
	out := new(MsgUpdateValidatorSharesExchRateResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateValidatorSharesExchRate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CalibrateDelegation(ctx context.Context, in *MsgCalibrateDelegation, opts ...grpc.CallOption) (*MsgCalibrateDelegationResponse, error) {
	out := new(MsgCalibrateDelegationResponse)
	err := c.cc.Invoke(ctx, Msg_CalibrateDelegation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ClearBalance(ctx context.Context, in *MsgClearBalance, opts ...grpc.CallOption) (*MsgClearBalanceResponse, error) {
	out := new(MsgClearBalanceResponse)
	err := c.cc.Invoke(ctx, Msg_ClearBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateInnerRedemptionRateBounds(ctx context.Context, in *MsgUpdateInnerRedemptionRateBounds, opts ...grpc.CallOption) (*MsgUpdateInnerRedemptionRateBoundsResponse, error) {
	out := new(MsgUpdateInnerRedemptionRateBoundsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateInnerRedemptionRateBounds_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ResumeHostZone(ctx context.Context, in *MsgResumeHostZone, opts ...grpc.CallOption) (*MsgResumeHostZoneResponse, error) {
	out := new(MsgResumeHostZoneResponse)
	err := c.cc.Invoke(ctx, Msg_ResumeHostZone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTradeRoute(ctx context.Context, in *MsgCreateTradeRoute, opts ...grpc.CallOption) (*MsgCreateTradeRouteResponse, error) {
	out := new(MsgCreateTradeRouteResponse)
	err := c.cc.Invoke(ctx, Msg_CreateTradeRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeleteTradeRoute(ctx context.Context, in *MsgDeleteTradeRoute, opts ...grpc.CallOption) (*MsgDeleteTradeRouteResponse, error) {
	out := new(MsgDeleteTradeRouteResponse)
	err := c.cc.Invoke(ctx, Msg_DeleteTradeRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTradeRoute(ctx context.Context, in *MsgUpdateTradeRoute, opts ...grpc.CallOption) (*MsgUpdateTradeRouteResponse, error) {
	out := new(MsgUpdateTradeRouteResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateTradeRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetCommunityPoolRebate(ctx context.Context, in *MsgSetCommunityPoolRebate, opts ...grpc.CallOption) (*MsgSetCommunityPoolRebateResponse, error) {
	out := new(MsgSetCommunityPoolRebateResponse)
	err := c.cc.Invoke(ctx, Msg_SetCommunityPoolRebate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ToggleTradeController(ctx context.Context, in *MsgToggleTradeController, opts ...grpc.CallOption) (*MsgToggleTradeControllerResponse, error) {
	out := new(MsgToggleTradeControllerResponse)
	err := c.cc.Invoke(ctx, Msg_ToggleTradeController_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateHostZoneParams(ctx context.Context, in *MsgUpdateHostZoneParams, opts ...grpc.CallOption) (*MsgUpdateHostZoneParamsResponse, error) {
	out := new(MsgUpdateHostZoneParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateHostZoneParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility
type MsgServer interface {
	LiquidStake(context.Context, *MsgLiquidStake) (*MsgLiquidStakeResponse, error)
	LSMLiquidStake(context.Context, *MsgLSMLiquidStake) (*MsgLSMLiquidStakeResponse, error)
	RedeemStake(context.Context, *MsgRedeemStake) (*MsgRedeemStakeResponse, error)
	RegisterHostZone(context.Context, *MsgRegisterHostZone) (*MsgRegisterHostZoneResponse, error)
	ClaimUndelegatedTokens(context.Context, *MsgClaimUndelegatedTokens) (*MsgClaimUndelegatedTokensResponse, error)
	RebalanceValidators(context.Context, *MsgRebalanceValidators) (*MsgRebalanceValidatorsResponse, error)
	AddValidators(context.Context, *MsgAddValidators) (*MsgAddValidatorsResponse, error)
	ChangeValidatorWeight(context.Context, *MsgChangeValidatorWeights) (*MsgChangeValidatorWeightsResponse, error)
	DeleteValidator(context.Context, *MsgDeleteValidator) (*MsgDeleteValidatorResponse, error)
	RestoreInterchainAccount(context.Context, *MsgRestoreInterchainAccount) (*MsgRestoreInterchainAccountResponse, error)
	UpdateValidatorSharesExchRate(context.Context, *MsgUpdateValidatorSharesExchRate) (*MsgUpdateValidatorSharesExchRateResponse, error)
	CalibrateDelegation(context.Context, *MsgCalibrateDelegation) (*MsgCalibrateDelegationResponse, error)
	ClearBalance(context.Context, *MsgClearBalance) (*MsgClearBalanceResponse, error)
	UpdateInnerRedemptionRateBounds(context.Context, *MsgUpdateInnerRedemptionRateBounds) (*MsgUpdateInnerRedemptionRateBoundsResponse, error)
	ResumeHostZone(context.Context, *MsgResumeHostZone) (*MsgResumeHostZoneResponse, error)
	CreateTradeRoute(context.Context, *MsgCreateTradeRoute) (*MsgCreateTradeRouteResponse, error)
	DeleteTradeRoute(context.Context, *MsgDeleteTradeRoute) (*MsgDeleteTradeRouteResponse, error)
	UpdateTradeRoute(context.Context, *MsgUpdateTradeRoute) (*MsgUpdateTradeRouteResponse, error)
	SetCommunityPoolRebate(context.Context, *MsgSetCommunityPoolRebate) (*MsgSetCommunityPoolRebateResponse, error)
	ToggleTradeController(context.Context, *MsgToggleTradeController) (*MsgToggleTradeControllerResponse, error)
	UpdateHostZoneParams(context.Context, *MsgUpdateHostZoneParams) (*MsgUpdateHostZoneParamsResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (UnimplementedMsgServer) LiquidStake(context.Context, *MsgLiquidStake) (*MsgLiquidStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidStake not implemented")
}
func (UnimplementedMsgServer) LSMLiquidStake(context.Context, *MsgLSMLiquidStake) (*MsgLSMLiquidStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LSMLiquidStake not implemented")
}
func (UnimplementedMsgServer) RedeemStake(context.Context, *MsgRedeemStake) (*MsgRedeemStakeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedeemStake not implemented")
}
func (UnimplementedMsgServer) RegisterHostZone(context.Context, *MsgRegisterHostZone) (*MsgRegisterHostZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterHostZone not implemented")
}
func (UnimplementedMsgServer) ClaimUndelegatedTokens(context.Context, *MsgClaimUndelegatedTokens) (*MsgClaimUndelegatedTokensResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimUndelegatedTokens not implemented")
}
func (UnimplementedMsgServer) RebalanceValidators(context.Context, *MsgRebalanceValidators) (*MsgRebalanceValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RebalanceValidators not implemented")
}
func (UnimplementedMsgServer) AddValidators(context.Context, *MsgAddValidators) (*MsgAddValidatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddValidators not implemented")
}
func (UnimplementedMsgServer) ChangeValidatorWeight(context.Context, *MsgChangeValidatorWeights) (*MsgChangeValidatorWeightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeValidatorWeight not implemented")
}
func (UnimplementedMsgServer) DeleteValidator(context.Context, *MsgDeleteValidator) (*MsgDeleteValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteValidator not implemented")
}
func (UnimplementedMsgServer) RestoreInterchainAccount(context.Context, *MsgRestoreInterchainAccount) (*MsgRestoreInterchainAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreInterchainAccount not implemented")
}
func (UnimplementedMsgServer) UpdateValidatorSharesExchRate(context.Context, *MsgUpdateValidatorSharesExchRate) (*MsgUpdateValidatorSharesExchRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidatorSharesExchRate not implemented")
}
func (UnimplementedMsgServer) CalibrateDelegation(context.Context, *MsgCalibrateDelegation) (*MsgCalibrateDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalibrateDelegation not implemented")
}
func (UnimplementedMsgServer) ClearBalance(context.Context, *MsgClearBalance) (*MsgClearBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearBalance not implemented")
}
func (UnimplementedMsgServer) UpdateInnerRedemptionRateBounds(context.Context, *MsgUpdateInnerRedemptionRateBounds) (*MsgUpdateInnerRedemptionRateBoundsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInnerRedemptionRateBounds not implemented")
}
func (UnimplementedMsgServer) ResumeHostZone(context.Context, *MsgResumeHostZone) (*MsgResumeHostZoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeHostZone not implemented")
}
func (UnimplementedMsgServer) CreateTradeRoute(context.Context, *MsgCreateTradeRoute) (*MsgCreateTradeRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTradeRoute not implemented")
}
func (UnimplementedMsgServer) DeleteTradeRoute(context.Context, *MsgDeleteTradeRoute) (*MsgDeleteTradeRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTradeRoute not implemented")
}
func (UnimplementedMsgServer) UpdateTradeRoute(context.Context, *MsgUpdateTradeRoute) (*MsgUpdateTradeRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTradeRoute not implemented")
}
func (UnimplementedMsgServer) SetCommunityPoolRebate(context.Context, *MsgSetCommunityPoolRebate) (*MsgSetCommunityPoolRebateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetCommunityPoolRebate not implemented")
}
func (UnimplementedMsgServer) ToggleTradeController(context.Context, *MsgToggleTradeController) (*MsgToggleTradeControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleTradeController not implemented")
}
func (UnimplementedMsgServer) UpdateHostZoneParams(context.Context, *MsgUpdateHostZoneParams) (*MsgUpdateHostZoneParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostZoneParams not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_LiquidStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLiquidStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LiquidStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_LiquidStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LiquidStake(ctx, req.(*MsgLiquidStake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LSMLiquidStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLSMLiquidStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LSMLiquidStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_LSMLiquidStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LSMLiquidStake(ctx, req.(*MsgLSMLiquidStake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RedeemStake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRedeemStake)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RedeemStake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RedeemStake_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RedeemStake(ctx, req.(*MsgRedeemStake))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterHostZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterHostZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterHostZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RegisterHostZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterHostZone(ctx, req.(*MsgRegisterHostZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClaimUndelegatedTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClaimUndelegatedTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClaimUndelegatedTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ClaimUndelegatedTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClaimUndelegatedTokens(ctx, req.(*MsgClaimUndelegatedTokens))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RebalanceValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRebalanceValidators)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RebalanceValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RebalanceValidators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RebalanceValidators(ctx, req.(*MsgRebalanceValidators))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddValidators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddValidators)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddValidators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AddValidators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddValidators(ctx, req.(*MsgAddValidators))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeValidatorWeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeValidatorWeights)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeValidatorWeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ChangeValidatorWeight_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeValidatorWeight(ctx, req.(*MsgChangeValidatorWeights))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteValidator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteValidator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteValidator(ctx, req.(*MsgDeleteValidator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RestoreInterchainAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRestoreInterchainAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RestoreInterchainAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RestoreInterchainAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RestoreInterchainAccount(ctx, req.(*MsgRestoreInterchainAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateValidatorSharesExchRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateValidatorSharesExchRate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateValidatorSharesExchRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateValidatorSharesExchRate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateValidatorSharesExchRate(ctx, req.(*MsgUpdateValidatorSharesExchRate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CalibrateDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCalibrateDelegation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CalibrateDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CalibrateDelegation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CalibrateDelegation(ctx, req.(*MsgCalibrateDelegation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ClearBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgClearBalance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ClearBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ClearBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ClearBalance(ctx, req.(*MsgClearBalance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateInnerRedemptionRateBounds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateInnerRedemptionRateBounds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateInnerRedemptionRateBounds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateInnerRedemptionRateBounds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateInnerRedemptionRateBounds(ctx, req.(*MsgUpdateInnerRedemptionRateBounds))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ResumeHostZone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgResumeHostZone)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ResumeHostZone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ResumeHostZone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ResumeHostZone(ctx, req.(*MsgResumeHostZone))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTradeRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTradeRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTradeRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CreateTradeRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTradeRoute(ctx, req.(*MsgCreateTradeRoute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeleteTradeRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeleteTradeRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeleteTradeRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DeleteTradeRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeleteTradeRoute(ctx, req.(*MsgDeleteTradeRoute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTradeRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTradeRoute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTradeRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateTradeRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTradeRoute(ctx, req.(*MsgUpdateTradeRoute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetCommunityPoolRebate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetCommunityPoolRebate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetCommunityPoolRebate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_SetCommunityPoolRebate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetCommunityPoolRebate(ctx, req.(*MsgSetCommunityPoolRebate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ToggleTradeController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgToggleTradeController)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ToggleTradeController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_ToggleTradeController_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ToggleTradeController(ctx, req.(*MsgToggleTradeController))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateHostZoneParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateHostZoneParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateHostZoneParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateHostZoneParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateHostZoneParams(ctx, req.(*MsgUpdateHostZoneParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stride.stakeibc.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LiquidStake",
			Handler:    _Msg_LiquidStake_Handler,
		},
		{
			MethodName: "LSMLiquidStake",
			Handler:    _Msg_LSMLiquidStake_Handler,
		},
		{
			MethodName: "RedeemStake",
			Handler:    _Msg_RedeemStake_Handler,
		},
		{
			MethodName: "RegisterHostZone",
			Handler:    _Msg_RegisterHostZone_Handler,
		},
		{
			MethodName: "ClaimUndelegatedTokens",
			Handler:    _Msg_ClaimUndelegatedTokens_Handler,
		},
		{
			MethodName: "RebalanceValidators",
			Handler:    _Msg_RebalanceValidators_Handler,
		},
		{
			MethodName: "AddValidators",
			Handler:    _Msg_AddValidators_Handler,
		},
		{
			MethodName: "ChangeValidatorWeight",
			Handler:    _Msg_ChangeValidatorWeight_Handler,
		},
		{
			MethodName: "DeleteValidator",
			Handler:    _Msg_DeleteValidator_Handler,
		},
		{
			MethodName: "RestoreInterchainAccount",
			Handler:    _Msg_RestoreInterchainAccount_Handler,
		},
		{
			MethodName: "UpdateValidatorSharesExchRate",
			Handler:    _Msg_UpdateValidatorSharesExchRate_Handler,
		},
		{
			MethodName: "CalibrateDelegation",
			Handler:    _Msg_CalibrateDelegation_Handler,
		},
		{
			MethodName: "ClearBalance",
			Handler:    _Msg_ClearBalance_Handler,
		},
		{
			MethodName: "UpdateInnerRedemptionRateBounds",
			Handler:    _Msg_UpdateInnerRedemptionRateBounds_Handler,
		},
		{
			MethodName: "ResumeHostZone",
			Handler:    _Msg_ResumeHostZone_Handler,
		},
		{
			MethodName: "CreateTradeRoute",
			Handler:    _Msg_CreateTradeRoute_Handler,
		},
		{
			MethodName: "DeleteTradeRoute",
			Handler:    _Msg_DeleteTradeRoute_Handler,
		},
		{
			MethodName: "UpdateTradeRoute",
			Handler:    _Msg_UpdateTradeRoute_Handler,
		},
		{
			MethodName: "SetCommunityPoolRebate",
			Handler:    _Msg_SetCommunityPoolRebate_Handler,
		},
		{
			MethodName: "ToggleTradeController",
			Handler:    _Msg_ToggleTradeController_Handler,
		},
		{
			MethodName: "UpdateHostZoneParams",
			Handler:    _Msg_UpdateHostZoneParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stride/stakeibc/tx.proto",
}
