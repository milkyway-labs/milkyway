// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: milkyway/rewards/v1/query.proto

package rewardsv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_Params_FullMethodName                          = "/milkyway.rewards.v1.Query/Params"
	Query_RewardsPlans_FullMethodName                    = "/milkyway.rewards.v1.Query/RewardsPlans"
	Query_RewardsPlan_FullMethodName                     = "/milkyway.rewards.v1.Query/RewardsPlan"
	Query_PoolOutstandingRewards_FullMethodName          = "/milkyway.rewards.v1.Query/PoolOutstandingRewards"
	Query_OperatorOutstandingRewards_FullMethodName      = "/milkyway.rewards.v1.Query/OperatorOutstandingRewards"
	Query_ServiceOutstandingRewards_FullMethodName       = "/milkyway.rewards.v1.Query/ServiceOutstandingRewards"
	Query_OperatorCommission_FullMethodName              = "/milkyway.rewards.v1.Query/OperatorCommission"
	Query_PoolServiceTotalDelegatorShares_FullMethodName = "/milkyway.rewards.v1.Query/PoolServiceTotalDelegatorShares"
	Query_PoolDelegationRewards_FullMethodName           = "/milkyway.rewards.v1.Query/PoolDelegationRewards"
	Query_OperatorDelegationRewards_FullMethodName       = "/milkyway.rewards.v1.Query/OperatorDelegationRewards"
	Query_ServiceDelegationRewards_FullMethodName        = "/milkyway.rewards.v1.Query/ServiceDelegationRewards"
	Query_DelegatorTotalRewards_FullMethodName           = "/milkyway.rewards.v1.Query/DelegatorTotalRewards"
	Query_DelegatorWithdrawAddress_FullMethodName        = "/milkyway.rewards.v1.Query/DelegatorWithdrawAddress"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query defines the gRPC querier service.
type QueryClient interface {
	// Params defines a gRPC query method that returns the parameters of the
	// module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// RewardsPlans queries all rewards plans.
	RewardsPlans(ctx context.Context, in *QueryRewardsPlansRequest, opts ...grpc.CallOption) (*QueryRewardsPlansResponse, error)
	// RewardsPlan queries a specific rewards plan by its ID.
	RewardsPlan(ctx context.Context, in *QueryRewardsPlanRequest, opts ...grpc.CallOption) (*QueryRewardsPlanResponse, error)
	// PoolOutstandingRewards queries rewards of a pool.
	PoolOutstandingRewards(ctx context.Context, in *QueryPoolOutstandingRewardsRequest, opts ...grpc.CallOption) (*QueryPoolOutstandingRewardsResponse, error)
	// OperatorOutstandingRewards queries rewards of an operator.
	OperatorOutstandingRewards(ctx context.Context, in *QueryOperatorOutstandingRewardsRequest, opts ...grpc.CallOption) (*QueryOperatorOutstandingRewardsResponse, error)
	// ServiceOutstandingRewards queries rewards of a service.
	ServiceOutstandingRewards(ctx context.Context, in *QueryServiceOutstandingRewardsRequest, opts ...grpc.CallOption) (*QueryServiceOutstandingRewardsResponse, error)
	// OperatorCommission queries accumulated commission for an operator.
	OperatorCommission(ctx context.Context, in *QueryOperatorCommissionRequest, opts ...grpc.CallOption) (*QueryOperatorCommissionResponse, error)
	// PoolServiceTotalDelegatorShares queries the total delegator shares for a
	// pool-service pair.
	PoolServiceTotalDelegatorShares(ctx context.Context, in *QueryPoolServiceTotalDelegatorSharesRequest, opts ...grpc.CallOption) (*QueryPoolServiceTotalDelegatorSharesResponse, error)
	// PoolDelegationRewards queries the total rewards accrued by a pool
	// delegation.
	PoolDelegationRewards(ctx context.Context, in *QueryPoolDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryPoolDelegationRewardsResponse, error)
	// OperatorDelegationRewards queries the total rewards accrued by a operator
	// delegation.
	OperatorDelegationRewards(ctx context.Context, in *QueryOperatorDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryOperatorDelegationRewardsResponse, error)
	// ServiceDelegationRewards queries the total rewards accrued by a service
	// delegation.
	ServiceDelegationRewards(ctx context.Context, in *QueryServiceDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryServiceDelegationRewardsResponse, error)
	// DelegatorTotalRewards queries the total rewards accrued by a single
	// delegator
	DelegatorTotalRewards(ctx context.Context, in *QueryDelegatorTotalRewardsRequest, opts ...grpc.CallOption) (*QueryDelegatorTotalRewardsResponse, error)
	// DelegatorWithdrawAddress queries withdraw address of a delegator.
	DelegatorWithdrawAddress(ctx context.Context, in *QueryDelegatorWithdrawAddressRequest, opts ...grpc.CallOption) (*QueryDelegatorWithdrawAddressResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsPlans(ctx context.Context, in *QueryRewardsPlansRequest, opts ...grpc.CallOption) (*QueryRewardsPlansResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRewardsPlansResponse)
	err := c.cc.Invoke(ctx, Query_RewardsPlans_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RewardsPlan(ctx context.Context, in *QueryRewardsPlanRequest, opts ...grpc.CallOption) (*QueryRewardsPlanResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryRewardsPlanResponse)
	err := c.cc.Invoke(ctx, Query_RewardsPlan_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolOutstandingRewards(ctx context.Context, in *QueryPoolOutstandingRewardsRequest, opts ...grpc.CallOption) (*QueryPoolOutstandingRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPoolOutstandingRewardsResponse)
	err := c.cc.Invoke(ctx, Query_PoolOutstandingRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorOutstandingRewards(ctx context.Context, in *QueryOperatorOutstandingRewardsRequest, opts ...grpc.CallOption) (*QueryOperatorOutstandingRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOperatorOutstandingRewardsResponse)
	err := c.cc.Invoke(ctx, Query_OperatorOutstandingRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceOutstandingRewards(ctx context.Context, in *QueryServiceOutstandingRewardsRequest, opts ...grpc.CallOption) (*QueryServiceOutstandingRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryServiceOutstandingRewardsResponse)
	err := c.cc.Invoke(ctx, Query_ServiceOutstandingRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorCommission(ctx context.Context, in *QueryOperatorCommissionRequest, opts ...grpc.CallOption) (*QueryOperatorCommissionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOperatorCommissionResponse)
	err := c.cc.Invoke(ctx, Query_OperatorCommission_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolServiceTotalDelegatorShares(ctx context.Context, in *QueryPoolServiceTotalDelegatorSharesRequest, opts ...grpc.CallOption) (*QueryPoolServiceTotalDelegatorSharesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPoolServiceTotalDelegatorSharesResponse)
	err := c.cc.Invoke(ctx, Query_PoolServiceTotalDelegatorShares_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolDelegationRewards(ctx context.Context, in *QueryPoolDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryPoolDelegationRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPoolDelegationRewardsResponse)
	err := c.cc.Invoke(ctx, Query_PoolDelegationRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorDelegationRewards(ctx context.Context, in *QueryOperatorDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryOperatorDelegationRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOperatorDelegationRewardsResponse)
	err := c.cc.Invoke(ctx, Query_OperatorDelegationRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceDelegationRewards(ctx context.Context, in *QueryServiceDelegationRewardsRequest, opts ...grpc.CallOption) (*QueryServiceDelegationRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryServiceDelegationRewardsResponse)
	err := c.cc.Invoke(ctx, Query_ServiceDelegationRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorTotalRewards(ctx context.Context, in *QueryDelegatorTotalRewardsRequest, opts ...grpc.CallOption) (*QueryDelegatorTotalRewardsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDelegatorTotalRewardsResponse)
	err := c.cc.Invoke(ctx, Query_DelegatorTotalRewards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorWithdrawAddress(ctx context.Context, in *QueryDelegatorWithdrawAddressRequest, opts ...grpc.CallOption) (*QueryDelegatorWithdrawAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDelegatorWithdrawAddressResponse)
	err := c.cc.Invoke(ctx, Query_DelegatorWithdrawAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
//
// Query defines the gRPC querier service.
type QueryServer interface {
	// Params defines a gRPC query method that returns the parameters of the
	// module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// RewardsPlans queries all rewards plans.
	RewardsPlans(context.Context, *QueryRewardsPlansRequest) (*QueryRewardsPlansResponse, error)
	// RewardsPlan queries a specific rewards plan by its ID.
	RewardsPlan(context.Context, *QueryRewardsPlanRequest) (*QueryRewardsPlanResponse, error)
	// PoolOutstandingRewards queries rewards of a pool.
	PoolOutstandingRewards(context.Context, *QueryPoolOutstandingRewardsRequest) (*QueryPoolOutstandingRewardsResponse, error)
	// OperatorOutstandingRewards queries rewards of an operator.
	OperatorOutstandingRewards(context.Context, *QueryOperatorOutstandingRewardsRequest) (*QueryOperatorOutstandingRewardsResponse, error)
	// ServiceOutstandingRewards queries rewards of a service.
	ServiceOutstandingRewards(context.Context, *QueryServiceOutstandingRewardsRequest) (*QueryServiceOutstandingRewardsResponse, error)
	// OperatorCommission queries accumulated commission for an operator.
	OperatorCommission(context.Context, *QueryOperatorCommissionRequest) (*QueryOperatorCommissionResponse, error)
	// PoolServiceTotalDelegatorShares queries the total delegator shares for a
	// pool-service pair.
	PoolServiceTotalDelegatorShares(context.Context, *QueryPoolServiceTotalDelegatorSharesRequest) (*QueryPoolServiceTotalDelegatorSharesResponse, error)
	// PoolDelegationRewards queries the total rewards accrued by a pool
	// delegation.
	PoolDelegationRewards(context.Context, *QueryPoolDelegationRewardsRequest) (*QueryPoolDelegationRewardsResponse, error)
	// OperatorDelegationRewards queries the total rewards accrued by a operator
	// delegation.
	OperatorDelegationRewards(context.Context, *QueryOperatorDelegationRewardsRequest) (*QueryOperatorDelegationRewardsResponse, error)
	// ServiceDelegationRewards queries the total rewards accrued by a service
	// delegation.
	ServiceDelegationRewards(context.Context, *QueryServiceDelegationRewardsRequest) (*QueryServiceDelegationRewardsResponse, error)
	// DelegatorTotalRewards queries the total rewards accrued by a single
	// delegator
	DelegatorTotalRewards(context.Context, *QueryDelegatorTotalRewardsRequest) (*QueryDelegatorTotalRewardsResponse, error)
	// DelegatorWithdrawAddress queries withdraw address of a delegator.
	DelegatorWithdrawAddress(context.Context, *QueryDelegatorWithdrawAddressRequest) (*QueryDelegatorWithdrawAddressResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) RewardsPlans(context.Context, *QueryRewardsPlansRequest) (*QueryRewardsPlansResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsPlans not implemented")
}
func (UnimplementedQueryServer) RewardsPlan(context.Context, *QueryRewardsPlanRequest) (*QueryRewardsPlanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RewardsPlan not implemented")
}
func (UnimplementedQueryServer) PoolOutstandingRewards(context.Context, *QueryPoolOutstandingRewardsRequest) (*QueryPoolOutstandingRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolOutstandingRewards not implemented")
}
func (UnimplementedQueryServer) OperatorOutstandingRewards(context.Context, *QueryOperatorOutstandingRewardsRequest) (*QueryOperatorOutstandingRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorOutstandingRewards not implemented")
}
func (UnimplementedQueryServer) ServiceOutstandingRewards(context.Context, *QueryServiceOutstandingRewardsRequest) (*QueryServiceOutstandingRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceOutstandingRewards not implemented")
}
func (UnimplementedQueryServer) OperatorCommission(context.Context, *QueryOperatorCommissionRequest) (*QueryOperatorCommissionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorCommission not implemented")
}
func (UnimplementedQueryServer) PoolServiceTotalDelegatorShares(context.Context, *QueryPoolServiceTotalDelegatorSharesRequest) (*QueryPoolServiceTotalDelegatorSharesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolServiceTotalDelegatorShares not implemented")
}
func (UnimplementedQueryServer) PoolDelegationRewards(context.Context, *QueryPoolDelegationRewardsRequest) (*QueryPoolDelegationRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolDelegationRewards not implemented")
}
func (UnimplementedQueryServer) OperatorDelegationRewards(context.Context, *QueryOperatorDelegationRewardsRequest) (*QueryOperatorDelegationRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorDelegationRewards not implemented")
}
func (UnimplementedQueryServer) ServiceDelegationRewards(context.Context, *QueryServiceDelegationRewardsRequest) (*QueryServiceDelegationRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceDelegationRewards not implemented")
}
func (UnimplementedQueryServer) DelegatorTotalRewards(context.Context, *QueryDelegatorTotalRewardsRequest) (*QueryDelegatorTotalRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorTotalRewards not implemented")
}
func (UnimplementedQueryServer) DelegatorWithdrawAddress(context.Context, *QueryDelegatorWithdrawAddressRequest) (*QueryDelegatorWithdrawAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorWithdrawAddress not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsPlansRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RewardsPlans_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsPlans(ctx, req.(*QueryRewardsPlansRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RewardsPlan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRewardsPlanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RewardsPlan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RewardsPlan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RewardsPlan(ctx, req.(*QueryRewardsPlanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolOutstandingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolOutstandingRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolOutstandingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PoolOutstandingRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolOutstandingRewards(ctx, req.(*QueryPoolOutstandingRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorOutstandingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorOutstandingRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorOutstandingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OperatorOutstandingRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorOutstandingRewards(ctx, req.(*QueryOperatorOutstandingRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceOutstandingRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceOutstandingRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceOutstandingRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ServiceOutstandingRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceOutstandingRewards(ctx, req.(*QueryServiceOutstandingRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorCommission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorCommissionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorCommission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OperatorCommission_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorCommission(ctx, req.(*QueryOperatorCommissionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolServiceTotalDelegatorShares_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolServiceTotalDelegatorSharesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolServiceTotalDelegatorShares(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PoolServiceTotalDelegatorShares_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolServiceTotalDelegatorShares(ctx, req.(*QueryPoolServiceTotalDelegatorSharesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolDelegationRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolDelegationRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolDelegationRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PoolDelegationRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolDelegationRewards(ctx, req.(*QueryPoolDelegationRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorDelegationRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorDelegationRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorDelegationRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OperatorDelegationRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorDelegationRewards(ctx, req.(*QueryOperatorDelegationRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceDelegationRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceDelegationRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceDelegationRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ServiceDelegationRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceDelegationRewards(ctx, req.(*QueryServiceDelegationRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorTotalRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorTotalRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorTotalRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DelegatorTotalRewards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorTotalRewards(ctx, req.(*QueryDelegatorTotalRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorWithdrawAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorWithdrawAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorWithdrawAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DelegatorWithdrawAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorWithdrawAddress(ctx, req.(*QueryDelegatorWithdrawAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milkyway.rewards.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "RewardsPlans",
			Handler:    _Query_RewardsPlans_Handler,
		},
		{
			MethodName: "RewardsPlan",
			Handler:    _Query_RewardsPlan_Handler,
		},
		{
			MethodName: "PoolOutstandingRewards",
			Handler:    _Query_PoolOutstandingRewards_Handler,
		},
		{
			MethodName: "OperatorOutstandingRewards",
			Handler:    _Query_OperatorOutstandingRewards_Handler,
		},
		{
			MethodName: "ServiceOutstandingRewards",
			Handler:    _Query_ServiceOutstandingRewards_Handler,
		},
		{
			MethodName: "OperatorCommission",
			Handler:    _Query_OperatorCommission_Handler,
		},
		{
			MethodName: "PoolServiceTotalDelegatorShares",
			Handler:    _Query_PoolServiceTotalDelegatorShares_Handler,
		},
		{
			MethodName: "PoolDelegationRewards",
			Handler:    _Query_PoolDelegationRewards_Handler,
		},
		{
			MethodName: "OperatorDelegationRewards",
			Handler:    _Query_OperatorDelegationRewards_Handler,
		},
		{
			MethodName: "ServiceDelegationRewards",
			Handler:    _Query_ServiceDelegationRewards_Handler,
		},
		{
			MethodName: "DelegatorTotalRewards",
			Handler:    _Query_DelegatorTotalRewards_Handler,
		},
		{
			MethodName: "DelegatorWithdrawAddress",
			Handler:    _Query_DelegatorWithdrawAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milkyway/rewards/v1/query.proto",
}
