// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: milkyway/restaking/v1/messages.proto

package restakingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Msg_JoinService_FullMethodName             = "/milkyway.restaking.v1.Msg/JoinService"
	Msg_LeaveService_FullMethodName            = "/milkyway.restaking.v1.Msg/LeaveService"
	Msg_AllowOperator_FullMethodName           = "/milkyway.restaking.v1.Msg/AllowOperator"
	Msg_RemoveAllowedOperator_FullMethodName   = "/milkyway.restaking.v1.Msg/RemoveAllowedOperator"
	Msg_BorrowPoolSecurity_FullMethodName      = "/milkyway.restaking.v1.Msg/BorrowPoolSecurity"
	Msg_CeasePoolSecurityBorrow_FullMethodName = "/milkyway.restaking.v1.Msg/CeasePoolSecurityBorrow"
	Msg_DelegatePool_FullMethodName            = "/milkyway.restaking.v1.Msg/DelegatePool"
	Msg_DelegateOperator_FullMethodName        = "/milkyway.restaking.v1.Msg/DelegateOperator"
	Msg_DelegateService_FullMethodName         = "/milkyway.restaking.v1.Msg/DelegateService"
	Msg_UpdateParams_FullMethodName            = "/milkyway.restaking.v1.Msg/UpdateParams"
	Msg_UndelegatePool_FullMethodName          = "/milkyway.restaking.v1.Msg/UndelegatePool"
	Msg_UndelegateOperator_FullMethodName      = "/milkyway.restaking.v1.Msg/UndelegateOperator"
	Msg_UndelegateService_FullMethodName       = "/milkyway.restaking.v1.Msg/UndelegateService"
)

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Msg defines the restaking module's gRPC message service.
type MsgClient interface {
	// JoinService defines the operation that allows the operator admin
	// to start securing an AVS
	JoinService(ctx context.Context, in *MsgJoinService, opts ...grpc.CallOption) (*MsgJoinServiceResponse, error)
	// LeaveService defines the operation that allows the operator admin
	// to stop securing an AVS
	LeaveService(ctx context.Context, in *MsgLeaveService, opts ...grpc.CallOption) (*MsgLeaveServiceResponse, error)
	// AllowOperator defines the operation that allows the service admin
	// to add an operator to the list of allowed operator to secure the service
	AllowOperator(ctx context.Context, in *MsgAllowOperator, opts ...grpc.CallOption) (*MsgAllowOperatorResponse, error)
	// RemoveAllowedOperator defines the operation that allows the service admin
	// to remove a previously added operator from the list of allowed operators
	// to secure the service
	RemoveAllowedOperator(ctx context.Context, in *MsgRemoveAllowedOperator, opts ...grpc.CallOption) (*MsgRemoveAllowedOperatorResponse, error)
	// BorrowPoolSecurity defines the operation that allows the service admin
	// to add a pool to the list of pools from which the service has chosen
	// to borrow security.
	BorrowPoolSecurity(ctx context.Context, in *MsgBorrowPoolSecurity, opts ...grpc.CallOption) (*MsgBorrowPoolSecurityResponse, error)
	// CeasePoolSecurityBorrow defines the operation that allows the service admin
	// to remove a pool from the list of pools from which the service has chosen
	// to borrow security.
	CeasePoolSecurityBorrow(ctx context.Context, in *MsgCeasePoolSecurityBorrow, opts ...grpc.CallOption) (*MsgCeasePoolSecurityBorrowResponse, error)
	// DelegatePool defines the operation that allows users to delegate any amount
	// of an asset to a pool that can then be used to provide services with
	// cryptoeconomic security.
	DelegatePool(ctx context.Context, in *MsgDelegatePool, opts ...grpc.CallOption) (*MsgDelegatePoolResponse, error)
	// DelegateOperator defines the operation that allows users to delegate their
	// assets to a specific operator.
	DelegateOperator(ctx context.Context, in *MsgDelegateOperator, opts ...grpc.CallOption) (*MsgDelegateOperatorResponse, error)
	// DelegateService defines the operation that allows users to delegate their
	// assets to a specific service.
	DelegateService(ctx context.Context, in *MsgDelegateService, opts ...grpc.CallOption) (*MsgDelegateServiceResponse, error)
	// UpdateParams defines a (governance) operation for updating the module
	// parameters.
	// The authority defaults to the x/gov module account.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// UndelegatePool defines the operation that allows users to undelegate their
	// assets from a pool.
	UndelegatePool(ctx context.Context, in *MsgUndelegatePool, opts ...grpc.CallOption) (*MsgUndelegateResponse, error)
	// UndelegateOperator defines the operation that allows users to undelegate
	// their assets from a specific operator.
	UndelegateOperator(ctx context.Context, in *MsgUndelegateOperator, opts ...grpc.CallOption) (*MsgUndelegateResponse, error)
	// UndelegateService defines the operation that allows users to undelegate
	// their assets from a specific service.
	UndelegateService(ctx context.Context, in *MsgUndelegateService, opts ...grpc.CallOption) (*MsgUndelegateResponse, error)
}

type msgClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgClient(cc grpc.ClientConnInterface) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) JoinService(ctx context.Context, in *MsgJoinService, opts ...grpc.CallOption) (*MsgJoinServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgJoinServiceResponse)
	err := c.cc.Invoke(ctx, Msg_JoinService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LeaveService(ctx context.Context, in *MsgLeaveService, opts ...grpc.CallOption) (*MsgLeaveServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgLeaveServiceResponse)
	err := c.cc.Invoke(ctx, Msg_LeaveService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AllowOperator(ctx context.Context, in *MsgAllowOperator, opts ...grpc.CallOption) (*MsgAllowOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgAllowOperatorResponse)
	err := c.cc.Invoke(ctx, Msg_AllowOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveAllowedOperator(ctx context.Context, in *MsgRemoveAllowedOperator, opts ...grpc.CallOption) (*MsgRemoveAllowedOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgRemoveAllowedOperatorResponse)
	err := c.cc.Invoke(ctx, Msg_RemoveAllowedOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) BorrowPoolSecurity(ctx context.Context, in *MsgBorrowPoolSecurity, opts ...grpc.CallOption) (*MsgBorrowPoolSecurityResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgBorrowPoolSecurityResponse)
	err := c.cc.Invoke(ctx, Msg_BorrowPoolSecurity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CeasePoolSecurityBorrow(ctx context.Context, in *MsgCeasePoolSecurityBorrow, opts ...grpc.CallOption) (*MsgCeasePoolSecurityBorrowResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgCeasePoolSecurityBorrowResponse)
	err := c.cc.Invoke(ctx, Msg_CeasePoolSecurityBorrow_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DelegatePool(ctx context.Context, in *MsgDelegatePool, opts ...grpc.CallOption) (*MsgDelegatePoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgDelegatePoolResponse)
	err := c.cc.Invoke(ctx, Msg_DelegatePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DelegateOperator(ctx context.Context, in *MsgDelegateOperator, opts ...grpc.CallOption) (*MsgDelegateOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgDelegateOperatorResponse)
	err := c.cc.Invoke(ctx, Msg_DelegateOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DelegateService(ctx context.Context, in *MsgDelegateService, opts ...grpc.CallOption) (*MsgDelegateServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgDelegateServiceResponse)
	err := c.cc.Invoke(ctx, Msg_DelegateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, Msg_UpdateParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UndelegatePool(ctx context.Context, in *MsgUndelegatePool, opts ...grpc.CallOption) (*MsgUndelegateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUndelegateResponse)
	err := c.cc.Invoke(ctx, Msg_UndelegatePool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UndelegateOperator(ctx context.Context, in *MsgUndelegateOperator, opts ...grpc.CallOption) (*MsgUndelegateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUndelegateResponse)
	err := c.cc.Invoke(ctx, Msg_UndelegateOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UndelegateService(ctx context.Context, in *MsgUndelegateService, opts ...grpc.CallOption) (*MsgUndelegateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MsgUndelegateResponse)
	err := c.cc.Invoke(ctx, Msg_UndelegateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
// All implementations must embed UnimplementedMsgServer
// for forward compatibility.
//
// Msg defines the restaking module's gRPC message service.
type MsgServer interface {
	// JoinService defines the operation that allows the operator admin
	// to start securing an AVS
	JoinService(context.Context, *MsgJoinService) (*MsgJoinServiceResponse, error)
	// LeaveService defines the operation that allows the operator admin
	// to stop securing an AVS
	LeaveService(context.Context, *MsgLeaveService) (*MsgLeaveServiceResponse, error)
	// AllowOperator defines the operation that allows the service admin
	// to add an operator to the list of allowed operator to secure the service
	AllowOperator(context.Context, *MsgAllowOperator) (*MsgAllowOperatorResponse, error)
	// RemoveAllowedOperator defines the operation that allows the service admin
	// to remove a previously added operator from the list of allowed operators
	// to secure the service
	RemoveAllowedOperator(context.Context, *MsgRemoveAllowedOperator) (*MsgRemoveAllowedOperatorResponse, error)
	// BorrowPoolSecurity defines the operation that allows the service admin
	// to add a pool to the list of pools from which the service has chosen
	// to borrow security.
	BorrowPoolSecurity(context.Context, *MsgBorrowPoolSecurity) (*MsgBorrowPoolSecurityResponse, error)
	// CeasePoolSecurityBorrow defines the operation that allows the service admin
	// to remove a pool from the list of pools from which the service has chosen
	// to borrow security.
	CeasePoolSecurityBorrow(context.Context, *MsgCeasePoolSecurityBorrow) (*MsgCeasePoolSecurityBorrowResponse, error)
	// DelegatePool defines the operation that allows users to delegate any amount
	// of an asset to a pool that can then be used to provide services with
	// cryptoeconomic security.
	DelegatePool(context.Context, *MsgDelegatePool) (*MsgDelegatePoolResponse, error)
	// DelegateOperator defines the operation that allows users to delegate their
	// assets to a specific operator.
	DelegateOperator(context.Context, *MsgDelegateOperator) (*MsgDelegateOperatorResponse, error)
	// DelegateService defines the operation that allows users to delegate their
	// assets to a specific service.
	DelegateService(context.Context, *MsgDelegateService) (*MsgDelegateServiceResponse, error)
	// UpdateParams defines a (governance) operation for updating the module
	// parameters.
	// The authority defaults to the x/gov module account.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// UndelegatePool defines the operation that allows users to undelegate their
	// assets from a pool.
	UndelegatePool(context.Context, *MsgUndelegatePool) (*MsgUndelegateResponse, error)
	// UndelegateOperator defines the operation that allows users to undelegate
	// their assets from a specific operator.
	UndelegateOperator(context.Context, *MsgUndelegateOperator) (*MsgUndelegateResponse, error)
	// UndelegateService defines the operation that allows users to undelegate
	// their assets from a specific service.
	UndelegateService(context.Context, *MsgUndelegateService) (*MsgUndelegateResponse, error)
	mustEmbedUnimplementedMsgServer()
}

// UnimplementedMsgServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMsgServer struct{}

func (UnimplementedMsgServer) JoinService(context.Context, *MsgJoinService) (*MsgJoinServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinService not implemented")
}
func (UnimplementedMsgServer) LeaveService(context.Context, *MsgLeaveService) (*MsgLeaveServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LeaveService not implemented")
}
func (UnimplementedMsgServer) AllowOperator(context.Context, *MsgAllowOperator) (*MsgAllowOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowOperator not implemented")
}
func (UnimplementedMsgServer) RemoveAllowedOperator(context.Context, *MsgRemoveAllowedOperator) (*MsgRemoveAllowedOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllowedOperator not implemented")
}
func (UnimplementedMsgServer) BorrowPoolSecurity(context.Context, *MsgBorrowPoolSecurity) (*MsgBorrowPoolSecurityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrowPoolSecurity not implemented")
}
func (UnimplementedMsgServer) CeasePoolSecurityBorrow(context.Context, *MsgCeasePoolSecurityBorrow) (*MsgCeasePoolSecurityBorrowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CeasePoolSecurityBorrow not implemented")
}
func (UnimplementedMsgServer) DelegatePool(context.Context, *MsgDelegatePool) (*MsgDelegatePoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatePool not implemented")
}
func (UnimplementedMsgServer) DelegateOperator(context.Context, *MsgDelegateOperator) (*MsgDelegateOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateOperator not implemented")
}
func (UnimplementedMsgServer) DelegateService(context.Context, *MsgDelegateService) (*MsgDelegateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegateService not implemented")
}
func (UnimplementedMsgServer) UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (UnimplementedMsgServer) UndelegatePool(context.Context, *MsgUndelegatePool) (*MsgUndelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndelegatePool not implemented")
}
func (UnimplementedMsgServer) UndelegateOperator(context.Context, *MsgUndelegateOperator) (*MsgUndelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndelegateOperator not implemented")
}
func (UnimplementedMsgServer) UndelegateService(context.Context, *MsgUndelegateService) (*MsgUndelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UndelegateService not implemented")
}
func (UnimplementedMsgServer) mustEmbedUnimplementedMsgServer() {}
func (UnimplementedMsgServer) testEmbeddedByValue()             {}

// UnsafeMsgServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgServer will
// result in compilation errors.
type UnsafeMsgServer interface {
	mustEmbedUnimplementedMsgServer()
}

func RegisterMsgServer(s grpc.ServiceRegistrar, srv MsgServer) {
	// If the following call pancis, it indicates UnimplementedMsgServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Msg_ServiceDesc, srv)
}

func _Msg_JoinService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgJoinService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).JoinService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_JoinService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).JoinService(ctx, req.(*MsgJoinService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LeaveService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLeaveService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LeaveService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_LeaveService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LeaveService(ctx, req.(*MsgLeaveService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AllowOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAllowOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AllowOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_AllowOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AllowOperator(ctx, req.(*MsgAllowOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveAllowedOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveAllowedOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveAllowedOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_RemoveAllowedOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveAllowedOperator(ctx, req.(*MsgRemoveAllowedOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_BorrowPoolSecurity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgBorrowPoolSecurity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).BorrowPoolSecurity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_BorrowPoolSecurity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).BorrowPoolSecurity(ctx, req.(*MsgBorrowPoolSecurity))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CeasePoolSecurityBorrow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCeasePoolSecurityBorrow)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CeasePoolSecurityBorrow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_CeasePoolSecurityBorrow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CeasePoolSecurityBorrow(ctx, req.(*MsgCeasePoolSecurityBorrow))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DelegatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegatePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DelegatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DelegatePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DelegatePool(ctx, req.(*MsgDelegatePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DelegateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegateOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DelegateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DelegateOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DelegateOperator(ctx, req.(*MsgDelegateOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DelegateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDelegateService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DelegateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_DelegateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DelegateService(ctx, req.(*MsgDelegateService))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UpdateParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UndelegatePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUndelegatePool)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UndelegatePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UndelegatePool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UndelegatePool(ctx, req.(*MsgUndelegatePool))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UndelegateOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUndelegateOperator)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UndelegateOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UndelegateOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UndelegateOperator(ctx, req.(*MsgUndelegateOperator))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UndelegateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUndelegateService)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UndelegateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Msg_UndelegateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UndelegateService(ctx, req.(*MsgUndelegateService))
	}
	return interceptor(ctx, in, info, handler)
}

// Msg_ServiceDesc is the grpc.ServiceDesc for Msg service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Msg_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milkyway.restaking.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "JoinService",
			Handler:    _Msg_JoinService_Handler,
		},
		{
			MethodName: "LeaveService",
			Handler:    _Msg_LeaveService_Handler,
		},
		{
			MethodName: "AllowOperator",
			Handler:    _Msg_AllowOperator_Handler,
		},
		{
			MethodName: "RemoveAllowedOperator",
			Handler:    _Msg_RemoveAllowedOperator_Handler,
		},
		{
			MethodName: "BorrowPoolSecurity",
			Handler:    _Msg_BorrowPoolSecurity_Handler,
		},
		{
			MethodName: "CeasePoolSecurityBorrow",
			Handler:    _Msg_CeasePoolSecurityBorrow_Handler,
		},
		{
			MethodName: "DelegatePool",
			Handler:    _Msg_DelegatePool_Handler,
		},
		{
			MethodName: "DelegateOperator",
			Handler:    _Msg_DelegateOperator_Handler,
		},
		{
			MethodName: "DelegateService",
			Handler:    _Msg_DelegateService_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "UndelegatePool",
			Handler:    _Msg_UndelegatePool_Handler,
		},
		{
			MethodName: "UndelegateOperator",
			Handler:    _Msg_UndelegateOperator_Handler,
		},
		{
			MethodName: "UndelegateService",
			Handler:    _Msg_UndelegateService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milkyway/restaking/v1/messages.proto",
}
