// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: milkyway/restaking/v1/query.proto

package restakingv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Query_OperatorParams_FullMethodName                        = "/milkyway.restaking.v1.Query/OperatorParams"
	Query_ServiceParams_FullMethodName                         = "/milkyway.restaking.v1.Query/ServiceParams"
	Query_ServiceOperators_FullMethodName                      = "/milkyway.restaking.v1.Query/ServiceOperators"
	Query_PoolDelegations_FullMethodName                       = "/milkyway.restaking.v1.Query/PoolDelegations"
	Query_PoolDelegation_FullMethodName                        = "/milkyway.restaking.v1.Query/PoolDelegation"
	Query_PoolUnbondingDelegations_FullMethodName              = "/milkyway.restaking.v1.Query/PoolUnbondingDelegations"
	Query_PoolUnbondingDelegation_FullMethodName               = "/milkyway.restaking.v1.Query/PoolUnbondingDelegation"
	Query_OperatorDelegations_FullMethodName                   = "/milkyway.restaking.v1.Query/OperatorDelegations"
	Query_OperatorDelegation_FullMethodName                    = "/milkyway.restaking.v1.Query/OperatorDelegation"
	Query_OperatorUnbondingDelegations_FullMethodName          = "/milkyway.restaking.v1.Query/OperatorUnbondingDelegations"
	Query_OperatorUnbondingDelegation_FullMethodName           = "/milkyway.restaking.v1.Query/OperatorUnbondingDelegation"
	Query_ServiceDelegations_FullMethodName                    = "/milkyway.restaking.v1.Query/ServiceDelegations"
	Query_ServiceDelegation_FullMethodName                     = "/milkyway.restaking.v1.Query/ServiceDelegation"
	Query_ServiceUnbondingDelegations_FullMethodName           = "/milkyway.restaking.v1.Query/ServiceUnbondingDelegations"
	Query_ServiceUnbondingDelegation_FullMethodName            = "/milkyway.restaking.v1.Query/ServiceUnbondingDelegation"
	Query_DelegatorPoolDelegations_FullMethodName              = "/milkyway.restaking.v1.Query/DelegatorPoolDelegations"
	Query_DelegatorPoolUnbondingDelegations_FullMethodName     = "/milkyway.restaking.v1.Query/DelegatorPoolUnbondingDelegations"
	Query_DelegatorOperatorDelegations_FullMethodName          = "/milkyway.restaking.v1.Query/DelegatorOperatorDelegations"
	Query_DelegatorOperatorUnbondingDelegations_FullMethodName = "/milkyway.restaking.v1.Query/DelegatorOperatorUnbondingDelegations"
	Query_DelegatorServiceDelegations_FullMethodName           = "/milkyway.restaking.v1.Query/DelegatorServiceDelegations"
	Query_DelegatorServiceUnbondingDelegations_FullMethodName  = "/milkyway.restaking.v1.Query/DelegatorServiceUnbondingDelegations"
	Query_DelegatorPools_FullMethodName                        = "/milkyway.restaking.v1.Query/DelegatorPools"
	Query_DelegatorPool_FullMethodName                         = "/milkyway.restaking.v1.Query/DelegatorPool"
	Query_DelegatorOperators_FullMethodName                    = "/milkyway.restaking.v1.Query/DelegatorOperators"
	Query_DelegatorOperator_FullMethodName                     = "/milkyway.restaking.v1.Query/DelegatorOperator"
	Query_DelegatorServices_FullMethodName                     = "/milkyway.restaking.v1.Query/DelegatorServices"
	Query_DelegatorService_FullMethodName                      = "/milkyway.restaking.v1.Query/DelegatorService"
	Query_Params_FullMethodName                                = "/milkyway.restaking.v1.Query/Params"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Query defines the gRPC querier service.
type QueryClient interface {
	// OperatorParams queries the operator params for the given operator.
	OperatorParams(ctx context.Context, in *QueryOperatorParamsRequest, opts ...grpc.CallOption) (*QueryOperatorParamsResponse, error)
	// ServiceParams queries the service params for the given service.
	ServiceParams(ctx context.Context, in *QueryServiceParamsRequest, opts ...grpc.CallOption) (*QueryServiceParamsResponse, error)
	ServiceOperators(ctx context.Context, in *QueryServiceOperatorsRequest, opts ...grpc.CallOption) (*QueryServiceOperatorsResponse, error)
	// PoolDelegations queries the delegations info for the given pool.
	PoolDelegations(ctx context.Context, in *QueryPoolDelegationsRequest, opts ...grpc.CallOption) (*QueryPoolDelegationsResponse, error)
	// PoolDelegation queries the delegation info for the given pool and
	// delegator.
	PoolDelegation(ctx context.Context, in *QueryPoolDelegationRequest, opts ...grpc.CallOption) (*QueryPoolDelegationResponse, error)
	// PoolUnbondingDelegations queries the unbonding delegations info for the
	// given pool.
	PoolUnbondingDelegations(ctx context.Context, in *QueryPoolUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryPoolUnbondingDelegationsResponse, error)
	// PoolUnbondingDelegation queries the unbonding delegation info for the given
	// pool and delegator.
	PoolUnbondingDelegation(ctx context.Context, in *QueryPoolUnbondingDelegationRequest, opts ...grpc.CallOption) (*QueryPoolUnbondingDelegationResponse, error)
	// OperatorDelegations queries the delegations info for the given operator.
	OperatorDelegations(ctx context.Context, in *QueryOperatorDelegationsRequest, opts ...grpc.CallOption) (*QueryOperatorDelegationsResponse, error)
	// OperatorDelegation queries the delegation info for the given operator and
	// delegator.
	OperatorDelegation(ctx context.Context, in *QueryOperatorDelegationRequest, opts ...grpc.CallOption) (*QueryOperatorDelegationResponse, error)
	// OperatorUnbondingDelegations queries the unbonding delegations info for the
	// given operator.
	OperatorUnbondingDelegations(ctx context.Context, in *QueryOperatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryOperatorUnbondingDelegationsResponse, error)
	// OperatorUnbondingDelegation queries the unbonding delegation info for the
	// given operator and delegator.
	OperatorUnbondingDelegation(ctx context.Context, in *QueryOperatorUnbondingDelegationRequest, opts ...grpc.CallOption) (*QueryOperatorUnbondingDelegationResponse, error)
	// ServiceDelegations queries the delegations info for the given service.
	ServiceDelegations(ctx context.Context, in *QueryServiceDelegationsRequest, opts ...grpc.CallOption) (*QueryServiceDelegationsResponse, error)
	// ServiceDelegation queries the delegation info for the given service and
	// delegator.
	ServiceDelegation(ctx context.Context, in *QueryServiceDelegationRequest, opts ...grpc.CallOption) (*QueryServiceDelegationResponse, error)
	// ServiceUnbondingDelegations queries the unbonding delegations info for the
	// given service.
	ServiceUnbondingDelegations(ctx context.Context, in *QueryServiceUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryServiceUnbondingDelegationsResponse, error)
	// ServiceUnbondingDelegation queries the unbonding delegation info for the
	// given service and delegator.
	ServiceUnbondingDelegation(ctx context.Context, in *QueryServiceUnbondingDelegationRequest, opts ...grpc.CallOption) (*QueryServiceUnbondingDelegationResponse, error)
	// DelegatorPoolDelegations queries all the pool delegations of a given
	// delegator address.
	DelegatorPoolDelegations(ctx context.Context, in *QueryDelegatorPoolDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolDelegationsResponse, error)
	// DelegatorPoolUnbondingDelegations queries all the pool unbonding
	// delegations of a given delegator address.
	DelegatorPoolUnbondingDelegations(ctx context.Context, in *QueryDelegatorPoolUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolUnbondingDelegationsResponse, error)
	// DelegatorOperatorDelegations queries all the operator delegations of a
	// given delegator address.
	DelegatorOperatorDelegations(ctx context.Context, in *QueryDelegatorOperatorDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorDelegationsResponse, error)
	// DelegatorOperatorUnbondingDelegations queries all the operator unbonding
	// delegations of a given delegator address.
	DelegatorOperatorUnbondingDelegations(ctx context.Context, in *QueryDelegatorOperatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorUnbondingDelegationsResponse, error)
	// DelegatorServiceDelegations queries all the service delegations of a given
	// delegator address.
	DelegatorServiceDelegations(ctx context.Context, in *QueryDelegatorServiceDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorServiceDelegationsResponse, error)
	// DelegatorServiceUnbondingDelegations queries all the service unbonding
	// delegations of a given delegator address.
	DelegatorServiceUnbondingDelegations(ctx context.Context, in *QueryDelegatorServiceUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorServiceUnbondingDelegationsResponse, error)
	// DelegatorPools queries all pools info for given delegator
	// address.
	DelegatorPools(ctx context.Context, in *QueryDelegatorPoolsRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolsResponse, error)
	// DelegatorPool queries the pool info for given delegator and pool id.
	DelegatorPool(ctx context.Context, in *QueryDelegatorPoolRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolResponse, error)
	// DelegatorOperators queries all operators info for given delegator
	DelegatorOperators(ctx context.Context, in *QueryDelegatorOperatorsRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorsResponse, error)
	// DelegatorOperator queries the operator info for given delegator and
	// operator id.
	DelegatorOperator(ctx context.Context, in *QueryDelegatorOperatorRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorResponse, error)
	// DelegatorServices queries all services info for given delegator
	DelegatorServices(ctx context.Context, in *QueryDelegatorServicesRequest, opts ...grpc.CallOption) (*QueryDelegatorServicesResponse, error)
	// DelegatorService queries the service info for given delegator and service
	// id.
	DelegatorService(ctx context.Context, in *QueryDelegatorServiceRequest, opts ...grpc.CallOption) (*QueryDelegatorServiceResponse, error)
	// Params queries the restaking parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) OperatorParams(ctx context.Context, in *QueryOperatorParamsRequest, opts ...grpc.CallOption) (*QueryOperatorParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOperatorParamsResponse)
	err := c.cc.Invoke(ctx, Query_OperatorParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceParams(ctx context.Context, in *QueryServiceParamsRequest, opts ...grpc.CallOption) (*QueryServiceParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryServiceParamsResponse)
	err := c.cc.Invoke(ctx, Query_ServiceParams_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceOperators(ctx context.Context, in *QueryServiceOperatorsRequest, opts ...grpc.CallOption) (*QueryServiceOperatorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryServiceOperatorsResponse)
	err := c.cc.Invoke(ctx, Query_ServiceOperators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolDelegations(ctx context.Context, in *QueryPoolDelegationsRequest, opts ...grpc.CallOption) (*QueryPoolDelegationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPoolDelegationsResponse)
	err := c.cc.Invoke(ctx, Query_PoolDelegations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolDelegation(ctx context.Context, in *QueryPoolDelegationRequest, opts ...grpc.CallOption) (*QueryPoolDelegationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPoolDelegationResponse)
	err := c.cc.Invoke(ctx, Query_PoolDelegation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolUnbondingDelegations(ctx context.Context, in *QueryPoolUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryPoolUnbondingDelegationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPoolUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, Query_PoolUnbondingDelegations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolUnbondingDelegation(ctx context.Context, in *QueryPoolUnbondingDelegationRequest, opts ...grpc.CallOption) (*QueryPoolUnbondingDelegationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryPoolUnbondingDelegationResponse)
	err := c.cc.Invoke(ctx, Query_PoolUnbondingDelegation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorDelegations(ctx context.Context, in *QueryOperatorDelegationsRequest, opts ...grpc.CallOption) (*QueryOperatorDelegationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOperatorDelegationsResponse)
	err := c.cc.Invoke(ctx, Query_OperatorDelegations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorDelegation(ctx context.Context, in *QueryOperatorDelegationRequest, opts ...grpc.CallOption) (*QueryOperatorDelegationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOperatorDelegationResponse)
	err := c.cc.Invoke(ctx, Query_OperatorDelegation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorUnbondingDelegations(ctx context.Context, in *QueryOperatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryOperatorUnbondingDelegationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOperatorUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, Query_OperatorUnbondingDelegations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OperatorUnbondingDelegation(ctx context.Context, in *QueryOperatorUnbondingDelegationRequest, opts ...grpc.CallOption) (*QueryOperatorUnbondingDelegationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryOperatorUnbondingDelegationResponse)
	err := c.cc.Invoke(ctx, Query_OperatorUnbondingDelegation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceDelegations(ctx context.Context, in *QueryServiceDelegationsRequest, opts ...grpc.CallOption) (*QueryServiceDelegationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryServiceDelegationsResponse)
	err := c.cc.Invoke(ctx, Query_ServiceDelegations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceDelegation(ctx context.Context, in *QueryServiceDelegationRequest, opts ...grpc.CallOption) (*QueryServiceDelegationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryServiceDelegationResponse)
	err := c.cc.Invoke(ctx, Query_ServiceDelegation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceUnbondingDelegations(ctx context.Context, in *QueryServiceUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryServiceUnbondingDelegationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryServiceUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, Query_ServiceUnbondingDelegations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ServiceUnbondingDelegation(ctx context.Context, in *QueryServiceUnbondingDelegationRequest, opts ...grpc.CallOption) (*QueryServiceUnbondingDelegationResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryServiceUnbondingDelegationResponse)
	err := c.cc.Invoke(ctx, Query_ServiceUnbondingDelegation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorPoolDelegations(ctx context.Context, in *QueryDelegatorPoolDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolDelegationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDelegatorPoolDelegationsResponse)
	err := c.cc.Invoke(ctx, Query_DelegatorPoolDelegations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorPoolUnbondingDelegations(ctx context.Context, in *QueryDelegatorPoolUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolUnbondingDelegationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDelegatorPoolUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, Query_DelegatorPoolUnbondingDelegations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorOperatorDelegations(ctx context.Context, in *QueryDelegatorOperatorDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorDelegationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDelegatorOperatorDelegationsResponse)
	err := c.cc.Invoke(ctx, Query_DelegatorOperatorDelegations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorOperatorUnbondingDelegations(ctx context.Context, in *QueryDelegatorOperatorUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorUnbondingDelegationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDelegatorOperatorUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, Query_DelegatorOperatorUnbondingDelegations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorServiceDelegations(ctx context.Context, in *QueryDelegatorServiceDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorServiceDelegationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDelegatorServiceDelegationsResponse)
	err := c.cc.Invoke(ctx, Query_DelegatorServiceDelegations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorServiceUnbondingDelegations(ctx context.Context, in *QueryDelegatorServiceUnbondingDelegationsRequest, opts ...grpc.CallOption) (*QueryDelegatorServiceUnbondingDelegationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDelegatorServiceUnbondingDelegationsResponse)
	err := c.cc.Invoke(ctx, Query_DelegatorServiceUnbondingDelegations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorPools(ctx context.Context, in *QueryDelegatorPoolsRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDelegatorPoolsResponse)
	err := c.cc.Invoke(ctx, Query_DelegatorPools_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorPool(ctx context.Context, in *QueryDelegatorPoolRequest, opts ...grpc.CallOption) (*QueryDelegatorPoolResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDelegatorPoolResponse)
	err := c.cc.Invoke(ctx, Query_DelegatorPool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorOperators(ctx context.Context, in *QueryDelegatorOperatorsRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDelegatorOperatorsResponse)
	err := c.cc.Invoke(ctx, Query_DelegatorOperators_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorOperator(ctx context.Context, in *QueryDelegatorOperatorRequest, opts ...grpc.CallOption) (*QueryDelegatorOperatorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDelegatorOperatorResponse)
	err := c.cc.Invoke(ctx, Query_DelegatorOperator_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorServices(ctx context.Context, in *QueryDelegatorServicesRequest, opts ...grpc.CallOption) (*QueryDelegatorServicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDelegatorServicesResponse)
	err := c.cc.Invoke(ctx, Query_DelegatorServices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DelegatorService(ctx context.Context, in *QueryDelegatorServiceRequest, opts ...grpc.CallOption) (*QueryDelegatorServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryDelegatorServiceResponse)
	err := c.cc.Invoke(ctx, Query_DelegatorService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility.
//
// Query defines the gRPC querier service.
type QueryServer interface {
	// OperatorParams queries the operator params for the given operator.
	OperatorParams(context.Context, *QueryOperatorParamsRequest) (*QueryOperatorParamsResponse, error)
	// ServiceParams queries the service params for the given service.
	ServiceParams(context.Context, *QueryServiceParamsRequest) (*QueryServiceParamsResponse, error)
	ServiceOperators(context.Context, *QueryServiceOperatorsRequest) (*QueryServiceOperatorsResponse, error)
	// PoolDelegations queries the delegations info for the given pool.
	PoolDelegations(context.Context, *QueryPoolDelegationsRequest) (*QueryPoolDelegationsResponse, error)
	// PoolDelegation queries the delegation info for the given pool and
	// delegator.
	PoolDelegation(context.Context, *QueryPoolDelegationRequest) (*QueryPoolDelegationResponse, error)
	// PoolUnbondingDelegations queries the unbonding delegations info for the
	// given pool.
	PoolUnbondingDelegations(context.Context, *QueryPoolUnbondingDelegationsRequest) (*QueryPoolUnbondingDelegationsResponse, error)
	// PoolUnbondingDelegation queries the unbonding delegation info for the given
	// pool and delegator.
	PoolUnbondingDelegation(context.Context, *QueryPoolUnbondingDelegationRequest) (*QueryPoolUnbondingDelegationResponse, error)
	// OperatorDelegations queries the delegations info for the given operator.
	OperatorDelegations(context.Context, *QueryOperatorDelegationsRequest) (*QueryOperatorDelegationsResponse, error)
	// OperatorDelegation queries the delegation info for the given operator and
	// delegator.
	OperatorDelegation(context.Context, *QueryOperatorDelegationRequest) (*QueryOperatorDelegationResponse, error)
	// OperatorUnbondingDelegations queries the unbonding delegations info for the
	// given operator.
	OperatorUnbondingDelegations(context.Context, *QueryOperatorUnbondingDelegationsRequest) (*QueryOperatorUnbondingDelegationsResponse, error)
	// OperatorUnbondingDelegation queries the unbonding delegation info for the
	// given operator and delegator.
	OperatorUnbondingDelegation(context.Context, *QueryOperatorUnbondingDelegationRequest) (*QueryOperatorUnbondingDelegationResponse, error)
	// ServiceDelegations queries the delegations info for the given service.
	ServiceDelegations(context.Context, *QueryServiceDelegationsRequest) (*QueryServiceDelegationsResponse, error)
	// ServiceDelegation queries the delegation info for the given service and
	// delegator.
	ServiceDelegation(context.Context, *QueryServiceDelegationRequest) (*QueryServiceDelegationResponse, error)
	// ServiceUnbondingDelegations queries the unbonding delegations info for the
	// given service.
	ServiceUnbondingDelegations(context.Context, *QueryServiceUnbondingDelegationsRequest) (*QueryServiceUnbondingDelegationsResponse, error)
	// ServiceUnbondingDelegation queries the unbonding delegation info for the
	// given service and delegator.
	ServiceUnbondingDelegation(context.Context, *QueryServiceUnbondingDelegationRequest) (*QueryServiceUnbondingDelegationResponse, error)
	// DelegatorPoolDelegations queries all the pool delegations of a given
	// delegator address.
	DelegatorPoolDelegations(context.Context, *QueryDelegatorPoolDelegationsRequest) (*QueryDelegatorPoolDelegationsResponse, error)
	// DelegatorPoolUnbondingDelegations queries all the pool unbonding
	// delegations of a given delegator address.
	DelegatorPoolUnbondingDelegations(context.Context, *QueryDelegatorPoolUnbondingDelegationsRequest) (*QueryDelegatorPoolUnbondingDelegationsResponse, error)
	// DelegatorOperatorDelegations queries all the operator delegations of a
	// given delegator address.
	DelegatorOperatorDelegations(context.Context, *QueryDelegatorOperatorDelegationsRequest) (*QueryDelegatorOperatorDelegationsResponse, error)
	// DelegatorOperatorUnbondingDelegations queries all the operator unbonding
	// delegations of a given delegator address.
	DelegatorOperatorUnbondingDelegations(context.Context, *QueryDelegatorOperatorUnbondingDelegationsRequest) (*QueryDelegatorOperatorUnbondingDelegationsResponse, error)
	// DelegatorServiceDelegations queries all the service delegations of a given
	// delegator address.
	DelegatorServiceDelegations(context.Context, *QueryDelegatorServiceDelegationsRequest) (*QueryDelegatorServiceDelegationsResponse, error)
	// DelegatorServiceUnbondingDelegations queries all the service unbonding
	// delegations of a given delegator address.
	DelegatorServiceUnbondingDelegations(context.Context, *QueryDelegatorServiceUnbondingDelegationsRequest) (*QueryDelegatorServiceUnbondingDelegationsResponse, error)
	// DelegatorPools queries all pools info for given delegator
	// address.
	DelegatorPools(context.Context, *QueryDelegatorPoolsRequest) (*QueryDelegatorPoolsResponse, error)
	// DelegatorPool queries the pool info for given delegator and pool id.
	DelegatorPool(context.Context, *QueryDelegatorPoolRequest) (*QueryDelegatorPoolResponse, error)
	// DelegatorOperators queries all operators info for given delegator
	DelegatorOperators(context.Context, *QueryDelegatorOperatorsRequest) (*QueryDelegatorOperatorsResponse, error)
	// DelegatorOperator queries the operator info for given delegator and
	// operator id.
	DelegatorOperator(context.Context, *QueryDelegatorOperatorRequest) (*QueryDelegatorOperatorResponse, error)
	// DelegatorServices queries all services info for given delegator
	DelegatorServices(context.Context, *QueryDelegatorServicesRequest) (*QueryDelegatorServicesResponse, error)
	// DelegatorService queries the service info for given delegator and service
	// id.
	DelegatorService(context.Context, *QueryDelegatorServiceRequest) (*QueryDelegatorServiceResponse, error)
	// Params queries the restaking parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServer struct{}

func (UnimplementedQueryServer) OperatorParams(context.Context, *QueryOperatorParamsRequest) (*QueryOperatorParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorParams not implemented")
}
func (UnimplementedQueryServer) ServiceParams(context.Context, *QueryServiceParamsRequest) (*QueryServiceParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceParams not implemented")
}
func (UnimplementedQueryServer) ServiceOperators(context.Context, *QueryServiceOperatorsRequest) (*QueryServiceOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceOperators not implemented")
}
func (UnimplementedQueryServer) PoolDelegations(context.Context, *QueryPoolDelegationsRequest) (*QueryPoolDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolDelegations not implemented")
}
func (UnimplementedQueryServer) PoolDelegation(context.Context, *QueryPoolDelegationRequest) (*QueryPoolDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolDelegation not implemented")
}
func (UnimplementedQueryServer) PoolUnbondingDelegations(context.Context, *QueryPoolUnbondingDelegationsRequest) (*QueryPoolUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolUnbondingDelegations not implemented")
}
func (UnimplementedQueryServer) PoolUnbondingDelegation(context.Context, *QueryPoolUnbondingDelegationRequest) (*QueryPoolUnbondingDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolUnbondingDelegation not implemented")
}
func (UnimplementedQueryServer) OperatorDelegations(context.Context, *QueryOperatorDelegationsRequest) (*QueryOperatorDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorDelegations not implemented")
}
func (UnimplementedQueryServer) OperatorDelegation(context.Context, *QueryOperatorDelegationRequest) (*QueryOperatorDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorDelegation not implemented")
}
func (UnimplementedQueryServer) OperatorUnbondingDelegations(context.Context, *QueryOperatorUnbondingDelegationsRequest) (*QueryOperatorUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorUnbondingDelegations not implemented")
}
func (UnimplementedQueryServer) OperatorUnbondingDelegation(context.Context, *QueryOperatorUnbondingDelegationRequest) (*QueryOperatorUnbondingDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OperatorUnbondingDelegation not implemented")
}
func (UnimplementedQueryServer) ServiceDelegations(context.Context, *QueryServiceDelegationsRequest) (*QueryServiceDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceDelegations not implemented")
}
func (UnimplementedQueryServer) ServiceDelegation(context.Context, *QueryServiceDelegationRequest) (*QueryServiceDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceDelegation not implemented")
}
func (UnimplementedQueryServer) ServiceUnbondingDelegations(context.Context, *QueryServiceUnbondingDelegationsRequest) (*QueryServiceUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceUnbondingDelegations not implemented")
}
func (UnimplementedQueryServer) ServiceUnbondingDelegation(context.Context, *QueryServiceUnbondingDelegationRequest) (*QueryServiceUnbondingDelegationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ServiceUnbondingDelegation not implemented")
}
func (UnimplementedQueryServer) DelegatorPoolDelegations(context.Context, *QueryDelegatorPoolDelegationsRequest) (*QueryDelegatorPoolDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorPoolDelegations not implemented")
}
func (UnimplementedQueryServer) DelegatorPoolUnbondingDelegations(context.Context, *QueryDelegatorPoolUnbondingDelegationsRequest) (*QueryDelegatorPoolUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorPoolUnbondingDelegations not implemented")
}
func (UnimplementedQueryServer) DelegatorOperatorDelegations(context.Context, *QueryDelegatorOperatorDelegationsRequest) (*QueryDelegatorOperatorDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorOperatorDelegations not implemented")
}
func (UnimplementedQueryServer) DelegatorOperatorUnbondingDelegations(context.Context, *QueryDelegatorOperatorUnbondingDelegationsRequest) (*QueryDelegatorOperatorUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorOperatorUnbondingDelegations not implemented")
}
func (UnimplementedQueryServer) DelegatorServiceDelegations(context.Context, *QueryDelegatorServiceDelegationsRequest) (*QueryDelegatorServiceDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorServiceDelegations not implemented")
}
func (UnimplementedQueryServer) DelegatorServiceUnbondingDelegations(context.Context, *QueryDelegatorServiceUnbondingDelegationsRequest) (*QueryDelegatorServiceUnbondingDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorServiceUnbondingDelegations not implemented")
}
func (UnimplementedQueryServer) DelegatorPools(context.Context, *QueryDelegatorPoolsRequest) (*QueryDelegatorPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorPools not implemented")
}
func (UnimplementedQueryServer) DelegatorPool(context.Context, *QueryDelegatorPoolRequest) (*QueryDelegatorPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorPool not implemented")
}
func (UnimplementedQueryServer) DelegatorOperators(context.Context, *QueryDelegatorOperatorsRequest) (*QueryDelegatorOperatorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorOperators not implemented")
}
func (UnimplementedQueryServer) DelegatorOperator(context.Context, *QueryDelegatorOperatorRequest) (*QueryDelegatorOperatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorOperator not implemented")
}
func (UnimplementedQueryServer) DelegatorServices(context.Context, *QueryDelegatorServicesRequest) (*QueryDelegatorServicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorServices not implemented")
}
func (UnimplementedQueryServer) DelegatorService(context.Context, *QueryDelegatorServiceRequest) (*QueryDelegatorServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelegatorService not implemented")
}
func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}
func (UnimplementedQueryServer) testEmbeddedByValue()               {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	// If the following call pancis, it indicates UnimplementedQueryServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_OperatorParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OperatorParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorParams(ctx, req.(*QueryOperatorParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ServiceParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceParams(ctx, req.(*QueryServiceParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ServiceOperators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceOperators(ctx, req.(*QueryServiceOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PoolDelegations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolDelegations(ctx, req.(*QueryPoolDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PoolDelegation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolDelegation(ctx, req.(*QueryPoolDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PoolUnbondingDelegations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolUnbondingDelegations(ctx, req.(*QueryPoolUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolUnbondingDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPoolUnbondingDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolUnbondingDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_PoolUnbondingDelegation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolUnbondingDelegation(ctx, req.(*QueryPoolUnbondingDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OperatorDelegations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorDelegations(ctx, req.(*QueryOperatorDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OperatorDelegation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorDelegation(ctx, req.(*QueryOperatorDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OperatorUnbondingDelegations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorUnbondingDelegations(ctx, req.(*QueryOperatorUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OperatorUnbondingDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOperatorUnbondingDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OperatorUnbondingDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OperatorUnbondingDelegation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OperatorUnbondingDelegation(ctx, req.(*QueryOperatorUnbondingDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ServiceDelegations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceDelegations(ctx, req.(*QueryServiceDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ServiceDelegation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceDelegation(ctx, req.(*QueryServiceDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ServiceUnbondingDelegations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceUnbondingDelegations(ctx, req.(*QueryServiceUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ServiceUnbondingDelegation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryServiceUnbondingDelegationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ServiceUnbondingDelegation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ServiceUnbondingDelegation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ServiceUnbondingDelegation(ctx, req.(*QueryServiceUnbondingDelegationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorPoolDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorPoolDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorPoolDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DelegatorPoolDelegations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorPoolDelegations(ctx, req.(*QueryDelegatorPoolDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorPoolUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorPoolUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorPoolUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DelegatorPoolUnbondingDelegations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorPoolUnbondingDelegations(ctx, req.(*QueryDelegatorPoolUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorOperatorDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorOperatorDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorOperatorDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DelegatorOperatorDelegations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorOperatorDelegations(ctx, req.(*QueryDelegatorOperatorDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorOperatorUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorOperatorUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorOperatorUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DelegatorOperatorUnbondingDelegations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorOperatorUnbondingDelegations(ctx, req.(*QueryDelegatorOperatorUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorServiceDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorServiceDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorServiceDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DelegatorServiceDelegations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorServiceDelegations(ctx, req.(*QueryDelegatorServiceDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorServiceUnbondingDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorServiceUnbondingDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorServiceUnbondingDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DelegatorServiceUnbondingDelegations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorServiceUnbondingDelegations(ctx, req.(*QueryDelegatorServiceUnbondingDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DelegatorPools_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorPools(ctx, req.(*QueryDelegatorPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DelegatorPool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorPool(ctx, req.(*QueryDelegatorPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorOperators_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorOperatorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorOperators(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DelegatorOperators_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorOperators(ctx, req.(*QueryDelegatorOperatorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorOperatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DelegatorOperator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorOperator(ctx, req.(*QueryDelegatorOperatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DelegatorServices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorServices(ctx, req.(*QueryDelegatorServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DelegatorService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDelegatorServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DelegatorService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DelegatorService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DelegatorService(ctx, req.(*QueryDelegatorServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "milkyway.restaking.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OperatorParams",
			Handler:    _Query_OperatorParams_Handler,
		},
		{
			MethodName: "ServiceParams",
			Handler:    _Query_ServiceParams_Handler,
		},
		{
			MethodName: "ServiceOperators",
			Handler:    _Query_ServiceOperators_Handler,
		},
		{
			MethodName: "PoolDelegations",
			Handler:    _Query_PoolDelegations_Handler,
		},
		{
			MethodName: "PoolDelegation",
			Handler:    _Query_PoolDelegation_Handler,
		},
		{
			MethodName: "PoolUnbondingDelegations",
			Handler:    _Query_PoolUnbondingDelegations_Handler,
		},
		{
			MethodName: "PoolUnbondingDelegation",
			Handler:    _Query_PoolUnbondingDelegation_Handler,
		},
		{
			MethodName: "OperatorDelegations",
			Handler:    _Query_OperatorDelegations_Handler,
		},
		{
			MethodName: "OperatorDelegation",
			Handler:    _Query_OperatorDelegation_Handler,
		},
		{
			MethodName: "OperatorUnbondingDelegations",
			Handler:    _Query_OperatorUnbondingDelegations_Handler,
		},
		{
			MethodName: "OperatorUnbondingDelegation",
			Handler:    _Query_OperatorUnbondingDelegation_Handler,
		},
		{
			MethodName: "ServiceDelegations",
			Handler:    _Query_ServiceDelegations_Handler,
		},
		{
			MethodName: "ServiceDelegation",
			Handler:    _Query_ServiceDelegation_Handler,
		},
		{
			MethodName: "ServiceUnbondingDelegations",
			Handler:    _Query_ServiceUnbondingDelegations_Handler,
		},
		{
			MethodName: "ServiceUnbondingDelegation",
			Handler:    _Query_ServiceUnbondingDelegation_Handler,
		},
		{
			MethodName: "DelegatorPoolDelegations",
			Handler:    _Query_DelegatorPoolDelegations_Handler,
		},
		{
			MethodName: "DelegatorPoolUnbondingDelegations",
			Handler:    _Query_DelegatorPoolUnbondingDelegations_Handler,
		},
		{
			MethodName: "DelegatorOperatorDelegations",
			Handler:    _Query_DelegatorOperatorDelegations_Handler,
		},
		{
			MethodName: "DelegatorOperatorUnbondingDelegations",
			Handler:    _Query_DelegatorOperatorUnbondingDelegations_Handler,
		},
		{
			MethodName: "DelegatorServiceDelegations",
			Handler:    _Query_DelegatorServiceDelegations_Handler,
		},
		{
			MethodName: "DelegatorServiceUnbondingDelegations",
			Handler:    _Query_DelegatorServiceUnbondingDelegations_Handler,
		},
		{
			MethodName: "DelegatorPools",
			Handler:    _Query_DelegatorPools_Handler,
		},
		{
			MethodName: "DelegatorPool",
			Handler:    _Query_DelegatorPool_Handler,
		},
		{
			MethodName: "DelegatorOperators",
			Handler:    _Query_DelegatorOperators_Handler,
		},
		{
			MethodName: "DelegatorOperator",
			Handler:    _Query_DelegatorOperator_Handler,
		},
		{
			MethodName: "DelegatorServices",
			Handler:    _Query_DelegatorServices_Handler,
		},
		{
			MethodName: "DelegatorService",
			Handler:    _Query_DelegatorService_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milkyway/restaking/v1/query.proto",
}
